{"version":3,"sources":["Parser.ts","BlocklyExtensions.ts","BlocklyComp.tsx","Simulator.ts","StdLib.ts","Util.ts","WorldState.ts","PuzzleState.ts","Display.tsx","Slider.tsx","CameraPositioning.tsx","RunButton.tsx","InstructionsGoal.tsx","PuzzleManager.ts","FontAwesomeIcons.tsx","App.tsx","PuzzleSelect.tsx","index.tsx"],"names":["WhitespaceType","TokenType","SyntaxErrorCode","SYMBOLS","KEYWORDS","FileLocation","start","line","column","end","this","token_equal","a","b","kind","_","isEqual","value","whitespace","is_space","c","undefined","length","is_indent","is_alpha","test","is_digit","ExpressionType","StatementType","SyntaxError","code","location","msg","Object","setPrototypeOf","prototype","Error","Lexer","program","source","position","indent_stack","next_line","next_column","pos","next_position","tok","t","Whitespace","last","error","UnexpectedEOF","advance","do_take_next","peek_char","next_char","string","build_string","x","includes","token","Keyword","Ident","name","IntLiteral","parseInt","Symbol","InvalidCharacter","indent","next","is_eof","out","skip_whitespace","skip_comment","last_indent","push","Indent","Dedent","pop","InvalidIndentation","lex_token","Newline","tokens","result","lex_line","i","Parser","last_location","reverse","type","expected","UnexpectedToken","JSON","stringify","attributes","Map","expr_type","expr","next_location","Number","InvalidExpression","meta","new_meta","expression","matchfn","sep","match_token","make_check_token","entries","peek_token","match","match_ident","args","match_paren_list","match_expression","bind","make_ws_token","attribs","key","eq","val","n","set","repeat","match_repeat","Repeat","stmt","invoke","match_invocation","Command","InvalidStatement","Execute","body","match_statement","dedent","number","match_block","def","params","match_attributes","match_procedure","match_top_level_statement","EMPTY_PROGRAM","parse","lex_all","console","match_program","Blockly","getNested","input","blocks","inputList","connection","child","targetBlock","freeze","doFreezeArgs","frozen","setMovable","setDeletable","contextMenu","setEditable","inputsInline","filter","forEach","COLOR_MOVE_1","COLOR_MOVE_2","COLOR_BLOCK","skip_blocks","KoboldConvert","xmlHelper","xml","xmlPro","block","breakStmt","slice","color","FieldColour","COLOURS","makeShadowNum","xmlRep","breakStmtRepNum","text_to_blocks","dom","Xml","textToDom","getMainWorkspace","clear","domToWorkspace","mainWorkspace","get","freeze_args","top","getTopBlocks","freeze_stack","freeze_all_blocks","has","block_to_text","str","convert_fn","children","getNextBlock","blocks_to_text","text","setColour","percent","f","p","R","G","B","Math","round","toString","shade_hex_color","getColour","num","id","COMMANDS","move2","place","remove","teaser","pack","up","down","defproc","ValueType","BlocklyComp","props","workspace","Blocks","init","jsonInit","message0","args0","check","previousStatement","nextStatement","colour","getInput","getFieldValue","appendDummyInput","appendField","setPreviousStatement","setNextStatement","indexOf","getProcedureDef","style","width","log","inject","toolbox","document","getElementById","renderer","updateToolbox","granted_blocks","toolXML","data","puzzle","library","restricted","React","Component","RuntimeErrorCode","Environment","values","procedures","SimulatorState","RuntimeError","runtime_error","evaluate","env","clone","UnknownIdentifier","evaluate_repeat_header","repeat_eval","v","repeat_count","ValueError","ArgumentError","evaluate_arg_list","invo","vals","lookup_procedure","create_env_for_procedure","procedure","arity","ArityMismatch","new_env","cloneDeep","zip","decrement_repeat","count","IncrementalSimulator","world","base_env","sim_state","execution_stack","TICKS_PER_SECOND","ticks_per_command","last_stmt_exec_time","total_steps","Stopped","baseline_environment","s","Running","Finished","is_running","execute_to_command","exec","command","execute","set_finished","RecursiveSimulator","block_result","execute_block_to_end","execute_to_end","base_environment","load_stdlib","ast","extract_definitions","mapHasVector3","map","vec","equals","UP","THREE","DOWN","GoalInfoType","GoalType","WorldState","dragon_pos","dragon_dir","cube_map","dirty","add","z","y","color_id","CustomError","extract_single_int_arg","delete","mapDeleteVector3","mark_dirty","temp","ws","IMG_FILE_MAP","make_world_from_spec","spec","dir","cubes","Animation","PuzzleState","start_code","start_world","goals","instructions","required","granted","tag","win_callback","gamestate","is_complete","simulator","is_finished","posRequired","goal","RunOnly","MinCube","minRequired","size","AddCube","RemoveCube","DragonPos","dragonPosRequired","filename","state","fetchProgram","Promise","resolve","reject","fetch","then","response","catch","fetchSolution","Solution","solution","run_program_to_end","run","cubePos","make_goals_from_world","goalValue","json","replace","substring","SANDBOX_STATE","Slider","className","min","max","step","onChange","CameraZoomIn","onClick","onClickFunction","icon","CameraZoomOut","CameraTiltUp","CameraTiltDown","CameraRotateRight","CameraRotateLeft","Display","divRef","constantValues","storageMaps","mainStuff","cameraPos","clockStuff","geometries","dragAnimation","finalValues","cubeOptMaps","goalOptMaps","puzzleInit","handleSlideChange","e","animPerSec","parseFloat","target","zoomInCamera","relativeCamPosMag","relativeCamPos","multiplyScalar","zoomOutCamera","rotateCameraRight","q","setFromAxisAngle","upVector","degreesToRadians","applyQuaternion","rotateCameraLeft","tiltCameraUp","cross","normalize","tiltCameraDown","WOBBLE_PERIOD","WOBBLE_MAGNITUDE","TRANSLATION_SMOOTHNESS","ROTATION_SMOOTHNESS","MAX_ANIMATION_TIME","MIN_ANIMATION_TIME","loader","cubeColors","goalCubes","cubeMats","dragonOffset","cubeOffset","scene","camera","window","innerWidth","innerHeight","oldCamQ","antialias","setSize","copy","lookAt","aspect","updateProjectionMatrix","clock","time","finalDragPos","finalDragQ","cubeGeo","goalGeo","cubeGoalMat","transparent","opacity","dragonGoalMat","goalShadow","side","light","planeGeometry","planeMaterial","plane","dragonGeometry","dragon","dragonNose","geometry","zCuePlane","animStatus","null","waitTime","animTime","available","filled","cubeTexture","load","getHexString","planeTexture","wrapS","wrapT","setValues","path","format","backgroundTexture","cubeLoader","background","createRef","zOffset","floor","translateZ","deg","PI","cube","cubePosition","material","existingCube","newCube","index","splice","delta","check_completed","setFromUnitVectors","waiting","animating","removeDragonCube","removePuzzleCube","removeCube","addPuzzleCube","addDragonCube","colorInd","addCube","mark_clean","current","appendChild","domElement","animate","requestAnimationFrame","tDelta","getDelta","simulate","updateDisplay","positionZCue","sin","elapsedTime","cos","lerp","quaternion","slerp","done","newCamPos","newCamQ","render","ref","Run","reset","col","title","InstructionsGoal","dangerouslySetInnerHTML","__html","PuzzleManager","packs","current_puzzle","completed_puzzle","pack_index","seq_index","puz_index","current_sequence","get_current_seq","puzzles","current_pack","get_current_pack","puzzlePackName","get_current_puzzle","puzzleToAdd","completed_puzzle_array","Array","keys","cp","found","seqs","seq","j","ps","devMode","concat","pack_list","pack_promises","packfile","promises","all","load_packs","load_all_puzzles","fab","faSearchMinus","faSearchPlus","faRedo","faUndo","faArrowUp","faArrowDown","ViewType","PuzzleSelect","event","gameState","onClickHome","loadLastSandbox","onClickToPuzzle","currentTarget","returnHome","String","completed_puzzles","openPuzzle","App","puzzle_manager","lastSavedWorld","view","Loading","load_last_progress","set_pack","setState","Normal","load_puzzle","progress","localStorage","setItem","removeItem","progress_string","getItem","set_completed_puzzle","puzzle_file","make_from_file","win_puzzle","sim","set_puzzle","get_granted_blocks","load_last_sandbox","complete_puzzle","check_complete_pack","SequencePause","PuzzlePause","save_progress","initialize","set_running","save_sandbox","next_puzzle","load_sandbox","find_completed_puzzle","puzzle_tag","LearnMore","learn_more","process","continue","run_program","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.ff041c65.chunk.js","sourcesContent":["/* FILENAME:    Parser.ts\n * DESCRIPTION: \n *      This file takes in raw text, puts it through the lexer and creates a list of tokens.\n *      The list of tokens is put into the parser which creates a program.\n * DATE:    08/19/2021\n * AUTHOR:      Aaron Bauer    Teagan Johnson    Katrina Li\n */\n\nimport _ from 'lodash';\n\n// TODO split lexer and parser into separate files\n\n// @ and = for specifying program-wide attributes as key-value pairs\nconst SYMBOLS = ['(', ')', ',', '@', '='];\n\n// only pass, repeat, times, command, and define currently interpreted\n// but reserving various other keywords for future development\nconst KEYWORDS = [\"define\", \"function\",\n    \"set\", \"var\", \"let\", \"mutable\", \"to\", \"in\",\n    \"if\", \"elif\", \"else\", \"end\", \"then\",\n    \"repeat\", \"times\", \"pass\",\n    \"choice\", \"match\", \"case\", \"of\",\n    \"and\", \"or\", \"null\", \"true\", \"false\",\n    \"command\", \"query\"];\n\ntype Position = {\n    line: number\n    column: number\n}\n\nexport class FileLocation {\n    start: Position\n    end: Position\n\n    constructor(start = { line: 0, column: 0 }, end = { line: 0, column: 0 }) {\n        this.start = start;\n        this.end = end;\n    }\n}\n\nenum WhitespaceType {\n    Indent = 'indent',\n    Dedent = 'dedent',\n    Newline = 'newline',\n}\n\nenum TokenType {\n    Whitespace = 'whitespace',\n    Symbol = 'symbol',\n    Keyword = 'keyword',\n    Ident = 'ident',\n    IntLiteral = 'int',\n}\n\ntype Token = {\n    kind: TokenType\n    value: string | number | Ident // whitespace characters will have \"\" as their value\n    location: FileLocation\n    whitespace?: WhitespaceType\n}\n\nfunction token_equal(a: Token, b: Token) {\n    // isEqual needed for the values because they can be objects\n    return a.kind === b.kind && _.isEqual(a.value, b.value) && a.whitespace === b.whitespace;\n}\n\nfunction is_space(c: string) {\n    return c !== undefined && c.length === 1 && (c === '\\t' || c === '\\r' || c === ' ')\n}\n\nfunction is_indent(c: string) {\n    return c !== undefined && c.length === 1 && (c === '\\t' || c === ' ')\n}\n\nfunction is_alpha(c: string) {\n    return c !== undefined && /^[A-Z]$/i.test(c);\n}\n\nfunction is_digit(c: string) {\n    return c !== undefined && /^[0-9]$/.test(c);\n}\n\nenum SyntaxErrorCode {\n    UnexpectedEOF,\n    InvalidCharacter,\n    InvalidIndentation,\n    UnexpectedToken,\n    InvalidExpression,\n    InvalidStatement,\n}\n\nexport class SyntaxError extends Error {\n    code: SyntaxErrorCode;\n    location: FileLocation;\n\n    constructor(code: SyntaxErrorCode, location: FileLocation, msg: string) {\n        super(msg);\n        // necessary according to https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, SyntaxError.prototype);\n        this.code = code;\n        this.location = location;\n\n    }\n}\n\nexport type Meta = {\n    location: FileLocation\n    attributes: Map<string, string>\n};\n\nexport type Invocation = {\n    name: string\n    args: Expression[]\n};\n\n// have a separate Ident type to differentiate it from a keyword\nexport type Ident = {\n    name: string\n};\n\nexport enum ExpressionType {\n    Number = \"number\",\n    Ident = \"ident\"\n};\n\nexport type Expression = {\n    kind: ExpressionType,\n    meta: Meta,\n    expression: number | Ident,\n};\n\nexport type Command = {\n    invoke: Invocation\n};\n\nexport type Execute = {\n    invoke: Invocation\n};\n\nexport type Repeat = {\n    number: Expression\n    body: Statement[]\n};\n\nexport enum StatementType {\n    Repeat = \"repeat\",\n    Execute = \"execute\",\n    Command = \"command\"\n};\n\nexport type Statement = {\n    kind: StatementType\n    meta: Meta,\n    stmt: Repeat | Execute | Command,\n};\n\nexport type Procedure = {\n    kind: string // will be \"procedure\"\n    meta: Meta\n    name: string\n    params: string[]\n    body: Statement[]\n};\n\nexport type TopLevelStatement = Procedure | Statement;\n\nexport type Program = {\n    body: TopLevelStatement[]\n};\n\nexport class Lexer {\n    source: string;\n    position = 0;\n    indent_stack: number[] = [0];\n    next_line: number = 0;\n    next_column: number = 0;\n\n    constructor(program: string) {\n        this.source = program;\n    }\n\n    error(code: SyntaxErrorCode, msg: string) {\n        const pos = this.next_position();\n        return new SyntaxError(code, { start: pos, end: pos }, msg);\n    }\n\n    token(tok: TokenType, value: string | number | Ident,\n        start: Position, whitespace?: WhitespaceType): Token {\n        let end = this.next_position();\n        let loc = { start: start, end: end };\n        let t: Token = { kind: tok, value: value, location: loc }\n        if (tok === TokenType.Whitespace) {\n            t.whitespace = whitespace;\n        }\n        return t;\n    }\n\n    last_indent() {\n        return _.last(this.indent_stack);\n    }\n\n    next_position() {\n        return {\n            line: this.next_line,\n            column: this.next_column\n        }\n    }\n\n    advance() {\n        if (this.position < this.source.length) {\n            return this.source[this.position++];\n        }\n        return this.error(SyntaxErrorCode.UnexpectedEOF, \"Unexpected end of file\");\n    }\n\n    peek_char() {\n        if (this.position < this.source.length) {\n            return this.source[this.position];\n        }\n        return this.error(SyntaxErrorCode.UnexpectedEOF, \"Unexpected end of file\");\n    }\n\n    is_eof() {\n        return this.position >= this.source.length;\n    }\n\n    next_char() {\n        const c = this.advance();\n        if (c instanceof SyntaxError) {\n            return c;\n        }\n        switch (c) {\n            case '\\n':\n                this.next_line += 1;\n                this.next_column = 0;\n                break;\n            default:\n                // could check for control characters here\n                this.next_column += 1;\n        }\n        return c;\n    }\n\n    /// consumes characters while the predicate do_take_next is true\n    /// returns the resulting string\n    build_string(start: string, do_take_next: (c: string) => boolean) {\n        let c = this.peek_char();\n        while (!(c instanceof SyntaxError) && do_take_next(c)) {\n            start += this.next_char();\n            c = this.peek_char();\n        }\n        return start;\n    }\n\n    /// processes and returns next Token\n    lex_token(): Token | SyntaxError {\n        let start = this.next_position();\n        const c = this.next_char();\n        if (c instanceof SyntaxError) {\n            return c;\n        }\n        // identifiers start with alphabetic character or underscore\n        // primary motivation for allowing underscores is to be able to add them\n        // to user-defined procedure names to avoid collisions with stdlib\n        if (is_alpha(c) || c === '_') {\n            // can contain alphabetic, digits, and underscores\n            const string = this.build_string(c, (x: string) => is_alpha(x) || is_digit(x) || x === '_');\n            if (KEYWORDS.includes(string)) {\n                return this.token(TokenType.Keyword, string, start);\n            }\n            return this.token(TokenType.Ident, { name: string }, start);\n        } else if (is_digit(c)) {\n            const string = this.build_string(c, (x: string) => is_digit(x));\n            return this.token(TokenType.IntLiteral, parseInt(string), start);\n        } else if (SYMBOLS.includes(c)) {\n            return this.token(TokenType.Symbol, c, start);\n        }\n        return this.error(SyntaxErrorCode.InvalidCharacter,\n            `Invalid character '${c}'`)\n    }\n\n    /// skips any whitespace tokens, returning the number of indentation tokens skipped\n    skip_whitespace() {\n        let indent = 0;\n        let c = this.peek_char();\n        while (!(c instanceof SyntaxError) && is_space(c)) {\n            if (is_indent(c)) { indent += 1; }\n            this.next_char(); // consume whitespace character\n            c = this.peek_char();\n\n        }\n        return indent;\n    }\n\n    /// advances past any comment and/or newline if it exists,\n    /// returning true if the next char was a comment/newline/eof.\n    skip_comment() {\n        let next = this.peek_char();\n        if (this.is_eof() || next === '#' || next === '\\n') {\n            while (!this.is_eof() && this.peek_char() !== '\\n') {\n                this.next_char();\n            }\n            // skip the newline\n            if (!this.is_eof()) {\n                this.next_char();\n            }\n            return true\n        }\n        return false;\n    }\n\n    /// process the next line of the source, append tokens to out\n    lex_line(out: Token[]): void | SyntaxError {\n        let start = this.next_position();\n        let indent = this.skip_whitespace();\n\n        // only emit any indent/dedent if there is at least one token on the line\n        if (!this.skip_comment()) {\n            if (indent > this.last_indent()!) {\n                this.indent_stack.push(indent);\n                out.push(this.token(TokenType.Whitespace, \"\",\n                    start, WhitespaceType.Indent));\n            } else {\n                while (indent < this.last_indent()!) {\n                    out.push(this.token(TokenType.Whitespace, \"\",\n                        start, WhitespaceType.Dedent));\n                    this.indent_stack.pop();\n                }\n\n                // make sure we popped to an existing dedent level and not some spot in between\n                if (indent !== this.last_indent()) {\n                    return this.error(SyntaxErrorCode.InvalidIndentation, \"Invalid indentation level\");\n                }\n            }\n\n            // then lex all the tokens on the line until newline/comment\n            while (!this.skip_comment()) {\n                let t = this.lex_token();\n                if (t instanceof SyntaxError) {\n                    return t;\n                }\n                out.push(t);\n                this.skip_whitespace();\n            }\n            // always emit a newline token, even if we hit EOF\n            out.push(this.token(TokenType.Whitespace, \"\",\n                start, WhitespaceType.Newline));\n        }\n    }\n\n    lex_all(): Token[] | SyntaxError {\n        const tokens: Token[] = [];\n        while (!this.is_eof()) {\n            const result = this.lex_line(tokens)\n            if (result instanceof SyntaxError) {\n                return result;\n            }\n        }\n        for (let i = 1; i < this.indent_stack.length; i++) {\n            tokens.push(this.token(TokenType.Whitespace, \"\",\n                this.next_position(), WhitespaceType.Dedent));\n        }\n        return tokens;\n    }\n}\n\nexport class Parser {\n    tokens: Token[]\n    last_location: FileLocation\n\n    constructor(tokens: Token[]) {\n        this.tokens = _.reverse(tokens);\n        this.last_location = new FileLocation();\n    }\n\n    error(code: SyntaxErrorCode, msg: string) {\n        return new SyntaxError(code, this.last_location, msg);\n    }\n\n    make_check_token(tok: TokenType, value: string | number | Ident) {\n        let t: Token = { kind: tok, value: value, location: new FileLocation() }\n        return t;\n    }\n\n    make_ws_token(type: WhitespaceType) {\n        return {\n            kind: TokenType.Whitespace, value: \"\",\n            location: new FileLocation(), whitespace: type\n        };\n    }\n\n    next_location() {\n        if (this.tokens.length > 0) {\n            return _.last(this.tokens)!.location;\n        }\n        return new FileLocation();\n    }\n\n    next() {\n        const t = this.tokens.pop();\n        if (t !== undefined) {\n            this.last_location = t.location;\n            return t;\n        }\n        return this.error(SyntaxErrorCode.UnexpectedEOF, \"Unexpected end of file\");\n    }\n\n    match_token(expected: Token): SyntaxError | void {\n        const token = this.next();\n        if (token instanceof SyntaxError) {\n            return token;\n        }\n        if (!token_equal(token, expected)) {\n            return this.error(SyntaxErrorCode.UnexpectedToken,\n                `Expected token ${JSON.stringify(expected)}, found ${token.kind}`);\n        }\n    }\n\n    peek_token(expected: Token) {\n        const last = _.last(this.tokens);\n        return last !== undefined && token_equal(last, expected);\n    }\n\n    new_meta(start: FileLocation, attributes?: Map<string, string>): Meta {\n        const loc = new FileLocation(start.start, this.last_location.end);\n        return { location: loc, attributes: attributes ? attributes : new Map()};\n    }\n\n    match_ident(): string | SyntaxError {\n        const token = this.next();\n        if (token instanceof SyntaxError) {\n            return token;\n        }\n        if (token.kind === TokenType.Ident) {\n            return (token.value as Ident).name;\n        }\n        return this.error(SyntaxErrorCode.UnexpectedToken,\n            `Expected identifier, found ${token.kind}`);\n    }\n\n    match_expression(): Expression | SyntaxError {\n        const start = this.next_location();\n        const token = this.next();\n        if (token instanceof SyntaxError) {\n            return token;\n        }\n        let expr_type: ExpressionType;\n        let expr: number | Ident;\n        switch (token.kind) {\n            case TokenType.IntLiteral:\n                expr = token.value as number;\n                expr_type = ExpressionType.Number;\n                break;\n            case TokenType.Ident:\n                expr = token.value as Ident;\n                expr_type = ExpressionType.Ident;\n                break;\n            default:\n                return this.error(SyntaxErrorCode.InvalidExpression,\n                    \"Expected an expression which must start with an identifier or a literal\");\n        }\n        return { kind: expr_type, meta: this.new_meta(start), expression: expr }\n    }\n\n    match_paren_list<T>(matchfn: () => T | SyntaxError): T[] | SyntaxError {\n        let sep = this.match_token(this.make_check_token(TokenType.Symbol, '('));\n        if (sep instanceof SyntaxError) {\n            return sep;\n        }\n        let entries: T[] = [];\n        while (!this.peek_token(this.make_check_token(TokenType.Symbol, ')'))) {\n            let match = matchfn();\n            if (match instanceof SyntaxError) {\n                return match;\n            }\n            entries.push(match);\n            if (!this.peek_token(this.make_check_token(TokenType.Symbol, ','))) {\n                break;\n            }\n            sep = this.match_token(this.make_check_token(TokenType.Symbol, ','));\n            if (sep instanceof SyntaxError) {\n                return sep;\n            }\n        }\n        sep = this.match_token(this.make_check_token(TokenType.Symbol, ')'));\n        if (sep instanceof SyntaxError) {\n            return sep;\n        }\n        return entries;\n    }\n\n    match_invocation(name?: string): Invocation | SyntaxError {\n        if (name === undefined) {\n            const match = this.match_ident();\n            if (match instanceof SyntaxError) {\n                return match;\n            }\n            name = match;\n        }\n        const args = this.match_paren_list(this.match_expression.bind(this));\n        if (args instanceof SyntaxError) {\n            return args;\n        }\n\n        // language doesn't allow anything after a function call, so a newline must be here\n        const match = this.match_token(this.make_ws_token(WhitespaceType.Newline));\n        if (match instanceof SyntaxError) {\n            return match;\n        }\n\n        return { name: name, args: args };\n    }\n\n    match_attributes(): Map<string, string> | SyntaxError {\n        let attribs = new Map<string, string>();\n        while (this.peek_token(this.make_check_token(TokenType.Symbol, '@'))) {\n            let next = this.next();\n            if (next instanceof SyntaxError) {\n                return next;\n            }\n            let key = this.match_ident();\n            if (key instanceof SyntaxError) {\n                return key;\n            }\n            let eq = this.match_token(this.make_check_token(TokenType.Symbol, '='));\n            if (eq instanceof SyntaxError) {\n                return eq;\n            }\n            let val = this.match_ident();\n            if (val instanceof SyntaxError) {\n                return val;\n            }\n            let n = this.match_token(this.make_ws_token(WhitespaceType.Newline));\n            if (n instanceof SyntaxError) {\n                return n;\n            }\n            attribs.set(key, val);\n        }\n        return attribs;\n    }\n\n    match_statement(attributes?: Map<string, string>): Statement | null | SyntaxError {\n        const start = this.next_location();\n        const next = this.next();\n        if (next instanceof SyntaxError) {\n            return next;\n        }\n        const meta = this.new_meta(start, attributes);\n        switch (next.kind) {\n            case TokenType.Keyword:\n                switch (next.value) {\n                    case \"pass\":\n                        // pass must be immediately followed by a newline\n                        const match = this.match_token(this.make_ws_token(WhitespaceType.Newline));\n                        if (match instanceof SyntaxError) {\n                            return match;\n                        }\n                        return null;\n                    case \"repeat\": // statement is a repeat\n                        const repeat = this.match_repeat();\n                        if (repeat instanceof SyntaxError) {\n                            return repeat;\n                        }\n                        return { kind: StatementType.Repeat, meta: meta, stmt: repeat };\n                    case \"command\": // statement is calling built-in command\n                        const invoke = this.match_invocation();\n                        if (invoke instanceof SyntaxError) {\n                            return invoke;\n                        }\n                        return { kind: StatementType.Command, meta: meta, stmt: { invoke: invoke } }\n                    default:\n                        return this.error(SyntaxErrorCode.InvalidStatement, `Keyword ${next.value} not recognized`);\n                }\n            case TokenType.Ident: // statement is calling a user-defined function (Execute)\n                const invoke = this.match_invocation((next.value as Ident).name);\n                if (invoke instanceof SyntaxError) {\n                    return invoke;\n                }\n                return { kind: StatementType.Execute, meta: meta, stmt: { invoke: invoke } }\n            default:\n                return this.error(SyntaxErrorCode.InvalidStatement, \"Expected a statement, which must start with if, repeat, command, or an identifier\");\n        }\n    }\n\n    match_block(): Statement[] | SyntaxError {\n        // must start with a new line and an indent\n        let match = this.match_token(this.make_ws_token(WhitespaceType.Newline));\n        if (match instanceof SyntaxError) {\n            return match;\n        }\n        match = this.match_token(this.make_ws_token(WhitespaceType.Indent));\n        if (match instanceof SyntaxError) {\n            return match;\n        }\n\n        const body: Statement[] = [];\n        while (!this.peek_token(this.make_ws_token(WhitespaceType.Dedent))) {\n            let stmt = this.match_statement();\n            if (stmt instanceof SyntaxError) {\n                return stmt;\n            }\n            if (stmt === null) {\n                break;\n            }\n            body.push(stmt);\n        }\n\n        // read the dedent\n        const dedent = this.next();\n        if (dedent instanceof SyntaxError) {\n            return dedent;\n        }\n        return body;\n    }\n\n    match_repeat(): Repeat | SyntaxError {\n        const number = this.match_expression();\n        if (number instanceof SyntaxError) {\n            return number;\n        }\n        const token = this.match_token(this.make_check_token(TokenType.Keyword, \"times\"));\n        if (token instanceof SyntaxError) {\n            return token;\n        }\n        const body = this.match_block();\n        if (body instanceof SyntaxError) {\n            return body;\n        }\n        return { number: number, body: body };\n    }\n\n    match_procedure(attributes: Map<string, string>): Procedure | SyntaxError {\n        const start = this.next_location();\n        const def = this.match_token(this.make_check_token(TokenType.Keyword, \"define\"));\n        if (def instanceof SyntaxError) {\n            return def;\n        }\n        const name = this.match_ident();\n        if (name instanceof SyntaxError) {\n            return name;\n        }\n        const params = this.match_paren_list(this.match_ident.bind(this));\n        if (params instanceof SyntaxError) {\n            return params;\n        }\n        const body = this.match_block();\n        if (body instanceof SyntaxError) {\n            return body;\n        }\n        return {\n            kind: \"procedure\",\n            meta: this.new_meta(start, attributes),\n            name: name,\n            params: params,\n            body: body\n        }\n    }\n\n    match_top_level_statement(): TopLevelStatement | SyntaxError | null {\n        let attributes = this.match_attributes();\n        if (attributes instanceof SyntaxError) {\n            return attributes;\n        }\n        if (this.peek_token(this.make_check_token(TokenType.Keyword, \"define\"))) {\n            return this.match_procedure(attributes);\n        } else {\n            const stmt = this.match_statement(attributes);\n            if (stmt instanceof SyntaxError) {\n                if (stmt.code === SyntaxErrorCode.InvalidStatement) {\n                    // overwrite the statement message with a better one for top-level statements\n                    return new SyntaxError(stmt.code, stmt.location, \"Expected a top-level statement, which must start with define, if, repeat, command, or an identifier\");\n                } else {\n                    return stmt;\n                }\n            }\n            return stmt;\n        }\n    }\n\n    match_program(): Program | SyntaxError {\n        const body: TopLevelStatement[] = [];\n        while (this.tokens.length > 0) {\n            let stmt = this.match_top_level_statement();\n            if (stmt instanceof SyntaxError) {\n                return stmt;\n            }\n            if (stmt !== null) {\n                body.push(stmt);\n            }\n        }\n        return { body: body };\n    }\n}\n\nexport const EMPTY_PROGRAM = {\n    body: []\n}\n\nexport default function parse(program: string): Program | SyntaxError {\n    const lexer = new Lexer(program);\n    const tokens = lexer.lex_all();\n    if (tokens instanceof SyntaxError) {\n        console.error(`[SyntaxError] ${tokens}`);\n        return tokens;\n    }\n    const parser = new Parser(tokens);\n    return parser.match_program();\n}\n","/* FILENAME:    BlocklyExtensions.ts\n * DESCRIPTION: \n *      This file defines and customizes the block interface that would be used in blocklycomps\n * DATE:    08/19/2021\n * AUTHOR:      Aaron Bauer\n */\nimport * as Blockly from 'blockly/core';\n\ndeclare module \"blockly\" {\n    interface Block {\n        getNested(): Blockly.Block[]\n        frozen: boolean\n        freeze(doFreezeArgs: boolean): void\n    }\n\n    interface ProcedureBlock extends Block {\n        /**\n         * Return the signature of this procedure definition.\n         * @return {!Array} Tuple containing three elements:\n         *     - (string) the name of the defined procedure,\n         *     - (Array) a list of all its arguments,\n         *     - (boolean) that it DOES have a return value.\n         * @this {Blockly.Block}\n         */\n        getProcedureDef(): [string, string[], boolean]\n    }\n}\n\nBlockly.Block.prototype.getNested = function () {\n    let blocks = [];\n    for (let i = 0, input; (input = this.inputList[i]); i++) {\n        if (input.connection) {\n            let child = input.connection.targetBlock();\n            if (child) {\n                blocks.push(child);\n            }\n        }\n    }\n    return blocks;\n};\n\n/**\n * Makes a block unmoveable, undeletetable, and disables its context menu\n * May make any fields on the block uneditable\n */\nBlockly.Block.prototype.freeze = function (doFreezeArgs: boolean) {\n    this.frozen = true;\n\n    this.setMovable(false);\n    this.setDeletable(false);\n    this.contextMenu = false;\n    if (doFreezeArgs) {\n        this.setEditable(false);\n    }\n\n    // check for inline input that needs to be frozen\n    if (this.inputsInline) {\n        var inputs = this.inputList.filter(function (input) { return input.type === Blockly.INPUT_VALUE; });\n        inputs.forEach(function (input) { input.connection.targetBlock().freeze(doFreezeArgs); });\n    }\n};\n","/* FILENAME:    BlocklyComp.tsx\n * DESCRIPTION: \n *      This file defines and generates all the blocks the user can use, and also creates and keeps\n *      track of the workspace and toolbox of the blocks.\n * DATE:    08/19/2021\n * AUTHOR:      Aaron Bauer    Katrina Li    Teagan Johnson\n */\nimport Blockly, { mainWorkspace } from 'blockly'; //newly added mainWorkspace\nimport React from 'react';\nimport _ from 'lodash';\nimport parse, {\n    ExpressionType,\n    SyntaxError, Statement, StatementType, Repeat, Execute, Command, TopLevelStatement\n} from './Parser';\nimport { GameState } from './App';\nimport { SANDBOX_STATE } from './PuzzleState';\nimport './BlocklyExtensions';\n\n//colors for blocks\nconst COLOR_MOVE_1 = '#0075A6';\nconst COLOR_MOVE_2 = '#B84B26';\nconst COLOR_BLOCK = '#978B63';\nconst skip_blocks = [\"math_number\"];\n\nconst KoboldConvert = new Map<string, (block: Blockly.Block) => string>();\n\n/* breakStmt(), breakStmtRep() and breakStmtRepNum() are \n * little helper functions for the recursive xmlHelper() function.\n * breakStmt() returns an Invocation (a block) based on different StatementTypes that the input statement has.\n * breakStmtRep() returns the inner statements for a repeat statement.\n * breakStmtRepNum() returns the number of iterations a repeat statement intends to have.\n */\nexport function breakStmt(stmt: Statement) {\n    switch (stmt.kind) {\n        case StatementType.Command:\n            let command = stmt.stmt as Command;\n            return command.invoke;\n\n        case StatementType.Execute:\n            let exec = stmt.stmt as Execute;\n            return exec.invoke;\n\n        default:\n            return null;\n    }\n}\nexport function breakStmtRep(stmt: Statement) {\n    let rep = stmt.stmt as Repeat;\n    return rep.body;\n}\nexport function breakStmtRepNum(stmt: Statement) {\n    let rep = stmt.stmt as Repeat;\n    return rep.number.expression;\n}\n\n\n// a recursive function that turns parsed code strings to an xml string\nexport function xmlHelper(program: TopLevelStatement[] | Statement[], xml: string) {\n\n    if (program.length === 0) {\n        return \"\";\n    }\n\n    switch (program[0].kind) {\n        case \"procedure\": //block is a procedure\n            let xmlPro = \"\";\n            let pro = program[0].body;\n            xmlPro = xmlHelper(pro, xmlPro);\n            xmlPro = '<block type = \"procedures_defnoreturn\"><field name=\"NAME\">' + program[0].name +\n                '</field><statement name=\"STACK\">' + xmlPro;\n            xmlPro += '</statement></block>';\n            xml = xml + xmlPro;\n            break;\n\n        default: // block is a statement (repeat, execute or command)\n            let block = breakStmt(program[0] as Statement);\n            if (block) {\n                if (block.name === \"Left\" || block.name === \"Right\" || block.name === 'RemoveCube') {\n                    if (program.length === 1) {\n                        return '<block type=\"' + block.name + '\"></block>';\n                    }\n                    xml = '<block type=\"' + block.name + '\"><next>' + xmlHelper(program.slice(1), \"\") + '</next></block>';\n                \n                } else if (block.name === 'PlaceCube') {\n                    let expr = block.args;\n                    let color = 0;\n                    if (expr[0].kind === ExpressionType.Number) {\n                        color = expr[0].expression as number;\n                    }\n                    if (program.length === 1) {\n                        return '<block type=\"' + block.name + '\"><field name=\"VALUE\">' + Blockly.FieldColour.COLOURS[color] + '</field></block>';\n                    }\n                    xml = '<block type=\"' + block.name + '\"><field name=\"VALUE\">' + Blockly.FieldColour.COLOURS[color] + '</field><next>' +\n                        xmlHelper(program.slice(1), \"\") + '</next></block>';\n                \n                } else { // forward, up, or down blocks\n                    let expr = block.args;\n                    if (expr[0].kind === ExpressionType.Number) {\n                        if (program.length === 1) {\n                            return '<block type=\"' + block.name + '\"><value name=\"VALUE\">' + makeShadowNum(expr[0].expression as number) +\n                                '</value></block>';\n                        }\n                        xml = '<block type=\"' + block.name + '\"><value name=\"VALUE\">' + makeShadowNum(expr[0].expression as number) +\n                            '</value><next>' + xmlHelper(program.slice(1), \"\") + '</next></block>';\n                    }\n                }\n            \n            } else { //block is a repeat\n                let xmlRep = \"\";\n                let rep = breakStmtRep(program[0] as Statement);\n                xmlRep = xmlHelper(rep, xmlRep);\n\n                xmlRep = '<block type=\"controls_repeat_ext\"><value name=\"TIMES\"><shadow type=\"math_number\"><field name=\"NUM\">'\n                    + breakStmtRepNum(program[0] as Statement) + '</field></shadow></value><statement name=\"DO\">' + xmlRep;\n                xmlRep += '</statement>';\n                if (program.length > 1) {\n                    xml = xml + xmlRep + '<next>' + xmlHelper(program.slice(1), \"\") + '</next></block>';\n                } else {\n                    xml = xml + xmlRep + '</block>';\n                }\n\n            }\n\n    }\n    return xml;\n}\n\n// convert text code to blocks in workspace. Used for kobold files and reloading the user's sandbox\nexport function text_to_blocks(code: string) {\n    // console.log(\"processing string: \" + code);\n    let xml = '<xml>';\n    let program = parse(code);\n    if (program instanceof SyntaxError) {\n        console.error(`Syntax Error: ${program}`);\n    } else {\n        xml += xmlHelper(program.body, \"\");\n        xml += '</xml>';\n        let dom = Blockly.Xml.textToDom(xml);\n        Blockly.getMainWorkspace().clear();\n        Blockly.Xml.domToWorkspace(dom, mainWorkspace);\n        //(program.body[0].meta.attributes.get(\"frozen\"));\n        if (code === ''){\n            return;\n        }\n        if (program.body[0].meta.attributes.get(\"frozen\") === \"all\") {\n            freeze_all_blocks(program.body[0].meta.attributes.has(\"freezeArgs\"));\n        }\n    }\n}\n\n// print a single block. The parameter indent is set up for the purpose of recursion.\nfunction print_block(indent: string, block: Blockly.Block) {\n    let convert_fn = KoboldConvert.get(block.type);\n    if (convert_fn) {\n        console.log(indent + convert_fn(block));\n    }\n    let children = block.getNested();\n    if (children.length > 0) {\n        // console.log(indent + `children:`);\n        _.forEach(children, _.partial(print_block, indent + \"\\t\"));\n    }\n    if (block.getNextBlock()) {\n        print_block(indent, block.getNextBlock());\n    }\n}\n\n// print all the blocks in workspace\nexport function print_blocks() {\n    let top = Blockly.getMainWorkspace().getTopBlocks(true);\n    _.forEach(top, (block) => {\n        //console.log(\"top\");\n        print_block(\"\", block);\n    });\n}\n\n// convert a block in workspace to code text. The parameter str and indent are set up for the purpose of recursion.\nexport function block_to_text(str: string, indent: string, block: Blockly.Block): string {\n    let convert_fn = KoboldConvert.get(block.type);\n    let children = block.getNested();\n    if (convert_fn) {\n        str += indent + convert_fn(block) + \"\\n\";\n    } else if (!KoboldConvert.has(block.type) && !skip_blocks.includes(block.type)) {\n        console.error(`No KoboldConvert function found for ${block.type}`);\n    }\n    if (children.length > 0) {\n        for (let child of children) {\n            str = block_to_text(str, (indent + \"\\t\"), child);\n        }\n    }\n    if (block.getNextBlock() && convert_fn) {\n        str = block_to_text(str, indent, block.getNextBlock());\n    }\n    return str;\n}\n\n// convert all the blocks in workspace to code text.\nexport function blocks_to_text(): string {\n    let text = \"\";\n    let top = Blockly.getMainWorkspace().getTopBlocks(true);\n    _.forEach(top, (block) => {\n        text += (block_to_text(\"\", \"\", block) + \"\\n\");\n    });\n    return text;\n}\n\n// return a new hex color string that lightens (positive) or darkens (negative) the \n// original color by `percent` (`percent` should be between 0 and 1)\n// from: https://github.com/PimpTrizkit/PJs/wiki/12.-Shade,-Blend-and-Convert-a-Web-Color-(pSBC.js)#stackoverflow-archive-begin\nfunction shade_hex_color(color: string, percent: number) {\n    var f = parseInt(color.slice(1), 16), t = percent < 0 ? 0 : 255, p = percent < 0 ? percent * -1 : percent, R = f >> 16, G = (f >> 8) & 0x00FF, B = f & 0x0000FF;\n    return \"#\" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);\n}\n\n// a recursive function that freezes a stack of blocks\nfunction freeze_stack(block: Blockly.Block, freeze_args: boolean) {\n    block.setMovable(false);\n    block.setDeletable(false);\n    block.setColour(shade_hex_color(block.getColour(), -0.5));\n    if (freeze_args) {\n        block.setEditable(false);\n    }\n    if (block.getNextBlock()) {\n        freeze_stack(block.getNextBlock(), freeze_args);\n    }\n}\n\n// a recursive functino that freezes blocks of all stacks\nfunction freeze_all_blocks(freeze_args: boolean) {\n    let top = Blockly.getMainWorkspace().getTopBlocks(true);\n    _.forEach(top, block => freeze_stack(block, freeze_args));\n}\n\n// returns a string of shadow type and field element (in an xml string) of an inner number block\n// based on the number and id of the number block\nfunction makeShadowNum(num: number, id?: string) {\n    if (id) {\n        return '<shadow type=\"math_number\" id=\"' + id + '\"><field name=\"NUM\">' + num + '</field></shadow>';\n    }\n    return '<shadow type=\"math_number\"><field name=\"NUM\">' + num + '</field></shadow>';\n};\n\n\nconst COMMANDS = {\n    move2: { block: '<block type=\"Forward\"><value name=\"VALUE\">' + makeShadowNum(1) + '</value></block><block type=\"Left\"></block><block type=\"Right\"></block>' },\n    //set: { block: '<block type=\"Set\"><value name=\"VALUE\">' + makeShadowNum(1) + '</value></block>' },\n    place: { block: '<block type=\"PlaceCube\"></block>' },\n    remove: { block: '<block type=\"RemoveCube\"></block>', teaser: '<block type=\"RemoveCube_teaser\"></block>', pack: 'remove' },\n    up: { block: '<block type=\"Up\"><value name=\"VALUE\">' + makeShadowNum(1) + '</value></block>', teaser: '<block type=\"Up_teaser\"><value name=\"VALUE\">' + makeShadowNum(1) + '</value></block>', pack: 'up' },\n    down: { block: '<block type=\"Down\"><value name=\"VALUE\">' + makeShadowNum(1) + '</value></block>', teaser: '<block type=\"Down_teaser\"><value name=\"VALUE\">' + makeShadowNum(1) + '</value></block>', pack: 'up' },\n    repeat: {\n        block: '<block type=\"controls_repeat_ext\"><value name=\"TIMES\">' + makeShadowNum(10) + '</value></block>',\n        teaser: '<block type=\"controls_repeat_teaser\"><value name=\"TIMES\">' + makeShadowNum(10) + '</value></block>', pack: 'repeat'\n    },\n    // counting_loop: {\n    //     block: '<block type=\"controls_for\"><value name=\"COUNTER\"><block type=\"variables_get\" default=\"true\"><field name=\"VAR\">i</field></block></value>' +\n    //         '<value name=\"FROM\">' + makeShadowNum(0) + '</value>' +\n    //         '<value name=\"TO\">' + makeShadowNum(10) + '</value>' +\n    //         '<value name=\"BY\">' + makeShadowNum(1) + '</value>' +\n    //         '</block>'\n    // },\n    // defproc_noargs: { block: '<block type=\"procedures_noargs_defnoreturn\"></block>', teaser: '<block type=\"procedures_defnoreturn_teaser\"></block>', pack: 'procedures' },\n    // defproc: { block: '<block type=\"procedures_defnoreturn\"></block>', teaser: '<block type=\"procedures_defnoreturn_teaser\"></block>', pack: 'procedures' },\n    defproc: { block: '<block type=\"procedures_defnoreturn\"></block>', pack: 'procedures' },\n\n\n};\n\n// define and initialize custom blocks\nfunction customBlocklyInit() {\n    Blockly.FieldColour.COLOURS = [\"#1ca84f\", \"#a870b7\", \"#ff1a6d\", \"#00bcf4\", \"#ffc911\", \"#ff6e3d\", \"#000000\", \"#ffffff\"];\n\n    //up\n    Blockly.Blocks['Up'] = {\n        init: function (this: Blockly.Block) {\n            this.jsonInit({\n                message0: \"up by %1\",\n                args0: [\n                    {\n                        type: \"input_value\",\n                        name: \"VALUE\",\n                        check: \"Number\"\n                    }\n                ],\n                previousStatement: true,\n                nextStatement: true,\n                inputsInline: true,\n                colour: COLOR_MOVE_2\n            });\n        }\n    };\n    KoboldConvert.set(\"Up\", (block: Blockly.Block) => {\n        return `Up(${block.getInput(\"VALUE\")?.connection?.targetBlock()?.getFieldValue(\"NUM\")})`\n    });\n\n    //down\n    Blockly.Blocks['Down'] = {\n        init: function (this: Blockly.Block) {\n            this.jsonInit({\n                message0: \"down by %1\",\n                args0: [\n                    {\n                        type: \"input_value\",\n                        name: \"VALUE\",\n                        check: \"Number\"\n\n                    }\n                ],\n                previousStatement: true,\n                nextStatement: true,\n                inputsInline: true,\n                colour: COLOR_MOVE_2\n            });\n        }\n    };\n    KoboldConvert.set(\"Down\", (block: Blockly.Block) => {\n        return `Down(${block.getInput(\"VALUE\")?.connection?.targetBlock()?.getFieldValue(\"NUM\")})`\n    });\n\n    //forward\n    Blockly.Blocks['Forward'] = {\n        init: function (this: Blockly.Block) {\n            this.jsonInit({\n                message0: \"forward by %1\",\n                args0: [\n                    {\n                        type: \"input_value\",\n                        name: \"VALUE\",\n                        check: \"Number\"\n                    }\n                ],\n                previousStatement: true,\n                nextStatement: true,\n                inputsInline: true,\n                colour: COLOR_MOVE_1\n            });\n        }\n    };\n    KoboldConvert.set(\"Forward\", (block: Blockly.Block) => {\n        return `Forward(${block.getInput(\"VALUE\")?.connection?.targetBlock()?.getFieldValue(\"NUM\")})`\n    });\n\n    //left\n    Blockly.Blocks['Left'] = {\n        init: function (this: Blockly.Block) {\n            this.setColour(COLOR_MOVE_1);\n            this.appendDummyInput()\n                .appendField(\"turn left\");\n            this.setPreviousStatement(true);\n            this.setNextStatement(true);\n        }\n    };\n    KoboldConvert.set(\"Left\", (block: Blockly.Block) => {\n        return `Left()`\n    });\n\n    //right\n    Blockly.Blocks['Right'] = {\n        init: function (this: Blockly.Block) {\n            this.setColour(COLOR_MOVE_1);\n            this.appendDummyInput()\n                .appendField(\"turn right\");\n            this.setPreviousStatement(true);\n            this.setNextStatement(true);\n        }\n    };\n    KoboldConvert.set(\"Right\", (block: Blockly.Block) => {\n        return `Right()`\n    });\n\n    //placecube\n    Blockly.Blocks['PlaceCube'] = {\n        init: function (this: Blockly.Block) {\n            this.setColour(COLOR_BLOCK);\n            this.appendDummyInput()\n                .appendField(\"place cube\")\n                .appendField(new Blockly.FieldColour(Blockly.FieldColour.COLOURS[0]), 'VALUE');\n            this.setPreviousStatement(true);\n            this.setNextStatement(true);\n        }\n    };\n    KoboldConvert.set(\"PlaceCube\", (block: Blockly.Block) => {\n        return `PlaceCube(` + Blockly.FieldColour.COLOURS.indexOf(block.getFieldValue(\"VALUE\")) + `)`\n        // this will be an integer\n    });\n\n    //removecube\n    Blockly.Blocks['RemoveCube'] = {\n        init: function (this: Blockly.Block) {\n            this.setColour(COLOR_BLOCK);\n            this.appendDummyInput()\n                .appendField(\"remove cube\");\n            this.setPreviousStatement(true);\n            this.setNextStatement(true);\n        }\n    };\n    KoboldConvert.set(\"RemoveCube\", (block: Blockly.Block) => {\n        return `RemoveCube()`\n    });\n\n    //repeat (built-in)\n    KoboldConvert.set(\"controls_repeat_ext\", (block: Blockly.Block) => {\n        return `repeat ${block.getInput(\"TIMES\")?.connection?.targetBlock()?.getFieldValue(\"NUM\")} times`;\n    });\n\n    //procedure (built-in)\n    KoboldConvert.set(\"procedures_defnoreturn\", (block: Blockly.Block) => {\n        let [name, args] = (block as Blockly.ProcedureBlock).getProcedureDef();\n        return `define ${name}(${args})`;\n    });\n\n    KoboldConvert.set(\"procedures_callnoreturn\", (block: Blockly.Block) => {\n        return `${block.getFieldValue(\"NAME\")}()`;\n    });\n}\n\n\n/*\n * The BlocklyComp class defines and generates all the blocks in the toolbox and workspace\n */\nexport default class BlocklyComp extends React.Component<GameState & {granted_blocks: string[]}> {\n    workspace?: Blockly.WorkspaceSvg\n\n    constructor(props: GameState & { granted_blocks: string[] }) {\n        super(props);\n        customBlocklyInit();\n    }\n\n    render() {\n        return (\n            <div id=\"blocklyDiv\" style={{ width: '100%' }}></div>\n        )\n    }\n\n    // sets up the workspace (also the toolbox)\n    componentDidMount() {\n        console.log(\"mount\");\n        this.workspace = Blockly.inject('blocklyDiv',\n            { toolbox: document.getElementById('toolbox')!, renderer: 'thrasos' });\n        this.updateToolbox(this.workspace, this.props.granted_blocks); // the initial toolbox, empty but we can add any block here\n    }\n\n    // called when there is a change in granted_blocks passed by the state of App\n    componentDidUpdate() {\n        console.log(\"update\");\n        if (this.workspace) {\n            this.updateToolbox(this.workspace, this.props.granted_blocks);\n        }\n    }\n\n    // update the toolbox in the workspace based on the array of granted blocks\n    updateToolbox(workspace: Blockly.WorkspaceSvg, granted_blocks: string[]) {\n        // console.log(\"updating toolbox\");\n        let toolXML = '<xml id=\"toolbox\" style=\"display: none\">';\n        _.forEach(COMMANDS, (data, name) => {\n            if (!_.includes(this.props.puzzle?.library.restricted, name) && _.includes(granted_blocks, name)) {\n                toolXML += data.block;\n            }\n        });\n\n        toolXML += '</xml>';\n        workspace.updateToolbox(toolXML);\n    }\n}","import _ from 'lodash';\nimport parse, {\n    Procedure, FileLocation, Expression,\n    ExpressionType, Invocation, Meta, Ident, Program,\n    SyntaxError, Statement, StatementType, Repeat, Execute, Command\n} from './Parser';\nimport WorldState from './WorldState';\nimport { StdLibText } from './StdLib';\n\nexport enum ValueType {\n    Number = \"number\"\n};\n\n// currently only number Values are implemented, but using a structure\n// that will make this easy to expand\nexport type Value = {\n    kind: ValueType\n    val: number\n};\n\nclass Environment {\n    values: Map<string, Value>;\n    procedures: Map<string, Procedure>;\n\n    constructor() {\n        this.values = new Map<string, Value>();\n        this.procedures = new Map<string, Procedure>();\n    }\n}\n\nexport type SimCommand = {\n    meta: Meta\n    name: string\n    args: Value[]\n};\n\nexport enum RuntimeErrorCode {\n    CustomError,\n    UnknownIdentifier,\n    ArityMismatch,\n    ArgumentError,\n    ValueError\n};\n\nexport class RuntimeError extends Error {\n    code: RuntimeErrorCode;\n    location: FileLocation;\n\n    constructor(code: RuntimeErrorCode, location: FileLocation, msg: string) {\n        super(msg);\n        // necessary according to https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, RuntimeError.prototype);\n        this.code = code;\n        this.location = location;\n    }\n}\n\nexport function runtime_error(code: RuntimeErrorCode, msg: string, meta?: Meta) {\n    console.error(msg);\n    return new RuntimeError(code, meta ? meta.location : new FileLocation(), msg);\n}\n\nfunction evaluate(env: Environment, expr: Expression): Value | RuntimeError {\n    switch (expr.kind) {\n        case ExpressionType.Number:\n            return { kind: ValueType.Number, val: expr.expression as number }\n        case ExpressionType.Ident:\n            // look up the identifier name in the environment\n            // if it exists, return the corresponding value\n            // otherwise, return an unknown identfier error\n            const name = (expr.expression as Ident).name\n            if (env.values.has(name)) {\n                return _.clone(env.values.get(name)!);\n            }\n            return runtime_error(RuntimeErrorCode.UnknownIdentifier,\n                `Unknown identifier ${name}`, expr.meta);\n    }\n}\n\nfunction value_as_int(v: Value): number | RuntimeError {\n    if (v.kind === ValueType.Number) {\n        return v.val as number;\n    }\n    return runtime_error(RuntimeErrorCode.ValueError,\n        `Could not convert ${JSON.stringify(v)} to int`);\n}\n\nfunction evaluate_repeat_header(env: Environment, number: Expression, meta: Meta): number | RuntimeError {\n    const repeat_eval = evaluate(env, number);\n    if (repeat_eval instanceof RuntimeError) {\n        return repeat_eval;\n    }\n    const repeat_count = value_as_int(repeat_eval);\n    if (repeat_count instanceof RuntimeError) {\n        return repeat_count;\n    }\n\n    if (repeat_count < 0) {\n        return runtime_error(RuntimeErrorCode.ArgumentError,\n            `Repeat with negative number of iterations: ${repeat_count}`, meta)\n    }\n    return repeat_count;\n}\n\nfunction evaluate_arg_list(env: Environment, invo: Invocation): Value[] | RuntimeError {\n    const vals: Value[] = [];\n    for (let arg of invo.args) {\n        const x = evaluate(env, arg);\n        if (x instanceof RuntimeError) {\n            return x;\n        }\n        vals.push(x);\n    }\n    return vals;\n}\n\nfunction lookup_procedure(env: Environment, invo: Invocation, meta: Meta): Procedure | RuntimeError {\n    if (env.procedures.has(invo.name)) {\n        return _.clone(env.procedures.get(invo.name)!);\n    }\n    return runtime_error(RuntimeErrorCode.UnknownIdentifier,\n        `Unknown procedure ${invo.name}`, meta);\n}\n\nfunction create_env_for_procedure(env: Environment, procedure: Procedure,\n    invo: Invocation, meta: Meta): Environment | RuntimeError {\n    const vals = evaluate_arg_list(env, invo);\n    if (vals instanceof RuntimeError) {\n        return vals;\n    }\n\n    // check that the number of arguments matches the number of parameters\n    const arity = vals.length;  // arity means the number of arguments\n    if (arity !== procedure.params.length) {\n        return runtime_error(RuntimeErrorCode.ArityMismatch,\n            `Procedure ${invo.name} expects ${procedure.params.length} arguments, received ${arity}`);\n    }\n\n    // update the environment with the local variables\n    const new_env = _.cloneDeep(env);\n    for (let [name, value] of _.zip(procedure.params, vals)) {\n        new_env.values.set(name!, value!);  // we know these won't be undefined because arity matches\n    }\n    return new_env;\n}\n\nexport enum SimulatorState {\n    Running = \"running\",\n    Stopped = \"stopped\",\n    Paused = \"paused\",\n    Finished = \"finished\"\n}\n\n/// take a repeat statement and a count and return a new repeat statment with one lower count\nfunction decrement_repeat(stmt: Statement, count: number): Statement {\n    let repeat = stmt.stmt as Repeat;\n    return {\n        kind: StatementType.Repeat,\n        meta: stmt.meta,\n        stmt: {\n            number: {\n                kind: ExpressionType.Number,\n                meta: repeat.number.meta,\n                expression: count - 1\n            },\n            body: repeat.body\n        }\n    }\n}\n\n/// A Kobold simulator for simulating one command at a time\n/// Useful for animating program execution and generating sequence of world states\nexport class IncrementalSimulator {\n    world: WorldState\n    base_env: Environment\n\n    sim_state: SimulatorState\n    execution_stack: [Statement, Environment][]  // stack of statements to be executed\n\n    TICKS_PER_SECOND = 60;\n    ticks_per_command = 30;  // controlled by speed slider\n    last_stmt_exec_time = 0;\n    total_steps = 0;\n\n    constructor(world: WorldState, program: Program) {\n        this.world = world;\n        this.sim_state = SimulatorState.Stopped;\n        this.execution_stack = [];\n        this.base_env = _.cloneDeep(baseline_environment!);\n\n        // go through program and process procedure definitions\n        // push statements onto the execution stack---program.body is reversed so they end up in the correct order\n        for (let s of program.body.slice().reverse()) {\n            switch (s.kind) {\n                case \"procedure\":\n                    this.base_env.procedures.set(s.name, _.cloneDeep(s))\n                    break;\n\n                default:\n                    this.execution_stack.push([s as Statement, this.base_env]);\n            }\n        }\n    }\n\n    is_running(): boolean {\n        return this.sim_state === SimulatorState.Running;\n    }\n\n    set_running() {\n        this.sim_state = SimulatorState.Running;\n    }\n\n    is_finished(): boolean {\n        return this.sim_state === SimulatorState.Finished;\n    }\n\n    set_finished() {\n        this.sim_state = SimulatorState.Finished;\n    }\n\n    is_stopped(): boolean {\n        return this.sim_state === SimulatorState.Stopped;\n    }\n\n    set_stopped() {\n        this.sim_state = SimulatorState.Stopped;\n    }\n\n    execute_to_command(): void | RuntimeError {\n        // an empty execution_stack indicates there's nothing left to run, so mark as finished\n        if (this.execution_stack.length === 0) {\n            this.set_finished();\n            return;\n        }\n\n        // don't execute unless the simulator is running\n        if (!this.is_running()) {\n            // this could be an error\n            return;\n        }\n\n        const [stmt, env] = this.execution_stack.pop()!;\n        switch (stmt.kind) {\n            case StatementType.Repeat:\n                let repeat = stmt.stmt as Repeat;\n                let repeat_count = evaluate_repeat_header(env, repeat.number, stmt.meta);\n                if (repeat_count instanceof RuntimeError) {\n                    return repeat_count;\n                }\n                // repeat is not a command\n                // so what we do is push a new repeat with one less count (if count > 1)\n                // then push the body of the repeat so it gets executed next\n                // finally return a recursive call (i.e., continue executing since we haven't hit a command)\n                if (repeat_count > 1) {\n                    this.execution_stack.push([decrement_repeat(stmt, repeat_count), env]);\n                }\n                for (let s of repeat.body.slice().reverse()) {\n                    this.execution_stack.push([s, env]);\n                }\n                return this.execute_to_command();\n\n            case StatementType.Execute:\n                let exec = stmt.stmt as Execute;\n                let procedure = lookup_procedure(env, exec.invoke, stmt.meta);\n                if (procedure instanceof RuntimeError) {\n                    return procedure;\n                }\n                let new_env = create_env_for_procedure(env, procedure, exec.invoke, stmt.meta);\n                if (new_env instanceof RuntimeError) {\n                    return new_env;\n                }\n                // push body of procedure onto the stack with new environment\n                for (let s of procedure.body.slice().reverse()) {\n                    this.execution_stack.push([s, new_env]);\n                }\n                // continue executing recursively\n                return this.execute_to_command();\n\n            case StatementType.Command:\n                let command = stmt.stmt as Command;\n                let args = evaluate_arg_list(env, command.invoke);\n                if (args instanceof RuntimeError) {\n                    return args;\n                }\n                // we've reached a command (base case), execute it using the WorldState\n                let result = this.world.execute({\n                    name: command.invoke.name,\n                    args: args,\n                    meta: stmt.meta\n                });\n                if (result instanceof RuntimeError) {\n                    return result;\n                }\n                break;\n        }\n    }\n}\n\n/// A Kobold simulator for running a program straight through to the end\n/// mostly useful for testing parsing and other language infrastructure\nexport class RecursiveSimulator {\n    world: WorldState\n\n    constructor(world: WorldState) {\n        this.world = world;\n    }\n\n    execute_to_end(env: Environment, stmt: Statement): void | RuntimeError {\n        switch (stmt.kind) {\n            case StatementType.Repeat:\n                let repeat = stmt.stmt as Repeat;\n                let repeat_count = evaluate_repeat_header(env, repeat.number, stmt.meta);\n                if (repeat_count instanceof RuntimeError) {\n                    return repeat_count;\n                }\n                for (let i = 0; i < repeat_count; i++) {\n                    let block_result = this.execute_block_to_end(env, repeat.body);\n                    if (block_result instanceof RuntimeError) {\n                        return block_result;\n                    }\n                }\n                break;\n\n            case StatementType.Execute:\n                let exec = stmt.stmt as Execute;\n                let procedure = lookup_procedure(env, exec.invoke, stmt.meta);\n                if (procedure instanceof RuntimeError) {\n                    return procedure;\n                }\n                let new_env = create_env_for_procedure(env, procedure, exec.invoke, stmt.meta);\n                if (new_env instanceof RuntimeError) {\n                    return new_env;\n                }\n                let block_result = this.execute_block_to_end(new_env, procedure.body);\n                if (block_result instanceof RuntimeError) {\n                    return block_result;\n                }\n                break;\n\n            case StatementType.Command:\n                let command = stmt.stmt as Command;\n                let args = evaluate_arg_list(env, command.invoke);\n                if (args instanceof RuntimeError) {\n                    return args;\n                }\n                let result = this.world.execute({\n                    name: command.invoke.name,\n                    args: args,\n                    meta: stmt.meta\n                });\n                if (result instanceof RuntimeError) {\n                    return result;\n                }\n                break;\n        }\n    }\n\n    execute_block_to_end(env: Environment, block: Statement[]): void | RuntimeError {\n        for (let s of block) {\n            let result = this.execute_to_end(env, s);\n            if (result instanceof RuntimeError) {\n                return result;\n            }\n        }\n    }\n\n    run_program_to_end(base_environment: Environment, program: Program): void | RuntimeError {\n        let env = _.cloneDeep(base_environment);\n        for (let s of program.body) {\n            switch (s.kind) {\n                case \"procedure\":\n                    env.procedures.set(s.name, _.cloneDeep(s))\n                    break;\n\n                default:\n                    let result = this.execute_to_end(env, s as Statement);\n                    if (result instanceof RuntimeError) {\n                        return result;\n                    }\n            }\n        }\n    }\n}\n\n/// run program to the end using a RecursiveSimulator, applying any commands to world\nexport default function run(world: WorldState, program: Program): void | RuntimeError {\n    if (baseline_environment) {\n        let sim = new RecursiveSimulator(world);\n        let result = sim.run_program_to_end(baseline_environment, program);\n        if (result instanceof RuntimeError) {\n            console.error(`[RuntimeError] ${result}`);\n            return result;\n        }\n    } else {\n        console.error(\"run called before stdlib is loaded\");\n        return runtime_error(RuntimeErrorCode.CustomError, \"run called before stdlib is loaded\");\n    }\n}\n\nexport let baseline_environment: Environment | null = null;\n\nfunction extract_definitions(program: Program): Environment {\n    let env = new Environment();\n    for (let stmt of program.body) {\n        if (stmt.kind === \"procedure\") {\n            let p = stmt as Procedure;\n            env.procedures.set(p.name, _.cloneDeep(p));\n        }\n    }\n    return env;\n}\n\nexport function load_stdlib() {\n    let ast = parse(StdLibText);\n    if (ast instanceof SyntaxError) {\n        console.error(`Error parsing stdlib: ${JSON.stringify(ast)}`);\n        return;\n    }\n    let env = extract_definitions(ast);\n    if (env instanceof RuntimeError) {\n        console.error(`Error loading stdlib: ${JSON.stringify(env)}`);\n        return;\n    }\n    baseline_environment = env;\n}","/* FILENAME:    StdLib.ts\n * DESCRIPTION: \n *      This file defines the code text for each block\n * DATE:    08/19/2021\n * AUTHOR:      Aaron Bauer\n */\nexport const StdLibText = `\ndefine Forward(x)\n    repeat x times\n        command forward()\n\ndefine Left()\n    command left()\n\ndefine Right()\n    command right()\n\ndefine Up(x)\n    repeat x times\n        command up()\n\ndefine Down(x)\n    repeat x times\n        command down()\n\ndefine PlaceCube(color)\n    command cube(color)\n\ndefine RemoveCube()\n    command remove()\n`;","/* FILENAME:    Util.ts\n * DESCRIPTION: \n *      This file contains three functions that checks/gets/deletes the vector in the map\n * DATE:    08/19/2021\n * AUTHOR:      Aaron Bauer    Teagan Johnson\n */\n\n/* eslint-disable */\nexport function mapHasVector3(map: Map<THREE.Vector3, any>, vec: THREE.Vector3): boolean {\n    for (let [key, _val] of map) {\n        if (key.equals(vec)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function mapGetVector3<T>(map: Map<THREE.Vector3, T>, vec: THREE.Vector3): T | undefined {\n    for (let [key, val] of map) {\n        if (key.equals(vec)) {\n            return val;\n        }\n    }\n}\n\nexport function mapDeleteVector3(map: Map<THREE.Vector3, any>, vec: THREE.Vector3): boolean {\n    for (let [key, _val] of map) {\n        if (key.equals(vec)) {\n            map.delete(key);\n            return true;\n        }\n    }\n    return false;\n}\n/* eslint-enable */","import * as THREE from 'three';\nimport { SimCommand, RuntimeError, RuntimeErrorCode, runtime_error, \n    ValueType } from './Simulator';\n/* eslint-disable */\nimport _ from 'lodash';\nimport { mapDeleteVector3, mapHasVector3 } from './Util';\n\nexport const UP = new THREE.Vector3(0, 0, 1);\nexport const DOWN = new THREE.Vector3(0, 0, -1);\n\nfunction extract_single_int_arg(command: SimCommand): number | RuntimeError {\n    if (command.args.length > 1) {\n        return runtime_error(RuntimeErrorCode.CustomError, \n            `Expected 1 argument to ${command.name}`, command.meta);\n    }\n    if (command.args[0] && command.args[0].kind === ValueType.Number) {\n        return command.args[0].val as number;\n    }\n    return runtime_error(RuntimeErrorCode.CustomError,\n        `Expected an integer argument to ${command.name}`, command.meta);\n}\n\nexport default class WorldState {\n    dragon_pos: THREE.Vector3\n    dragon_dir: THREE.Vector3\n    // cube_map maps Vector3 positions to integers representing color\n    cube_map: Map<THREE.Vector3, number>\n    dirty: boolean = false;\n\n    constructor() {\n        this.dragon_pos = new THREE.Vector3(0, 0, 0);\n        this.dragon_dir = new THREE.Vector3(1, 0, 0);\n        this.cube_map = new Map<THREE.Vector3, number>();\n    }\n\n    mark_dirty() {\n        this.dirty = true;\n    }\n\n    mark_clean() {\n        this.dirty = false;\n    }\n\n    execute(command: SimCommand): void | RuntimeError {\n        switch (command.name) {\n            case \"forward\":\n                this.dragon_pos.add(this.dragon_dir);\n                break;\n            case \"up\":\n                this.dragon_pos.add(UP);\n                break;\n            case \"down\":\n                if (this.dragon_pos.z === 0) {\n                    return;  // dragon should not be able to pass below the plane, \n                             // return early here to avoid marking as dirty state that did not change\n                }\n                this.dragon_pos.add(DOWN);\n                break;\n            case \"left\":\n                this.dragon_dir = new THREE.Vector3(-this.dragon_dir.y, \n                                                    this.dragon_dir.x,\n                                                    this.dragon_dir.z);\n                break;\n            case \"right\":\n                this.dragon_dir = new THREE.Vector3(this.dragon_dir.y, \n                                                    -this.dragon_dir.x,\n                                                    this.dragon_dir.z);\n                break;\n            case \"cube\":\n                let color_id = extract_single_int_arg(command);\n                if (color_id instanceof RuntimeError) {\n                    return color_id;\n                }\n                // only has an affect when a cube is not already present\n                if (!mapHasVector3(this.cube_map, this.dragon_pos)) {\n                    this.cube_map.set(this.dragon_pos.clone(), color_id);\n                } else {\n                    return; // return early to avoid marking dirty an unchanged state\n                }\n                break;\n            case \"remove\":\n                if (!mapDeleteVector3(this.cube_map, this.dragon_pos)) {\n                    return; // return early to avoid marking dirty an unchanged state\n                }\n                break;\n            default:\n                return runtime_error(RuntimeErrorCode.CustomError, \n                    `Unknown command ${command.name}`, command.meta);\n        }\n        this.mark_dirty();\n    }\n\n    // custom serialization functions needed since JSON module can't handle Map objects\n    // TODO serialization/deserialization tests\n\n    toJSON() {\n        const { cube_map, ...clone } = this;\n        const temp = {\n            cube_map: JSON.stringify([...cube_map]),\n            ...clone\n        }\n        return temp;\n    }\n\n    static fromJSON(s: string): WorldState {\n        const temp = JSON.parse(s);\n        const ws = new WorldState();\n        ws.dragon_pos = temp.dragon_pos;\n        ws.dragon_dir = temp.dragon_dir;\n        ws.dirty = temp.dirty;\n        ws.cube_map = new Map(JSON.parse(temp.cube_map));\n        return ws;\n    }\n}\n","/* FILENAME:    PuzzleState.ts\n * DESCRIPTION: \n *      This file contains the PuzzleState class that tracks the state of the puzzle,\n *      sets up the environment for a puzzle (or a sandbox) and checks if puzzle has been completed\n * DATE:    08/19/2021\n * AUTHOR:      Aaron Bauer    Katrina Li    Teagan Johnson\n */\n/* eslint-disable */\nimport _ from \"lodash\"\n/* eslint-enable */\nimport * as THREE from \"three\"\nimport { GameState } from \"./App\"\nimport parse, { SyntaxError } from \"./Parser\"\nimport run from \"./Simulator\"\nimport { mapHasVector3 } from \"./Util\"\nimport WorldState from \"./WorldState\"\n\nconst IMG_FILE_MAP = new Map([\n    [\"forward\", \"media/DA2-forward.png\"],\n    [\"set\", \"media/blockSvgs/set.svg\"],\n    [\"left\", \"media/blockSvgs/left.svg\"],\n    [\"right\", \"media/DA2-right.png\"],\n    [\"placecube\", \"media/DA2-place-cube.png\"],\n    [\"removecube\", \"media/DA2-remove-cube.png\"],\n    [\"variable\", \"media/variable.png\"],\n    [\"rotate\", \"media/DA2-rotate.png\"],\n    [\"scroll\", \"media/DA2-tilt.png\"],\n    [\"square\", \"media/DA2-cube.png\"],\n    [\"x\", \"media/x.png\"],\n    [\"forwardx\", \"media/forwardx.png\"],\n    [\"get\", \"media/get.png\"],\n    [\"up\", \"media/DA2-up.png\"],\n    [\"down\", \"media/DA2-down.png\"],\n    [\"repeat\", \"media/DA2-repeat.png\"],\n    [\"repeat4\", \"media/blockSvgs/repeat4.svg\"],\n    [\"repeat5\", \"media/blockSvgs/repeat5.svg\"],\n    [\"repeat9\", \"media/blockSvgs/repeat9.svg\"],\n    [\"SquareProc\", \"media/blockSvgs/SquareProc.svg\"],\n    [\"upcube\", \"media/upcube.png\"],\n    [\"FixedCastleProc\", \"media/blockSvgs/FixedCastleProc.svg\"],\n    [\"FixedTowerProc\", \"media/blockSvgs/FixedTowerProc.svg\"],\n    [\"FixedWallProc\", \"media/blockSvgs/FixedWallProc.svg\"],\n    [\"run\", \"media/DA2-run-button.png\"],\n    [\"rotateCW\", \"media/rotateCWButton.png\"],\n    [\"rotateCCW\", \"media/rotateCCWButton.png\"],\n    [\"camera\", \"media/DA2-camera-controls.png\"],\n    [\"learn\", \"media/learnButton.png\"],\n    [\"workshop\", \"media/workshopButton.png\"],\n    [\"clear\", \"media/clearSandboxButton.png\"],\n    [\"speedSlider\", \"media/DA2-speed-slider.png\"],\n    [\"done\", \"media/doneButton.png\"],\n    [\"pinkboxGround\", \"media/DA2-dragon-pos-cube.png\"],\n    [\"pinkboxUp\", \"media/pinkboxUp.png\"],\n    [\"castle\", \"media/blockSvgs/castle.svg\"],\n    [\"wall\", \"media/blockSvgs/wall.svg\"],\n    [\"tower\", \"media/blockSvgs/tower.svg\"],\n    [\"towerlayer\", \"media/blockSvgs/towerlayer.svg\"],\n    [\"towertop\", \"media/blockSvgs/towertop.svg\"],\n    [\"wallsheet\", \"media/blockSvgs/wallsheet.svg\"],\n    [\"walltop\", \"media/blockSvgs/walltop.svg\"],\n    [\"pillarProc\", \"media/blockSvgs/pillarProc.svg\"],\n    [\"procDef\", \"media/blockSvgs/procDef.svg\"],\n    [\"procedure\", \"media/DA2-procedure.png\"],\n    [\"bridge\", \"media/DA2-bridge.png\"],\n    [\"cube\", \"media/Da2-cube.png\"],\n    [\"purple_cube\", \"media/purple_cube.png\"],\n    [\"menu_btn\", \"media/menu_btn.png\"]]);\n\n// replace each word inside {} with the corresponding html produced by makeImgHtml (if applicable)\nfunction process_instruction_string(str: string) {\n    return \"Goal: \" + str.replace(/{(\\w+)}/g, (match, id) => {\n        if (IMG_FILE_MAP.get(id)!.substring(IMG_FILE_MAP.get(id)!.length-3) === \"png\") {\n            return IMG_FILE_MAP.has(id)\n                ? `<object class=\"instructions-png\" data=\"${IMG_FILE_MAP.get(id)}\"></object>`\n                : match;\n        }\n        else {\n            return IMG_FILE_MAP.has(id)\n                ? `<object class=\"instructions-svg\" data=\"${IMG_FILE_MAP.get(id)}\"></object>`\n                : match;\n        }\n    });\n}\n\nexport enum GoalInfoType {\n    DragonPos = \"position\",  // goals only care about dragon position, not direction\n    AddCube = \"addcube\",\n    RemoveCube = \"removecube\",\n    RunOnly = \"runonly\",\n    MinCube = \"mincube\"\n}\n\nexport type GoalInfo = {\n    kind: GoalInfoType\n    position?: THREE.Vector3  // only present for DragonPos and add/remove Cube kinds\n    value?: number            // only present for MinCube kind\n}\n\n// available code blocks, strings must be keys in BlocklyComp.COMMANDS\n// restricted: these blocks should not appear in the toolbox\n// required: these blocks must appear in the toolbox\n// granted: these blocks become available in the sandbox after completing this puzzle\ntype LibrarySpec = {\n    restricted: string[]\n    required: string[]\n    granted: string[]\n}\n\n// starting cubes\ntype CubeSpec = {\n    pos: number[]\n    color: number\n}\n\n// starting world state\ntype WorldSpec = {\n    pos: number[]\n    dir: number[]\n    cubes?: CubeSpec[]  // undefined indicates no starting cubes\n}\n\nenum GoalType {\n    Solution = \"solution\",  // dragon moves, cubes added/removed based on a solution program\n    RunOnly = \"run_only\",\n    MinCube = \"min_cube\"\n}\n\nexport type PuzzleSpec = {\n    name: string\n    tag: string\n    library: LibrarySpec\n    world: WorldSpec\n    program?: string      // file containing starting program; undefined indicates no starting code\n    solution?: string     // file containing solution program; undefined for run-only and min cubes goal types\n    goal: GoalType\n    goalValue?: number    // number of cubes for a min cube goal\n    instructions: string\n}\n\nfunction make_world_from_spec(spec: WorldSpec): WorldState {\n    let world = new WorldState();\n    world.dragon_pos = new THREE.Vector3(...spec.pos);\n    world.dragon_dir = new THREE.Vector3(...spec.dir);\n    if (spec.cubes) {\n        for (let { pos, color } of spec.cubes) {\n            world.cube_map.set(new THREE.Vector3(...pos), color);\n        }\n    }\n    world.dirty = true;\n    return world;\n}\n\nfunction make_goals_from_world(end: WorldState, start: WorldState): GoalInfo[] {\n    let goals = []\n\n    // check for cubes added, position only\n    for (let cubePos of end.cube_map) {\n        if (!mapHasVector3(start.cube_map, cubePos[0])) {\n            goals.push({\n                kind: GoalInfoType.AddCube,\n                position: cubePos[0]\n            });\n        }\n    }\n\n    // check for cubes removed, position only\n    for (let cubePos of start.cube_map) {\n        if (!mapHasVector3(end.cube_map, cubePos[0])) {\n            goals.push({\n                kind: GoalInfoType.RemoveCube,\n                position: cubePos[0]\n            });\n        }\n    }\n\n    // only have a position goal if there are no cube goals\n    if (goals.length === 0) {\n        // only care about dragon position, not direction\n        if (!end.dragon_pos.equals(start.dragon_pos)) {\n            goals.push({\n                kind: GoalInfoType.DragonPos,\n                position: end.dragon_pos\n            });\n        }\n    }\n\n    return goals;\n}\n\n/* \n * The PuzzleState will track the state of the puzzle including the current\n * toolbox, instructions, the GoalInfo, start_world and start_code of the puzzle\n * It will set up a puzzle (or a sandbox) and check if puzzle has been completed\n */\n\nexport default class PuzzleState {\n    start_code: string = \"\"\n    start_world: WorldState = new WorldState()\n    goals: GoalInfo[] = []\n    instructions: string = \"\"\n    library: LibrarySpec = {\n        restricted: [],\n        required: [],\n        granted: []\n    }\n    name: string = \"\"\n    tag: string = \"\"\n    win_callback: () => void = () => { }\n\n    check_completed(gamestate: GameState) {\n        if (this.is_complete(gamestate)) {\n            this.win_callback();\n        }\n    }\n\n    // return true if the current game state matches the goals\n    // assumptions: RunOnly, MinCube, DragonPos will be the only goal \n    //              if they are present\n    /* criteria\n        simulator must be finished\n        loop over goals\n            switch on goal.kind\n                RunOnly: true\n                MinCube: check gamestate.world.cube_map for correct number of cubes\n                AddCube: check that this cube exists\n                RemoveCube: check that this cube does not exist\n                DragonPos: check dragon's position\n        check that no extra cubes have been placed\n    */\n    is_complete(gamestate: GameState): boolean {\n        if (!gamestate.simulator.is_finished() || this.goals.length == 0) {\n            return false;\n        }\n        let posRequired;\n        for (let goal of this.goals) {\n            switch (goal.kind) {\n                case GoalInfoType.RunOnly:\n                    return true;\n                case GoalInfoType.MinCube:\n                    let minRequired = goal.value as number;\n                    let cubeNum = gamestate.world.cube_map.size;\n                    return cubeNum >= minRequired;\n                case GoalInfoType.AddCube:\n                    posRequired = goal.position as THREE.Vector3;\n                    if (!mapHasVector3(gamestate.world.cube_map, posRequired)) {\n                        return false;\n                    }\n                    break;\n                case GoalInfoType.RemoveCube:\n                    posRequired = goal.position as THREE.Vector3;\n                    if (mapHasVector3(gamestate.world.cube_map, posRequired)) {\n                        return false;\n                    }\n                    break;\n                case GoalInfoType.DragonPos:\n                    let dragonPosRequired = goal.position as THREE.Vector3;\n                    return gamestate.world.dragon_pos.equals(dragonPosRequired);\n            }\n        }\n        return gamestate.world.cube_map.size <= this.goals.length\n    }\n\n    // create and initiate puzzles from puzzle files in ./public/puzzle, called in ./App.tsx\n    static make_from_file(filename: string, win_callback: () => void) {\n        let state = new PuzzleState();\n        state.win_callback = win_callback;\n\n        /// read in starting program from file\n        let fetchProgram = (data: PuzzleSpec) => {\n            return new Promise<PuzzleSpec>((resolve, reject) => {\n                if (data.program) {\n                    fetch(data.program)\n                        .then(response => response.text())\n                        .then(text => {\n                            state.start_code = text;\n                            resolve(data)\n                        })\n                        .catch(error => {\n                            reject(`Encountered error loading program from ${data.program}, as specified in ${filename}: ${error}`);\n                        });\n                } else {\n                    resolve(data);\n                }\n            });\n        }\n\n\n        // set up the puzzle's solution, potentially reading it from a file\n        let fetchSolution = (data: PuzzleSpec) => {\n            return new Promise<PuzzleSpec>((resolve, reject) => {\n                if (data.goal === GoalType.Solution) {\n                    // these goals depend on the world state after a solution is run, so read in solution from file\n                    if (data.solution) {\n                        fetch(data.solution)\n                            .then(response => response.text())\n                            .then(text => {\n                                let program = parse(text);  // parse solution\n                                if (program instanceof SyntaxError) {\n                                    reject(`Syntax error when parsing solution ${text} from ${filename}: ${program}`);\n                                } else {\n                                    // run solution and use the differences from starting state to generate goals\n                                    let world = make_world_from_spec(data.world);\n                                    run(world, program);\n                                    state.goals = make_goals_from_world(world, state.start_world);\n                                    resolve(data);\n                                }\n                            })\n                            .catch(error => {\n                                reject(`Encountered error loading solution from ${data.solution}, as specified in ${filename}: ${error}`);\n                            })\n                    } else {\n                        reject(`Puzzle specification ${filename} has goal type ${data.goal}, but does not provide solution file`);\n                    }\n                    // otherwise we have a single goal, either MinCube or RunOnly\n                } else if (data.goal === GoalType.MinCube) {\n                    state.goals = [{\n                        kind: GoalInfoType.MinCube,\n                        value: data.goalValue\n                    }];\n                    resolve(data);\n                } else if (data.goal === GoalType.RunOnly) {\n                    state.goals = [{\n                        kind: GoalInfoType.RunOnly\n                    }];\n                    resolve(data);\n                } else {\n                    reject(`Unrecognized goal type ${data.goal} in ${filename}`);\n                }\n            });\n        }\n\n        // return the puzzle, its program and solution\n        return new Promise<PuzzleState>(resolve => {\n            fetch(filename)\n                .then(response => { return response.json() })\n                .then((data: PuzzleSpec) => {\n                    state.start_world = make_world_from_spec(data.world);\n                    state.library = data.library;\n                    state.name = data.name;\n                    state.tag = data.tag;\n                    state.instructions = process_instruction_string(data.instructions)\n                    return data;\n                })\n                .then(fetchProgram)\n                .then(fetchSolution)\n                .then(() => {\n                    resolve(state);\n                })\n                .catch(error => console.error(error));\n        });\n    }\n}\n\nexport let SANDBOX_STATE = new PuzzleState();","/* FILENAME:    Display.tsx\n * DESCRIPTION: \n *      This file controls the display portion of the App.\n *      In Display.tsx, THREE.js is used to create and control the animated screen and camera.\n *      Display.tsx has two child files: CameraPositioning.tsx and Slider.tsx.\n * DATE:    08/19/2021\n * AUTHOR:      Teagan Johnson   Aaron Bauer    Katrina Li\n */\nimport React from 'react';\nimport * as THREE from 'three';\nimport { GameState } from './App';\nimport { GoalInfo, GoalInfoType } from './PuzzleState';\nimport { mapHasVector3 } from './Util';\nimport Blockly from 'blockly';\nimport Slider from './Slider';\nimport { CameraZoomIn, CameraZoomOut, CameraRotateRight, CameraRotateLeft, CameraTiltDown, CameraTiltUp } from './CameraPositioning';\nimport \"./css/index.css\"\n\n// All constant variables\ntype Constants = {\n    WOBBLE_PERIOD: number,\n    WOBBLE_MAGNITUDE: number,\n    TRANSLATION_SMOOTHNESS: number, // relative speed at which the camera will catch up.\n    ROTATION_SMOOTHNESS: number, // The relative speed at which the camera will catch up.\n    MAX_ANIMATION_TIME: number, // if animation would take longer than this, take this time and then just sit idle\n    MIN_ANIMATION_TIME: number, // if animation would take less than this, just don't bother animating anything\n    loader: THREE.TextureLoader, // Allows us to load in textures (plane, cubes, etc.)\n}\n\n// Maps and arrays that contain information about cubes, goalCubes, colors, and materials\ntype StorageMaps = {\n    cubeColors: string[], // These are all the possible colors of the cubes placed by the dragon\n    cubes: Map<string, THREE.Mesh[]>, // Map that holds all placed cubes categorized by color\n    goalCubes: Map<string, THREE.Mesh[]>, // Map that holds all placed goal cubes (or puzzle cubes) categorized by color\n    cubeMats: Map<string, THREE.MeshLambertMaterial>, // List containing the materials of each cube \"in order\" of color\n}\n\n// All variables that store information about the camera\ntype CameraPos = {\n    relativeCamPos: THREE.Vector3,\n    // Offsets are needed to make dragon appear above the placement of the cubes, and to appear in the center of the plane\n    dragonOffset: THREE.Vector3, // How much the dragon is offSet from center of position\n    cubeOffset: THREE.Vector3, // How much cubes are offset from center of position\n    relativeCamPosMag: number,\n    upVector: THREE.Vector3\n}\n\n// The camera, scene, and renderer variables\ntype Main = {\n    scene: THREE.Scene,\n    camera: THREE.PerspectiveCamera,\n    oldCamQ: THREE.Quaternion,\n    renderer: THREE.WebGLRenderer\n}\n\n// This type holds information about the clock (which is used for animation)\ntype ClockStuff = {\n    clock: THREE.Clock,\n    time: number\n}\n\n// This type holds the dragon's final position and quaternion\ntype FinalValues = {\n    finalDragPos: THREE.Vector3,\n    finalDragQ: THREE.Quaternion,\n}\n\n// This type holds information about the geometries of the cubes, light, plane, and dragon\ntype Geometries = {\n    // Cube geometry, materials, and mesh\n    cubeGeo: THREE.BoxGeometry,\n    goalGeo: THREE.BoxGeometry,\n    cubeGoalMat: THREE.MeshLambertMaterial,\n    dragonGoalMat: THREE.MeshLambertMaterial,\n    goalShadow: THREE.Mesh,\n\n    // Light\n    light: THREE.DirectionalLight,\n\n    // Plane geometry, material, and mesh\n    planeGeometry: THREE.PlaneBufferGeometry,\n    planeMaterial: THREE.MeshBasicMaterial,\n    plane: THREE.Mesh,\n\n    // Dragon\n    dragonGeometry: THREE.SphereGeometry,\n    dragon: THREE.Mesh,\n    dragonNose: THREE.ArrowHelper, // This is the \"nose\" on the dragon that points to where it's going\n    geometry: THREE.PlaneBufferGeometry,\n\n    // zCue plane (indicates which square the dragon is on if its z-value is higher than 0)\n    zCuePlane: THREE.Mesh\n}\n\n// This type holds information about the dragon's animation\ntype DragonAnimation = {\n    animStatus: Animation,\n    waitTime: number,\n    animTime: number,\n    animPerSec: number\n}\n\n// This type holds the available and filled optimization maps\ntype OptimizationMaps = {\n    available: Map<string, THREE.Mesh[]>, // Map that contains all cubes that don't currently have positions\n    filled: Map<THREE.Vector3, THREE.Mesh>// Map that contains all positions on the display that are currently filled\n}\n\n// This enum represents what stage the animation is at (waiting, animating, done, null) and is used by the animStatus variable\nenum Animation {\n    waiting = \"waiting\",\n    animating = \"animating\",\n    done = \"done\",\n    null = \"null\"\n}\n\n// The Display.tsx function that does everything\nexport default class Display extends React.Component<GameState> {\n    divRef: React.RefObject<HTMLDivElement>;\n    // Initialize all types + enums in constructor\n    constantValues: Constants;\n    storageMaps: StorageMaps;\n    mainStuff: Main;\n    cameraPos: CameraPos;\n    clockStuff: ClockStuff;\n    geometries: Geometries;\n    dragAnimation: DragonAnimation;\n    finalValues: FinalValues;\n    cubeOptMaps: OptimizationMaps;\n    goalOptMaps: OptimizationMaps;\n    puzzleInit: string;\n\n    // Constructor method!\n    constructor(props: GameState) {\n        super(props);\n        this.constantValues = {\n            WOBBLE_PERIOD: 4,\n            WOBBLE_MAGNITUDE: 0.05,\n            TRANSLATION_SMOOTHNESS: 1.5,\n            ROTATION_SMOOTHNESS: 5.0,\n            MAX_ANIMATION_TIME: .4,\n            MIN_ANIMATION_TIME: 0.1,\n            loader: new THREE.TextureLoader(),\n        }\n\n        this.storageMaps = {\n            cubeColors: Blockly.FieldColour.COLOURS,\n            cubes: new Map<string, THREE.Mesh[]>(),\n            goalCubes: new Map<string, THREE.Mesh[]>(),\n            cubeMats: new Map<string, THREE.MeshLambertMaterial>()\n        }\n\n        this.cameraPos = {\n            // Camera positioning\n            relativeCamPos: new THREE.Vector3(-15, 0, 12),\n            // Offsets are needed to make dragon appear above the placement of the cubes, and to appear in the center of the plane\n            dragonOffset: new THREE.Vector3(0.5, 0.5, 1.5), // How much the dragon is offSet from center of position\n            cubeOffset: new THREE.Vector3(0.5, 0.5, 0.5), // How much cubes are offset from center of position\n            relativeCamPosMag: 0,\n            upVector: new THREE.Vector3(0, 0, 1)\n        }\n\n        this.mainStuff = {\n            scene: new THREE.Scene(),\n            camera: new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1500),\n            oldCamQ: new THREE.Quaternion(),\n            renderer: new THREE.WebGLRenderer({ antialias: true }),\n        }\n\n        this.mainStuff.renderer.setSize(window.innerWidth / 2, window.innerHeight / 2) // Makes renderer half the size of the window\n\n        // Camera: initial values\n        this.mainStuff.camera.position.copy(this.cameraPos.relativeCamPos);\n        this.mainStuff.camera.lookAt(new THREE.Vector3(0, 0, 0));\n        this.mainStuff.camera.up.set(0, 0, 1);\n        this.mainStuff.camera.aspect = window.innerWidth / window.innerHeight;\n        this.mainStuff.camera.updateProjectionMatrix();\n\n        // Defines clock (used for animation) and sets time to 0\n        this.clockStuff = {\n            clock: new THREE.Clock(),\n            time: 0\n        }\n\n        // Initializes values for final position and quaternion of dragon\n        this.finalValues = {\n            finalDragPos: new THREE.Vector3(),\n            finalDragQ: new THREE.Quaternion()\n        }\n\n        // Initializes values for geometries and lights\n        this.geometries = {\n            // Cube geometry, materials, and mesh\n            cubeGeo: new THREE.BoxGeometry(1, 1, 1),\n            goalGeo: new THREE.BoxGeometry(1.1, 1.1, 1.1),\n            cubeGoalMat: new THREE.MeshLambertMaterial({ color: \"#4078E6\", transparent: true, opacity: 0.5 }),\n            dragonGoalMat: new THREE.MeshLambertMaterial({ color: \"#df67be\", transparent: true, opacity: 0.5 }),\n            goalShadow: new THREE.Mesh(new THREE.PlaneBufferGeometry(1, 1, 32),\n                new THREE.MeshBasicMaterial({ color: \"#686868\", transparent: true, opacity: 0.31, side: THREE.DoubleSide })),\n\n            // Light\n            light: new THREE.DirectionalLight(\"#ffffff\", 1.74),\n\n            // Plane geometry, material, and mesh\n            planeGeometry: new THREE.PlaneBufferGeometry(100, 100, 32),\n            planeMaterial: new THREE.MeshBasicMaterial(),\n            plane: new THREE.Mesh(),\n\n            // Dragon\n            dragonGeometry: new THREE.SphereGeometry(0.5, 32, 32),\n            dragon: new THREE.Mesh(new THREE.SphereGeometry(0.5, 32, 32), new THREE.MeshLambertMaterial({ color: \"#f56e90\" })),\n            dragonNose: new THREE.ArrowHelper(new THREE.Vector3(1, 0, 0), new THREE.Vector3(0, 0, 0), 1, \"#ff0000\", 0.5, 0.2),\n            geometry: new THREE.PlaneBufferGeometry(1, 1, 32),\n\n            // zCue plane\n            zCuePlane: new THREE.Mesh(new THREE.PlaneBufferGeometry(1, 1, 32), new THREE.MeshBasicMaterial({ color: \"#686868\", transparent: true, opacity: 0.8, side: THREE.DoubleSide }))\n        }\n\n        // Set the dragon's starting position and nose position from the world props\n        this.geometries.dragon.position.copy(this.props.world.dragon_pos).add(this.cameraPos.dragonOffset);\n\n        // Set starting values for the dragon's animation\n        this.dragAnimation = {\n            animStatus: Animation.null,\n            waitTime: 0,\n            animTime: 0,\n            animPerSec: .4\n        }\n\n        // OptimizationMaps for cubes that the dragon places\n        this.cubeOptMaps = {\n            available: new Map<string, THREE.Mesh[]>(),\n            filled: new Map<THREE.Vector3, THREE.Mesh>()\n        }\n\n        // OptimizationMaps for goal cubes defined by puzzleState\n        this.goalOptMaps = {\n            available: new Map<string, THREE.Mesh[]>(),\n            filled: new Map<THREE.Vector3, THREE.Mesh>()\n        }\n\n        // This is the texture of the cubes that are placed by the dragon\n        let cubeTexture = this.constantValues.loader.load(\"media/canvas_cube.png\");\n\n        // For loop to create the meshes of each cube and store them in cubeMats (array) and cubes (map)\n        this.storageMaps.cubeColors.forEach((color: string) => {\n            this.storageMaps.cubeMats.set(color, new THREE.MeshLambertMaterial({ color: color, map: cubeTexture }));\n            this.storageMaps.cubes.set(color, []);\n        });\n\n        // Sets the goal cubes map. Will contain all goal cubes in the game, like the \"cubes\" variable (map)\n        this.storageMaps.goalCubes.set(`#${this.geometries.cubeGoalMat.color.getHexString()}`, []);\n        this.storageMaps.goalCubes.set(`#${this.geometries.dragonGoalMat.color.getHexString()}`, []);\n\n        // Set puzzle initialization = false. This means that a puzzle has not been drawn on the display\n        this.puzzleInit = \"\";\n\n        this.cameraPos.relativeCamPosMag = this.cameraPos.relativeCamPos.length() - 0.5;\n\n        // Setting up light\n        this.geometries.light.position.set(-0.56, -0.32, 0.77);\n        this.mainStuff.scene.add(this.geometries.light);\n        this.mainStuff.scene.add(new THREE.AmbientLight(\"#404040\"));\n\n        // Setting up plane texture\n        let planeTexture = this.constantValues.loader.load(\"media/grass_texture.png\");\n        planeTexture.wrapS = THREE.RepeatWrapping;\n        planeTexture.wrapT = THREE.RepeatWrapping;\n        planeTexture.repeat.set(100, 100);\n        this.geometries.planeMaterial.setValues({ map: planeTexture, side: THREE.DoubleSide });\n        this.geometries.plane = new THREE.Mesh(this.geometries.planeGeometry, this.geometries.planeMaterial);\n        this.mainStuff.scene.add(this.geometries.plane);\n\n        // Adding dragon, dragon nose, and zCuePlane to scene\n        this.geometries.dragon.add(this.geometries.dragonNose);\n        this.mainStuff.scene.add(this.geometries.dragon);\n        this.mainStuff.scene.add(this.geometries.zCuePlane);\n\n        // Skybox + background texture\n        let path = \"media/skybox/\";\n        let format = \".jpg\";\n        // It's not clear to me three js does what it says it does with the six images, but I've got everything lining\n        // up via trial and error\n        let backgroundTexture = [path + \"px\" + format, path + \"nx\" + format,\n        path + \"py\" + format, path + \"ny\" + format,\n        path + \"pz\" + format, path + \"nz\" + format];\n        let cubeLoader = new THREE.CubeTextureLoader();\n        this.mainStuff.scene.background = cubeLoader.load(backgroundTexture);\n\n        // Initialize available maps for cubes, goal cubes, and dragon goal cubes\n        this.storageMaps.cubeColors.forEach((color: string) => {\n            this.cubeOptMaps.available.set(color, []); // Set each color in available map to an empty array\n        });\n\n        // Craete divRed\n        this.divRef = React.createRef();\n    }\n\n    // Position the shadow underneath the dragon\n    positionZCue() {\n        // Find nearest filled cell below dragon\n        // Use dragon.position (instead of this.props.dragon_pos), so zOffset is correct when animating\n        // Use Math.floor to compensate for dragonOffset\n        let zOffset = this.geometries.dragon.position.z;\n        let vec = new THREE.Vector3();\n        for (let z = Math.floor(this.geometries.dragon.position.z); z >= 0; z--) {\n            if (mapHasVector3(this.props.world.cube_map, vec.set(Math.floor(this.geometries.dragon.position.x), Math.floor(this.geometries.dragon.position.y), z))) {\n                zOffset -= z + (this.cameraPos.dragonOffset.z - this.cameraPos.cubeOffset.z);\n                this.geometries.zCuePlane.position.copy(this.geometries.dragon.position);\n                this.geometries.zCuePlane.translateZ(-zOffset + 0.1); // offset a bit to avoid z-fighting\n                return;\n            }\n        }\n        // Position when there's no cube below\n        this.geometries.zCuePlane.position.copy(this.geometries.dragon.position);\n        this.geometries.zCuePlane.translateZ(-zOffset + 0.1); // offset a bit to avoid z-fighting\n    };\n\n    // Turns degrees to radians given degrees (useful for camera rotations and tilts)\n    degreesToRadians(deg: number) {\n        return deg / 180 * Math.PI;\n    };\n\n    // Removes cube given the mesh and the color\n    removeCube(cube: THREE.Mesh, color: string) {\n        if (!mapHasVector3(this.props.world.cube_map, cube.position)) { // If the cube doesn't have a position property\n            this.mainStuff.scene.remove(cube); // Remove from scene\n            if (cube !== undefined) {\n                if (!this.cubeOptMaps.available.get(color)!.includes(cube)) {\n                    this.cubeOptMaps.available.get(color)!.push(cube);\n                }\n            }\n            this.cubeOptMaps.filled.delete(cube.position);\n            // const index = this.storageMaps.cubes.get(color)?.indexOf(cube);\n            // if (index) {\n            //     this.storageMaps.cubes.get(color)!.splice(index, 1);\n            // }\n        } else { // If the cube has a position property\n            this.cubeOptMaps.filled.set(cube.position, cube); // Set the filled object at that cube object to true\n        }\n    }\n\n    // Adds cube given the position and the material\n    addCube(cubePosition: THREE.Vector3, material: THREE.MeshLambertMaterial) {\n        if (!mapHasVector3(this.cubeOptMaps.filled, cubePosition)) { // If this cube position does not exist (is undefined) in filled\n            let existingCube = this.cubeOptMaps.available.get(`#${material.color.getHexString()}`)?.pop(); // Remove the last cube mesh from available list\n            if (existingCube) { // If there is a cube available....\n                existingCube.position.copy(cubePosition).add(this.cameraPos.cubeOffset); // ...Give it the position of the current cube\n                this.mainStuff.scene.add(existingCube);\n                this.cubeOptMaps.filled.set(existingCube.position, existingCube);\n                // const ind = this.storageMaps.cubeColors.indexOf(material.color.getHexString());\n                // this.props.world.cube_map.set(cubePosition.add(this.cameraPos.cubeOffset), ind);\n            } else { // If there isn't a cube mesh available....\n                let newCube: THREE.Mesh = new THREE.Mesh(this.geometries.cubeGeo, material) // ...Create a new cube mesh\n                newCube.position.copy(cubePosition).add(this.cameraPos.cubeOffset);\n                this.storageMaps.cubes.get(`#${material.color.getHexString()}`)!.push(newCube);\n                this.cubeOptMaps.filled.set(newCube.position, newCube);\n                this.mainStuff.scene.add(newCube);\n            }\n        }\n    }\n\n    // Removes puzzle cube given cube mesh\n    removePuzzleCube(cube: THREE.Mesh<THREE.BufferGeometry>) {\n        if (!mapHasVector3(this.props.world.cube_map, cube.position)) { // If the cube doesn't have a position property\n            this.mainStuff.scene.remove(cube); // Remove from scene\n            const index = this.storageMaps.goalCubes.get(this.geometries.cubeGoalMat.color.getHexString())?.indexOf(cube);\n            if (index) {\n                this.storageMaps.goalCubes.get(this.geometries.cubeGoalMat.color.getHexString())!.splice(index, 1);\n            }\n        }\n    }\n\n    // Removes dragon cube given cube mesh\n    removeDragonCube(cube: THREE.Mesh<THREE.BufferGeometry>) {\n        if (!mapHasVector3(this.props.world.cube_map, cube.position)) { // If the cube doesn't have a position property\n            this.mainStuff.scene.remove(cube); // Remove from scene\n            const index = this.storageMaps.goalCubes.get(this.geometries.dragonGoalMat.color.getHexString())?.indexOf(cube);\n            if (index) {\n                this.storageMaps.goalCubes.get(this.geometries.dragonGoalMat.color.getHexString())!.splice(index, 1);\n            }\n        }\n    }\n\n    // Adds puzzle cube given cube position\n    addPuzzleCube(cubePosition: THREE.Vector3) {\n        let newCube: THREE.Mesh = new THREE.Mesh(this.geometries.cubeGeo, this.geometries.cubeGoalMat) // ...Create a new cube mesh\n        newCube.position.copy(cubePosition).add(this.cameraPos.cubeOffset);\n        this.storageMaps.goalCubes.get(`#${this.geometries.cubeGoalMat.color.getHexString()}`)?.push(newCube);\n        this.mainStuff.scene.add(newCube);\n    }\n\n    // Adds dragon cube given cube position\n    addDragonCube(cubePosition: THREE.Vector3) {\n        let newCube: THREE.Mesh = new THREE.Mesh(this.geometries.cubeGeo, this.geometries.dragonGoalMat) // ...Create a new cube mesh\n        newCube.position.copy(cubePosition).add(this.cameraPos.dragonOffset);\n        this.storageMaps.goalCubes.get(`#${this.geometries.dragonGoalMat.color.getHexString()}`)?.push(newCube);\n        this.mainStuff.scene.add(newCube);\n    }\n\n    // Simulate function\n    // This function will activate the simulation every \"delta\" seconds\n    simulate(delta: number) {\n        // Checks to see if the simulator is running (if there are still animations left to do)\n        if (this.props.simulator.is_running()) {\n            this.clockStuff.time += delta; // Add delta to time variable (total time between each time entering second if statement below)\n            if (this.clockStuff.time > this.dragAnimation.animPerSec) { // If the total time is greater than the time you want...\n                this.props.simulator.execute_to_command(); // The command is executed\n                this.clockStuff.time = 0; // Reset time to 0\n                if (this.props.simulator.is_finished()) {\n                    this.props.puzzle?.check_completed(this.props);\n                }\n            }\n        }\n    }\n\n    // This function will update the display (what you see on the screen) using the this.dirty flag\n    updateDisplay() {\n        // Update dragon final position and animation times\n        this.finalValues.finalDragPos.copy(this.props.world.dragon_pos).add(this.cameraPos.dragonOffset);\n        this.finalValues.finalDragQ.setFromUnitVectors(new THREE.Vector3(1, 0, 0), this.props.world.dragon_dir); // 1,0,0 is default direction\n        // Hack to avoid weird dip when rotating to face -x direction\n        if (this.props.world.dragon_dir.x === -1) {\n            this.finalValues.finalDragQ.set(0, 0, 1, 0);\n        }\n\n        // waitTime is determined by taking 10% of the animPerSec\n        // animTime is determined by taking the other 90% of the animPerSec (or the maximum animation time if that value is too big)\n        this.dragAnimation.waitTime = this.dragAnimation.animPerSec * 0.1;\n        this.dragAnimation.animTime = Math.min(this.dragAnimation.animPerSec * 0.9, this.constantValues.MAX_ANIMATION_TIME);\n        this.dragAnimation.animStatus = Animation.waiting;\n        if (this.dragAnimation.animTime < this.constantValues.MIN_ANIMATION_TIME) { // If animTime is lower than min animTime...\n            this.dragAnimation.animStatus = Animation.animating; // ...set Animation enum to animating\n        }\n\n        // Placing puzzle cubes!\n        if (this.props.puzzle && this.puzzleInit !== this.props.puzzle.name) { // If the state has a puzzle and it hasn't been initielized yet\n\n            // First remove dragon cubes already placed...\n            if (this.storageMaps.goalCubes.get(`#${this.geometries.dragonGoalMat.color.getHexString()}`)) {\n                this.storageMaps.goalCubes.get(`#${this.geometries.dragonGoalMat.color.getHexString()}`)!.forEach((cube: THREE.Mesh) => { // For each cube.position in the targetFilled map\n                    this.removeDragonCube(cube); // Remove dragon puzzle cubes\n                });\n            }\n\n            // Remove goal cubes already placed...\n            if (this.storageMaps.goalCubes.get(`#${this.geometries.cubeGoalMat.color.getHexString()}`)) {\n                this.storageMaps.goalCubes.get(`#${this.geometries.cubeGoalMat.color.getHexString()}`)!.forEach((cube: THREE.Mesh) => { // For each cube.position in the targetFilled map\n                    this.removePuzzleCube(cube); // Remove the puzzle cube from the map\n                });\n            }\n\n            // Remove user cubes already placed...\n            this.storageMaps.cubeColors.forEach((color: string) => {\n                if (this.storageMaps.cubes.get(color)) {\n                    this.storageMaps.cubes.get(color)!.forEach((cube: THREE.Mesh) => { // For each cube.position in the targetFilled map\n                        this.removeCube(cube, color); // Remove the puzzle cube from the map\n                    });\n                }\n            });\n\n            // ...then start adding in the goal cubes depending on goal type\n            this.props.puzzle.goals.forEach((goal: GoalInfo) => { // Iterate through each cube that should be placed for the puzzle\n                if (goal.kind === GoalInfoType.AddCube) { // If goal.kind is AddCube...\n                    if (goal.position) { //  And if there is a goal.position...\n                        this.addPuzzleCube(goal.position); // Add puzzle cube\n                    }\n                }\n                if (goal.kind === GoalInfoType.DragonPos) {\n                    if (goal.position) {\n                        this.addDragonCube(goal.position);\n                    }\n                }\n            });\n            this.puzzleInit = this.props.puzzle.name; // Set puzzleInit to the puzzle name to show that this puzzle has been initialized\n\n        }\n\n        // This for loop checks for cubes that are no longer in the cube_map and should be removed\n        this.storageMaps.cubeColors.forEach((color: string) => { // Iterate over each color\n            this.storageMaps.cubes.get(color)!.forEach((cube: THREE.Mesh) => { // For each cube (mesh with material and position) in the specified color\n                this.removeCube(cube, color);\n            });\n        });\n\n        // Loop over all cubes in cube map\n        // This loop will add a cube to the display if the cube doesn't have a position\n        for (let [cubePosition, colorInd] of this.props.world.cube_map) {\n            let color: string = this.storageMaps.cubeColors[colorInd];\n            this.addCube(cubePosition, this.storageMaps.cubeMats.get(color)!);\n        }\n        // After display is updated, the world state is no longer dirty\n        this.props.world.mark_clean();\n    }\n\n    // Function that displays things after program \"did mount\"\n    componentDidMount() {\n\n        // Without this, the image doesn't show\n        this.divRef.current?.appendChild(this.mainStuff.renderer.domElement);\n\n        // This animates the scene. In the animate function, the scene and camera are rendered\n        let animate = () => {\n            requestAnimationFrame(animate);\n            // tDelta represents the time that has passed since the last time getDelta() was called\n            let tDelta = this.clockStuff.clock.getDelta();\n\n            // Animation\n            this.simulate(tDelta);\n\n            // Update display\n            if (this.props.world.dirty) {\n                this.updateDisplay();\n            };\n\n            this.positionZCue();\n\n            let z = this.constantValues.WOBBLE_MAGNITUDE * Math.sin(this.clockStuff.clock.elapsedTime * 4 * Math.PI / this.constantValues.WOBBLE_PERIOD);\n            let y = this.constantValues.WOBBLE_MAGNITUDE * Math.cos(this.clockStuff.clock.elapsedTime * 2 * Math.PI / this.constantValues.WOBBLE_PERIOD);\n            let v = new THREE.Vector3(0, y, z);\n\n            // Smoothens out the dragon's movement and animation\n            // Waiting...\n            if (this.dragAnimation.animStatus === Animation.waiting) { // If animStatus is waiting...\n                this.dragAnimation.waitTime -= tDelta; // Substract time since last iteration\n                if (this.dragAnimation.waitTime <= 0) { // If waitTime gets below 0...\n                    tDelta += this.dragAnimation.waitTime; // Substract waitTime from tDelta\n                    this.dragAnimation.animStatus = Animation.animating; // animSatus is animating!\n                }\n            }\n            // Animating...\n            if (this.dragAnimation.animStatus === Animation.animating) {\n                // lerp and slerp gradually towards the dragon final position and direction\n                this.geometries.dragon.position.lerp(this.finalValues.finalDragPos, Math.min(tDelta / this.dragAnimation.animTime, 1));\n                this.geometries.dragon.quaternion.slerp(this.finalValues.finalDragQ, Math.min(tDelta / this.dragAnimation.animTime, 1));\n                this.dragAnimation.animTime -= tDelta; // Subtract tDelta from animTime to animate on time\n                if (this.dragAnimation.animTime <= 0) { // If animTime < 0...\n                    this.geometries.dragon.position.copy(this.finalValues.finalDragPos); // End the animation, send dragon to final positions\n                    this.geometries.dragon.quaternion.copy(this.finalValues.finalDragQ);\n                    this.dragAnimation.animStatus = Animation.done;\n                }\n            }\n\n            // Smoothly move the camera towards its position relative to the dragon\n            let newCamPos = v.add(this.cameraPos.relativeCamPos).add(this.geometries.dragon.position);\n            this.mainStuff.camera.position.lerp(newCamPos, this.constantValues.TRANSLATION_SMOOTHNESS * tDelta);\n\n            // Smoothly rotate the camera to look at the dragon\n            this.mainStuff.camera.lookAt(this.geometries.dragon.position);\n            let newCamQ = this.mainStuff.camera.quaternion.clone();\n            let oldCamQ = this.mainStuff.camera.quaternion.clone();\n            this.mainStuff.camera.quaternion.copy(oldCamQ);\n            this.mainStuff.camera.quaternion.slerp(newCamQ, this.constantValues.ROTATION_SMOOTHNESS * tDelta);\n\n            // Render everything\n            this.mainStuff.renderer.render(this.mainStuff.scene, this.mainStuff.camera);\n        };\n        animate();\n    }\n\n    // This method is passed into the Slider file. Each time it's called, the animPerSec changes\n    handleSlideChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        // use value from event to set animations per second\n        this.dragAnimation.animPerSec = parseFloat(e.target.value);\n    }\n\n    // ZoomIn method passed to cameraPositioning file. Manipulates relativeCamPos by .8\n    zoomInCamera = (e: React.MouseEvent<HTMLElement>) => {\n        if (this.cameraPos.relativeCamPosMag > 5) { // Ensures that the camera doesn't zoom in too far\n            this.cameraPos.relativeCamPos.multiplyScalar(.8);\n            this.cameraPos.relativeCamPosMag = this.cameraPos.relativeCamPos.length() - 0.5; // Updates realtiveCamPosMag\n        }\n    }\n\n    // ZoomOut method passed to cameraPositioning file. Manipulates relativeCamPos by 1.2\n    zoomOutCamera = (e: React.MouseEvent<HTMLElement>) => {\n        if (this.cameraPos.relativeCamPosMag < 100) { // Ensures the camera doesn't zoom out too far\n            this.cameraPos.relativeCamPos.multiplyScalar(1.2);\n            this.cameraPos.relativeCamPosMag = this.cameraPos.relativeCamPos.length() - 0.5; // Updates realtiveCamPosMag\n        }\n    }\n\n    // RotateRight method passed into cameraPositioning\n    rotateCameraRight = (e: React.MouseEvent<HTMLElement>) => {\n        let q = new THREE.Quaternion();\n        q.setFromAxisAngle(this.cameraPos.upVector, this.degreesToRadians(10)); // Create now quaternion based off of current dragon pos and 10 degrees\n        this.cameraPos.relativeCamPos.applyQuaternion(q);\n    }\n\n    // RotateLeft method passed into cameraPositioning\n    rotateCameraLeft = (e: React.MouseEvent<HTMLElement>) => {\n        let q = new THREE.Quaternion();\n        q.setFromAxisAngle(this.cameraPos.upVector, this.degreesToRadians(-10)); // Create now quaternion based off of current dragon pos and -10 degrees\n        this.cameraPos.relativeCamPos.applyQuaternion(q);\n    }\n\n    // TiltUp method passed into cameraPositioning\n    tiltCameraUp = (e: React.MouseEvent<HTMLElement>) => {\n        let q = new THREE.Quaternion();\n        // Sets the new quaternion to the current camPos and crosses it with the \"upVector\" (0, 0, 1)\n        q.setFromAxisAngle(this.cameraPos.relativeCamPos.clone().cross(this.cameraPos.upVector).normalize(), this.degreesToRadians(10));\n        this.cameraPos.relativeCamPos.applyQuaternion(q);\n    }\n\n    // TiltDown method passed into cameraPositioning\n    tiltCameraDown = (e: React.MouseEvent<HTMLElement>) => {\n        let q = new THREE.Quaternion();\n        // Sets the new quaternion to the current camPos and crosses it with the \"upVector\" (0, 0, 1)\n        q.setFromAxisAngle(this.cameraPos.relativeCamPos.clone().cross(this.cameraPos.upVector).normalize(), this.degreesToRadians(-10));\n        this.cameraPos.relativeCamPos.applyQuaternion(q);\n    }\n\n    render() {\n        return (\n            <div id=\"three-js\" ref={this.divRef}>\n                <div className=\"game-controls-bar-container\">\n                    <div className=\"camera-control-category\">\n                        <div className=\"game-control_title\"><h4>Tilt</h4></div>\n                        <div className=\"game-control_buttons\">\n                            <CameraTiltDown onClickFunction={this.tiltCameraDown} />\n                            <CameraTiltUp onClickFunction={this.tiltCameraUp} />\n                        </div>\n                    </div>\n                    <div className=\"camera-control-category\">\n                        <div className=\"game-control_title\"><h4>Rotate</h4></div>\n                        <div className=\"game-control_buttons\">\n                            <CameraRotateLeft onClickFunction={this.rotateCameraLeft} />\n                            <CameraRotateRight onClickFunction={this.rotateCameraRight} />\n                        </div>\n                    </div>\n                    <div className=\"camera-control-category\">\n                        <div className=\"game-control_title\"><h4>Zoom</h4></div>\n                        <div className=\"game-control_buttons\">\n                            <CameraZoomIn onClickFunction={this.zoomInCamera} />\n                            <CameraZoomOut onClickFunction={this.zoomOutCamera} />\n                        </div>\n                    </div>\n                    <div className=\"camera-control-category\">\n                        <div className=\"game-control_title\"><h4>Change Speed</h4></div>\n                        <div className=\"btn-time-slider\">\n                            <Slider onChange={this.handleSlideChange} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","/* FILENAME:    Slider.tsx\n * DESCRIPTION: \n *      This file contains the slider range that is used to control dragon speed.\n *      Child of Display.tsx\n * DATE:    08/19/2021\n * AUTHOR:      Teagan Johnson   Aaron Bauer    Katrina Li\n */\nimport React from 'react';\n\ntype SliderVals = {\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nexport default class Slider extends React.Component<SliderVals> {\n    render() {\n        return (\n            <div className=\"slider-container\">\n                <div className=\"slider-buttons-container\">\n                    <div className=\"slider-left-header\">\n                        <h6>Fast</h6>\n                    </div>\n                    <input type=\"range\" min={0.01} max={2} step={0.01} className=\"slider\" onChange={this.props.onChange} />\n                    <div className=\"slider-right-header\">\n                        <h6>Slow</h6>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n};","/* FILENAME:    CameraPositioning.tsx\n * DESCRIPTION: \n *      This file contains the camera control functions.\n *      The 6 camera control functions are contained in this file and used in Display.tsx.\n *      Child of Display.tsx\n * DATE:    08/19/2021\n * AUTHOR:      Teagan Johnson   Aaron Bauer    Katrina Li\n */\nimport React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n// Type that holds the onClick method\ntype CameraVals = {\n    onClickFunction: (e: React.MouseEvent<HTMLElement>) => void;\n}\n\n// Creates button for zooming in\nfunction CameraZoomIn(props: CameraVals) {\n    return (\n        <div>\n            <button className=\"ZoomIn\" onClick={props.onClickFunction}><h1><FontAwesomeIcon icon=\"search-plus\"/></h1></button>\n        </div>\n    );\n};\n\n// Creates button for zooming out\nfunction CameraZoomOut(props: CameraVals) {\n    return (\n        <div>\n            <button className=\"ZoomOut\" onClick={props.onClickFunction}> <h1><FontAwesomeIcon icon=\"search-minus\"/></h1></button>\n        </div>\n    );\n};\n\n// Creates button for tilting up\nfunction CameraTiltUp(props: CameraVals) {\n    return (\n        <div>\n            <button className=\"TiltUp\" onClick={props.onClickFunction}><h1><FontAwesomeIcon icon=\"arrow-up\"/></h1></button>\n        </div>\n    );\n};\n\n// Creates button for tilting down\nfunction CameraTiltDown(props: CameraVals) {\n    return (\n        <div>\n            <button className=\"TiltDown\" onClick={props.onClickFunction}><h1><FontAwesomeIcon icon=\"arrow-down\"/></h1></button>\n        </div>\n    );\n};\n\n\n// Creates button for rotating right\nfunction CameraRotateRight(props:CameraVals) {\n    return (\n        <div>\n            <button className=\"RotateRight\" onClick={props.onClickFunction}><h1><FontAwesomeIcon icon=\"redo\"/></h1></button>\n        </div>\n    );\n};\n\n// Creates button for rotating left\nfunction CameraRotateLeft(props: CameraVals) {\n    return (\n        <div>\n            <button className=\"RotateLeft\" onClick={props.onClickFunction}><h1><FontAwesomeIcon icon=\"undo\"/></h1></button>\n        </div>\n    );\n\n};\n\nexport {\n    CameraZoomIn,\n    CameraZoomOut,\n    CameraRotateRight,\n    CameraRotateLeft,\n    CameraTiltUp,\n    CameraTiltDown\n}","/* FILENAME:    RunButton.tsx\r\n * DESCRIPTION: \r\n *      This file contains the run button that executes the dragon movement.\r\n *      Child of App.tsx\r\n * DATE:    08/19/2021\r\n * AUTHOR:      Teagan Johnson   Aaron Bauer    Katrina Li\r\n */\r\nimport { GameState } from './App';\r\n\r\n// Props of the run button include the gamestate and the on click function\r\ntype RunProps = {\r\n    gamestate: GameState\r\n    onClick: () => void\r\n}\r\n\r\nexport function Run(props: RunProps) {\r\n    let msg = props.gamestate.reset ? \"Reset\" : \"Run\";\r\n    let col = props.gamestate.reset ? \"reset\" : \"run\";\r\n    return (\r\n        <button id=\"game-control-btn-playback\" className=\"run-button-back\" onClick={props.onClick} value={col}>\r\n            <span className=\"run-button-front\" title={col}>\r\n                {msg}\r\n            </span>\r\n        </button>\r\n    )\r\n}\r\n","/* FILENAME:    InstructionsGoal.tsx\r\n * DESCRIPTION: \r\n *      This file contains a function that returns a puzzle/sandbox instruction as a paragraph element\r\n * DATE:    08/19/2021\r\n * AUTHOR:      Aaron Bauer    Katrina Li    Teagan Johnson\r\n */\r\nimport { GameState } from './App';\r\nimport { SANDBOX_STATE } from './PuzzleState';\r\n\r\ntype InstructionsProps = {\r\n    gamestate: GameState //passed from App\r\n}\r\n\r\n\r\n// returns a correct instruction as a paragraph element when the user solves a puzzle or plays in sandbox mode\r\nexport function InstructionsGoal(props: InstructionsProps) {\r\n    if (props.gamestate.puzzle === SANDBOX_STATE) {\r\n        return <p>Welcome to Sandbox mode! Create anything you like!</p>;\r\n    } else if (props.gamestate.puzzle) {\r\n        return <p dangerouslySetInnerHTML={{ __html: props.gamestate.puzzle?.instructions }} />;\r\n    } else {\r\n        return <p></p>;\r\n    }\r\n}","/* FILENAME:    PuzzleManager.ts\n * DESCRIPTION: \n *      This file contains the PuzzleManager class that loads\n *      and store puzzles in pack jsons, then tracks the current puzzle via various indexes\n * DATE:    08/19/2021\n * AUTHOR:      Aaron Bauer    Katrina Li    Teagan Johnson\n */\n/* eslint-disable */\nimport _ from \"lodash\"\n/* eslint-enable */\nimport { PuzzleSpec } from \"./PuzzleState\"\n\ntype PuzzleConnection = {\n    source: string\n    dest: string\n}\n\n// A puzzle sequence is a set of puzzles related to a particular topic\ntype PuzzleSequence = {\n    name: string // display name\n    tag: string // internal name\n    puzzles: PuzzleSpec[] // list of parsed PuzzleSpecs for the puzzles in the sequence\n    connections: PuzzleConnection[] // connections between puzzles (i.e., edges in a graph)\n}\n\n// a pack consists of a name and some number of puzzle sequences\nexport type PuzzlePack = {\n    name: string\n    seqs: PuzzleSequence[] \n}\n\n// a puzzle have its pack, sequence and its own puzzle index\ntype PuzzleIndex = {\n    pack_index: number\n    seq_index: number\n    puz_index: number\n}\n\n/* \n * The PuzzleManager will load public/packs/packs.json to get a list of the jsons for each pack\n * It will then load and store each of those pack jsons in the array `packs`\n * PuzzleManager also tracks the current puzzle via indexes for the current\n * pack, current sequence, and current puzzle.\n * See comments on the types above for the contents of a pack.\n */\n\nexport default class PuzzleManager {\n    packs: PuzzlePack[]\n    current_puzzle: PuzzleIndex\n    completed_puzzle: Map<string, PuzzleSpec[]> //the map of completed puzzles\n\n    constructor() {\n        this.packs = []\n        this.current_puzzle = {\n            pack_index: 0,\n            seq_index: 0,\n            puz_index: 0\n        }\n        this.completed_puzzle = new Map<string, PuzzleSpec[]>();//key = name of PuzzlePack, value = a puzzle\n    }\n\n    //checks if current puzzle is the last puzzle completed in a sequence\n    check_complete_pack() {\n        let current_sequence = this.get_current_seq().puzzles;\n        let current_pack = this.get_current_pack().name;\n        for (let puzzle of current_sequence) {\n            let puzzles = this.completed_puzzle.get(current_pack);\n            if (puzzles) {\n                if (!puzzles.includes(puzzle)) {\n                    return false;\n                }\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    //adds current puzzle to completed_puzzle\n    complete_puzzle() {\n        let puzzlePackName = this.get_current_pack().name;\n\n        let puzzles = this.completed_puzzle.get(puzzlePackName);\n\n        if (puzzles === undefined) {\n            //if current puzzle is the first one in its own pack that has been completed\n            this.completed_puzzle.set(puzzlePackName, [this.get_current_puzzle()]);\n        } else {\n            let puzzleToAdd = this.get_current_puzzle();\n            puzzles.push(puzzleToAdd);\n            this.completed_puzzle.set(puzzlePackName, puzzles);\n        }\n\n    }\n\n    //used to test complete_puzzle and check player progress\n    find_completed_puzzle() {\n        let completed_puzzle_array = new Array<string>();\n        //console.log(\"completed puzzles: \")\n        for (let pack of this.completed_puzzle.keys()) {\n            let puzzles = this.completed_puzzle.get(pack);\n            if (puzzles) {\n                for (let puzzle of puzzles) {\n                    completed_puzzle_array.push(puzzle.name);\n                }\n            }\n        }\n        return completed_puzzle_array;\n    }\n\n    set_completed_puzzle(cp: Map<string, PuzzleSpec[]>) {\n        this.completed_puzzle = cp;\n    }\n\n    set_pack(index: number) {\n        if (index !== this.current_puzzle.pack_index) {\n            this.current_puzzle = {\n                pack_index: index,\n                seq_index: 0,\n                puz_index: 0\n            }\n        }\n    }\n\n    // assumes `tag` identifies a unique puzzle within the current pack\n    set_puzzle(tag: string) {\n        let found = false;\n        this.get_current_pack().seqs.forEach((seq, i) => {\n            seq.puzzles.forEach((spec, j) => {\n                if (spec.tag === tag) {\n                    this.current_puzzle = {\n                        pack_index: this.current_puzzle.pack_index,\n                        seq_index: i,\n                        puz_index: j\n                    }\n                    found = true;\n                }\n            });\n        });\n\n        if (!found) {\n            throw new Error(`No puzzle with tag=${tag} exists within the current pack ${this.get_current_pack().name}`);\n        }\n    }\n\n    // returns a list of the tags for all the puzzles in the current pack\n    get_all_puzzles(): string[] {\n        let puzzles: string[] = [];\n        for (let seq of this.get_current_pack().seqs) {\n            puzzles.push(...seq.puzzles.map(ps => ps.tag));\n        }\n        // console.log(\"puzzles: \" + puzzles);\n        return puzzles;\n    }\n\n    get_current_puzzle(): PuzzleSpec {\n        return this.get_current_seq().puzzles[this.current_puzzle.puz_index];\n    }\n\n    get_current_seq(): PuzzleSequence {\n        return this.get_current_pack().seqs[this.current_puzzle.seq_index];\n    }\n\n    get_current_pack(): PuzzlePack {\n        return this.packs[this.current_puzzle.pack_index];\n    }\n\n    // returns the next puzzle in the sequence, or the first puzzle in the next sequence\n    next_puzzle(): PuzzleSpec | undefined {\n        this.current_puzzle.puz_index = this.current_puzzle.puz_index + 1;\n        // check if we've reached the end of the current sequence\n        if (this.current_puzzle.puz_index === this.get_current_seq().puzzles.length) {\n            this.current_puzzle.puz_index = 0;\n            this.current_puzzle.seq_index++;\n            // check if we've reached the end of the current pack\n            if (this.current_puzzle.seq_index === this.get_current_pack().seqs.length) {\n                return;\n            }\n        }\n        return this.get_current_seq().puzzles[this.current_puzzle.puz_index];\n    }\n\n    // return the granted blocks which should be put in the toolbox for a puzzle\n    get_granted_blocks(devMode: boolean) {\n        console.log(\"called ggb\");\n        let granted_blocks: string[] = [];\n        if (devMode) {\n            for (let pack of this.packs) {\n                for (let seq of pack.seqs) {\n                    for (let puzzle of seq.puzzles) {\n                        let blocks = puzzle.library.granted;\n                        for (let block of blocks) {\n                            if (!granted_blocks.includes(block))\n                                granted_blocks.push(block);\n                        }\n                    }\n                }\n            }\n        } else {\n            for (let pack of this.completed_puzzle.keys()) {\n                let puzzles = this.completed_puzzle.get(pack);\n\n                if (puzzles) {\n                    for (let puzzle of puzzles) {\n                        let blocks = puzzle.library.granted;\n                        for (let block of blocks) {\n                            if (!granted_blocks.includes(block))\n                                granted_blocks.push(block);\n                        }\n                    }\n                }\n            }\n        }\n        // include anything required or granted by the current puzzle\n        if (this.get_current_puzzle()) {\n            for (let block of this.get_current_puzzle().library.required.concat(this.get_current_puzzle().library.granted)) {\n                if (!granted_blocks.includes(block))\n                    granted_blocks.push(block);\n            }\n        }\n        console.log(\"granted blocks: \" + granted_blocks);\n        return granted_blocks;\n    }\n\n    load_packs(pack_list: { packs: string[] }) {\n        return new Promise<Promise<PuzzlePack>[]>((resolve) => {\n            let pack_promises: Promise<PuzzlePack>[] = []\n            for (let packfile of pack_list.packs) {\n                pack_promises.push(fetch(`packs/${packfile}`)\n                    .then(response => response.json())\n                    .catch(error => {\n                        console.error(`Problem encountered loading packs/${packfile}: ${error}`);\n                    }));\n            }\n            resolve(pack_promises);\n        });\n    }\n\n    // loads each puzzle in each sequence in each pack\n    load_all_puzzles() {\n        let promises: Promise<PuzzleSpec>[] = [];\n        for (let pack of this.packs) {\n            for (let seq of pack.seqs) {\n                // HACK: seqs is a list of strings when initially parsed from JSON,\n                // we are replacing those with PuzzleStates here\n                ((seq.puzzles as unknown) as string[]).forEach((tag, index) => {\n                    promises.push(fetch(`puzzles/${tag}.json`)\n                        .then(response => response.json())\n                        .then(json => seq.puzzles[index] = json)\n                        .catch(error => console.error(`Could not load spec from puzzles/${tag}.json: ${error}`)));\n                });\n            }\n        }\n        return Promise.all(promises);\n    }\n\n    // when PuzzleManager is initialized, it loads all the puzzles\n    // the nested promise structure is a little wonky, and doesn't handle errors as gracefully as I'd like\n    // but it does work\n    initialize() {\n        return fetch(\"packs/packs.json\")\n            .then(response => { return response.json() })\n            .then(this.load_packs)\n            .then(pack_promises => Promise.all(pack_promises))\n            .then(packs => this.packs = packs)\n            .then(() => this.load_all_puzzles())\n            .catch(error => console.error(`Problem encountered loading packs/packs.json: ${error}`));\n    }\n}","/* FILENAME:    FontAwesomeIcons.tsx\n * DESCRIPTION: \n *      This file imports the 6 camera control icons into one file.\n *      Without this file, we would have to import each icon into every file that uses them\n * DATE:    08/19/2021\n * AUTHOR:      Teagan Johnson   Aaron Bauer    Katrina Li\n */\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { faSearchMinus, faSearchPlus, faRedo, faUndo, faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(fab, faSearchMinus, faSearchPlus, faRedo, faUndo, faArrowUp, faArrowDown);","/* FILENAME:    App.tsx\n * DESCRIPTION: \n *      This file manages all other source and puzzle files. It sets up different components \n *      in the page, its state contains info about all puzzles, simulator, world and ViewType.\n * DATE:    08/19/2021\n * AUTHOR:      Aaron Bauer    Katrina Li    Teagan Johnson\n */\nimport React from 'react';\nimport BlocklyComp, { blocks_to_text, text_to_blocks } from './BlocklyComp';\nimport Display from './Display';\nimport WorldState from './WorldState';\nimport { load_stdlib, IncrementalSimulator } from './Simulator';\nimport parse, { EMPTY_PROGRAM, Program, SyntaxError } from './Parser';\nimport PuzzleState, { SANDBOX_STATE } from './PuzzleState';\nimport { Run } from './RunButton';\nimport { InstructionsGoal } from './InstructionsGoal';\nimport _ from 'lodash';\nimport PuzzleManager from './PuzzleManager';\nimport \"./css/index.css\"\nimport \"./FontAwesomeIcons\";\nimport PuzzleSelect from './PuzzleSelect';\n\n\nexport type GameState = {\n  program: Program\n  world: WorldState\n  puzzle?: PuzzleState\n  simulator: IncrementalSimulator\n  reset: boolean\n  lastSavedWorld: WorldState | undefined\n  devMode: boolean\n  view: ViewType\n}\n\nexport enum ViewType {\n  Loading = \"loading\",\n  Normal = \"normal\",\n  PuzzleSelect = \"puzzleSelect\",\n  SequencePause = \"sequencePause\", // when a user finished solving the last puzzle in a sequence\n  PuzzlePause = \"puzzlePause\", // when a user finished solving a puzzle, shows a congratulation box\n  LearnMore = \"learnMore\" // lets the user switch between puzzle packs\n}\n\n/* \n * The App sets up different components in the page. Its state contains info about all puzzles\n * (with extra info about the current one), simulator, world and ViewType.\n * It also passes the entire state to Display and BlocklyComp (large components), as well as\n * PuzzleSelect, Runbutton and InstructionsGoal (small components)\n */\n\nclass App extends React.Component<{}, GameState> {\n  puzzle_manager: PuzzleManager\n\n  constructor(props: {}) {\n    super(props);\n    load_stdlib();\n\n    this.state = {\n      program: EMPTY_PROGRAM,\n      reset: false,\n      world: new WorldState(),\n      simulator: new IncrementalSimulator(new WorldState(), EMPTY_PROGRAM),\n      lastSavedWorld: undefined,\n      view: ViewType.Loading,\n      devMode: false\n    }\n    this.puzzle_manager = new PuzzleManager();\n    // this.clean_progress();\n    this.load_last_progress();\n  }\n\n  // the learn more button, lets the user access a different puzzle pack\n  learn_more(pack: number) {\n    this.puzzle_manager.set_pack(pack);\n    this.setState({\n      view: ViewType.Normal\n    });\n    this.load_puzzle(`puzzles/${this.puzzle_manager.get_current_puzzle().tag}.json`);\n\n  }\n\n  // stores which puzzles the user finishes in localStorage\n  save_progress() {\n    let progress = JSON.stringify([...this.puzzle_manager.completed_puzzle]);\n    window.localStorage.setItem(\"progress\", progress);\n\n    // commenting this out for now, as it breaks puzzle progression (next_puzzle() advances to the next puzzle, causing a double advance)\n    // let next_puzzle = JSON.stringify([this.puzzle_manager.next_puzzle()]);\n    // window.localStorage.setItem(\"puzzle\", next_puzzle);\n  }\n\n  // used for developing purposes, cleans the user's progress in local storage\n  clean_progress() {\n    window.localStorage.removeItem(\"progress\");\n    this.puzzle_manager.completed_puzzle.clear();\n  }\n\n\n  // search for the user's progress in local storage. If the user had completed a puzzle before,\n  // mark it as completed again\n  load_last_progress() {\n    // return window.localStorage.getItem(\"progress\");\n    let progress_string = window.localStorage.getItem(\"progress\");\n    if (progress_string) {\n      this.puzzle_manager.set_completed_puzzle(new Map(JSON.parse(progress_string)));\n    }\n\n    // let puzzle_string = window.localStorage.getItem(\"puzzle\");\n    // if (puzzle_string) {\n    //   // console.log(`puzzles/${puzzle.tag}.json`);\n\n    //   this.load_puzzle(`puzzles/${(new Map(JSON.parse(puzzle_string))).tag}.json`);\n    // } else {\n    //   this.load_sandbox();\n    // }\n  }\n\n  // stores the blocks that the user puts in sandbox mode\n  save_sandbox() {\n    window.localStorage.setItem(\"sandbox\", blocks_to_text());\n  }\n\n  // check whether the user run in sandbox mode before, if so, load the blocks that had been run\n  load_last_sandbox() {\n    let program = window.localStorage.getItem(\"sandbox\");\n    if (program) {\n      console.log(\"program: \" + program);\n      this.setState({program: parse(program) as Program}, () => {\n        text_to_blocks(program!);\n      });\n    }\n    else {\n      text_to_blocks('');\n    }\n  }\n\n  // initiates PuzzleState and puzzle manager, sets the current puzzle, change the state according to puzzle\n  load_puzzle(puzzle_file: string) {\n    PuzzleState.make_from_file(puzzle_file, () => this.win_puzzle()).then(p => {\n      let sim = new IncrementalSimulator(p.start_world, EMPTY_PROGRAM);\n      const ast = parse(p.start_code);\n      if (ast instanceof SyntaxError) {\n        console.error(`Syntax Error: ${ast}`);\n      } else {\n        this.puzzle_manager.set_puzzle(p.tag);\n        this.setState({\n          program: ast,\n          world: p.start_world,\n          puzzle: p,\n          simulator: sim,\n          view: ViewType.Normal,\n          reset: false,\n          lastSavedWorld: undefined\n        });\n        text_to_blocks(p.start_code);\n      }\n    });\n  }\n\n  // set the simulator and state to sandbox mode\n  load_sandbox() {\n    this.load_last_progress();\n    let world = new WorldState();\n    world.mark_dirty();\n    let sim = new IncrementalSimulator(world, parse('') as Program);\n    this.setState({\n      world: world,\n      puzzle: SANDBOX_STATE,\n      simulator: sim,\n      view: ViewType.Normal,\n      reset: false,\n      lastSavedWorld: undefined\n    })\n    // HACK: make the puz_index invalid, so that get_current_puzzle() returns undefined\n    this.puzzle_manager.current_puzzle.puz_index = -1;\n    this.puzzle_manager.get_granted_blocks(false);\n    this.load_last_sandbox();\n  }\n\n  // when the user completes a puzzle\n  win_puzzle() {\n    this.puzzle_manager.complete_puzzle();\n    //this.puzzle_manager.print_completed_puzzle();\n\n    if (this.puzzle_manager.check_complete_pack()) {\n      this.setState({\n        view: ViewType.SequencePause\n      });\n      // this.load_sandbox();\n    } else {\n      this.setState({\n        view: ViewType.PuzzlePause\n      })\n    }\n    this.save_progress();\n  }\n\n  // only used for developers\n  toggle_dev_mode() {\n    this.setState({\n      devMode: !this.state.devMode\n    });\n  }\n\n  componentDidMount() {\n    this.puzzle_manager.initialize()\n      .then(() => {\n        this.setState({\n          view: ViewType.Normal\n        }, () => this.load_puzzle(`puzzles/${this.puzzle_manager.get_current_puzzle().tag}.json`));\n      })\n  }\n\n\n  // run the user's current block program\n  run_program() {\n    if (!this.state.reset) { // run program\n      this.setState({\n        lastSavedWorld: _.cloneDeep(this.state.world)\n      })\n      const program = blocks_to_text();\n      const ast = parse(program);\n      if (ast instanceof SyntaxError) {\n        console.error(`Syntax Error: ${ast}`);\n      } else {\n        this.setState({\n          simulator: new IncrementalSimulator(this.state.world, ast)\n        }, () => this.state.simulator.set_running());\n        if (this.state.puzzle === SANDBOX_STATE) {\n          this.save_sandbox();\n        }\n      }\n    }\n    else { // reset \n      this.setState({\n        world: this.state.lastSavedWorld!,\n        lastSavedWorld: undefined\n      }, () => { this.state.world.mark_dirty() })\n    }\n\n    //switch the button \n    this.setState({\n      reset: !this.state.reset\n    });\n  }\n\n  // when user clicks the \"continue\" button after completing a puzzle\n  continue() {\n    this.setState({\n      view: ViewType.Normal\n    });\n    let puzzle = this.puzzle_manager.next_puzzle();\n    if (puzzle) {\n      this.load_puzzle(`puzzles/${puzzle.tag}.json`);\n    } else {\n      this.load_sandbox();\n    }\n\n  }\n\n  // called when a new pack is selected via the drop-down\n  on_change_pack(event: React.ChangeEvent<HTMLSelectElement>) {\n    this.puzzle_manager.set_pack(parseInt(event.target.value));\n    this.load_puzzle(`puzzles/${this.puzzle_manager.get_current_puzzle().tag}.json`);\n  }\n\n  // return a string that would show in a 'Current puzzle' box at the top right corner\n  current_puzzle() {\n    if (this.state.puzzle === SANDBOX_STATE) {\n      return \"Sandbox\";\n    }\n    else {\n      return JSON.stringify(this.state.puzzle?.name);\n    }\n  }\n\n\n  render() {\n\n    if (this.state.view === ViewType.Loading) {\n      return (\n        <h1>Loading...</h1>\n      )\n    }\n\n    else if (this.state.view === ViewType.PuzzleSelect) {\n      return (\n        <PuzzleSelect\n          gameState={{...this.state}}\n          current_pack={this.puzzle_manager.get_current_pack()}\n          current_puzzle={this.puzzle_manager.get_current_puzzle()}\n          completed_puzzles={this.puzzle_manager.find_completed_puzzle()}\n          granted_blocks={this.puzzle_manager.get_granted_blocks(this.state.devMode)}\n          onClickHome={(puzzle_tag) => {\n            this.setState({\n              view: ViewType.Normal,\n              devMode: false\n            });\n            this.load_puzzle(puzzle_tag);\n          }}\n          onClickToPuzzle={(puzzle_tag) => {\n            this.setState({\n              view: ViewType.Normal,\n              devMode: false\n            });\n            this.load_puzzle(puzzle_tag);\n          }} \n          loadLastSandbox={() => {\n            this.setState({\n              view: ViewType.Normal\n            });\n            this.load_last_sandbox();\n          }}\n          />\n      )\n    }\n\n    else if (this.state.view === ViewType.LearnMore) {\n      return (\n        <div className=\"LearnMore\">\n          <header id=\"header\">\n            <div><h1>Choose a pack:</h1></div>\n          </header>\n\n          <button className=\"standard-back\" onClick={() => this.learn_more(0)}>\n            <span className=\"standard-front\">\n              Standard\n            </span>\n          </button>\n          <button className=\"test-back\" onClick={() => this.learn_more(1)}>\n            <span className=\"test-front\">\n              Test\n            </span>\n          </button>\n        </div>\n      )\n    }\n\n    else {\n      return (\n        <div className=\"App\">\n          <header id=\"header\" className=\"navbar\">\n            <div className='header-name'><h1>Dragon Architect</h1></div>\n            <div className=\"puzzle-selection-name-and-button\">\n              <div className=\"current-puzzle-name\">\n                <h5>Current Puzzle: {this.current_puzzle()}</h5>\n              </div>\n              <div className='puzzle-select-toggle'>\n                <button className='puzzle-select-toggle-button-back' onClick={() => this.setState({ view: ViewType.PuzzleSelect })}>\n                  <span className='puzzle-select-toggle-button-front'>\n                    Puzzle Select\n                  </span>\n                </button>\n              </div>\n              <div className='sandbox-toggle'>\n                <button className='sandbox-toggle-button-back' onClick={() => { this.load_sandbox(); }}>\n                  <span className='sandbox-toggle-button-front'>\n                    Sandbox Mode\n                  </span>\n                </button>\n              </div>\n            </div>\n            {/* </div> */}\n          </header>\n          {process.env.NODE_ENV !== 'production' && <div className='dev-controls-header'>\n            <div className='pack-container'>\n              <label htmlFor=\"pack-select\" className='pack-label'>Select a pack:</label>\n              <select name=\"pack-select\" id=\"pack-select\" className='pack-select' onChange={event => this.on_change_pack(event)}>\n                {this.puzzle_manager.packs.map((pack, index) => <option key={index} value={index}>{pack.name}</option>)}\n              </select>\n            </div>\n            <div className='puzzle-container'>\n              <label htmlFor=\"puzzle-select\" className='puzzle-label'>Select a puzzle:</label>\n              <select name=\"puzzle-select\" id=\"puzzle-select\" className='puzzle-select' onChange={event => this.load_puzzle(`puzzles/${event.target.value}.json`)}>\n                {this.puzzle_manager.get_all_puzzles().map(puzzle => <option key={puzzle} value={puzzle}>{puzzle}</option>)}\n              </select>\n            </div>\n            <div className=\"buttons-header-container\">\n              <div id=\"dev-mode-button\" className='dev-mode'>\n                <button name=\"dev-mode\" className='dev-mode-button-back' onClick={() => this.toggle_dev_mode()}>\n                  <span className='dev-mode-button-front'>\n                    Toggle Dev Mode\n                  </span>\n                </button>\n              </div>\n\n              <div id=\"learn-more\" className='learn-more-container'>\n                <button name=\"learn-more\" className='learn-more-button-back' onClick={() => this.setState({ view: ViewType.LearnMore })}>\n                  <span className='learn-more-button-front'>\n                    Learn More\n                  </span>\n                </button>\n              </div>\n\n              <div id=\"save-progress\" className='save-progress-container'>\n                <button name=\"save-progress\" className='save-progress-button-back' onClick={() => this.clean_progress()}>\n                  <span className='save-progress-button-front'>\n                    Clean Progress\n                  </span>\n                </button>\n              </div>\n\n            </div>\n          </div>}\n\n          <div id=\"main-view-code\">\n            <BlocklyComp granted_blocks={this.puzzle_manager.get_granted_blocks(this.state.devMode)} {...this.state} />\n          </div>\n\n          {(this.state.view === ViewType.SequencePause) && (this.state.reset) &&\n            <div className='sandbox-congrats-box'>\n              <h4>You finished all puzzles in this sequence!</h4>\n              <button className='congrats-button-back' onClick={() => { this.load_sandbox(); }}>\n                <span className='congrats-button-front'>\n                  <h2>Go To Sandbox</h2>\n                </span>\n              </button>\n            </div>}\n\n\n          {(this.state.view === ViewType.PuzzlePause) &&\n            <div className='congrats-box'>\n              <h4>Good job!</h4>\n              <button className='congrats-button-back' onClick={() => { this.continue(); }}>\n                <span className='congrats-button-front'>\n                  <h2>Next Puzzle</h2>\n                </span>\n              </button>\n            </div>}\n\n          <div id=\"main-view-game\">\n            <Display {...this.state} />\n            <div id=\"instructions-display\" className=\"goal-section instructions\">\n              <div id=\"instructions-goal\">\n                <InstructionsGoal gamestate={this.state} />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"run-button-container\">\n            <Run gamestate={this.state} onClick={() => { this.run_program(); }} />\n          </div>\n\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","/* FILENAME:    PuzzleSelect.tsx\n * DESCRIPTION: \n *      This file creates the puzzle select screen and its buttons\n * DATE:    08/19/2021\n * AUTHOR:      Teagan Johnson    Aaron Bauer    Katrina Li\n */\n\nimport React from 'react';\nimport { GameState } from './App';\nimport \"./css/index.css\"\nimport { PuzzlePack } from './PuzzleManager';\nimport { PuzzleSpec } from './PuzzleState';\nimport { SANDBOX_STATE } from './PuzzleState';\n\ninterface PuzzleSelectProps {\n    gameState: GameState;\n    current_pack: PuzzlePack;\n    current_puzzle: PuzzleSpec;\n    completed_puzzles: string[];\n    granted_blocks: string[];\n    onClickToPuzzle: (e: string) => void;\n    onClickHome: (e: string) => void;\n    loadLastSandbox: () => void;\n}\n\nexport default class PuzzleSelect extends React.Component<PuzzleSelectProps> {\n\n    // Returns to the game screen. Returns to either sandbox or a specific puzzle level\n    returnHome(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n        if (this.props.gameState.puzzle !== SANDBOX_STATE) {\n            this.props.onClickHome(`puzzles/${this.props.current_puzzle.tag}.json`);\n        }\n        else {\n            console.log(\"loading last sandbox\");\n            this.props.loadLastSandbox();\n        }\n    }\n\n    // Opens a new puzzle if clicked\n    openPuzzle(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n        this.props.onClickToPuzzle(`puzzles/${event.currentTarget.id}.json`);\n    }\n\n    render() {\n        return (\n            <div className=\"select-puzzle-screen\">\n                <div className='puzzle-select-title'>\n                <h1>Puzzle Select</h1>\n                <h3>Select Which Puzzle You Would Like to Go To!</h3>\n                </div>\n                <div className='home-button-container'>\n                    <button className='home-button-back' onClick={event => this.returnHome(event)}>\n                        <span className='home-button-front'>\n                            Home\n                        </span>\n                    </button>\n                </div>\n                \n                <div className=\"select-puzzle-buttons-container\">\n                    {this.props.current_pack.seqs.map(seq => {\n                        return (\n                            <div key={seq.name} className=\"puzzle-select-seq-container\">\n                                <h2>{seq.name}</h2>\n                                <div className=\"puzzle-select-buttons\">\n                                    {seq.puzzles.map(puzzle => {\n                                        return (\n                                            <button key={puzzle.name} className=\"puzzle-select-button-back\" id={puzzle.tag}\n                                                value={String(this.props.completed_puzzles.includes(puzzle.name))}\n                                                onClick={event => this.openPuzzle(event)}>\n                                                <span className='puzzle-select-button-front' title={String(this.props.completed_puzzles.includes(puzzle.name))}>\n                                                        {puzzle.name}\n                                                    </span>\n                                            </button>\n                                        )\n                                    })}\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        )\n    }\n}","/* FILENAME:    index.tsx\n * DESCRIPTION: \n *      This file handles our app startup and sets the react interface to strict mode\n * DATE:    08/19/2021\n * AUTHOR:      Aaron Bauer\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/instructions.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}