{"version":3,"sources":["Parser.ts","BlocklyExtensions.ts","BlocklyComp.tsx","Simulator.ts","StdLib.ts","Util.ts","WorldState.ts","PuzzleState.ts","Display.tsx","Slider.tsx","CameraPositioning.tsx","RunButton.tsx","PuzzleManager.ts","FontAwesomeIcons.tsx","App.tsx","PuzzleSelect.tsx","index.tsx"],"names":["WhitespaceType","TokenType","SyntaxErrorCode","SYMBOLS","KEYWORDS","FileLocation","start","line","column","end","this","token_equal","a","b","kind","_","isEqual","value","whitespace","is_space","c","undefined","length","is_indent","is_alpha","test","is_digit","ExpressionType","StatementType","SyntaxError","code","location","msg","Object","setPrototypeOf","prototype","Error","Lexer","program","source","position","indent_stack","next_line","next_column","pos","next_position","tok","t","Whitespace","last","error","UnexpectedEOF","advance","do_take_next","peek_char","next_char","string","build_string","x","includes","token","Keyword","Ident","name","IntLiteral","parseInt","Symbol","InvalidCharacter","indent","next","is_eof","out","skip_whitespace","skip_comment","last_indent","push","Indent","Dedent","pop","InvalidIndentation","lex_token","Newline","tokens","result","lex_line","i","Parser","last_location","reverse","type","expected","UnexpectedToken","JSON","stringify","attributes","Map","expr_type","expr","next_location","Number","InvalidExpression","meta","new_meta","expression","matchfn","sep","match_token","make_check_token","entries","peek_token","match","match_ident","args","match_paren_list","match_expression","bind","make_ws_token","attribs","key","eq","val","n","set","repeat","match_repeat","Repeat","stmt","invoke","match_invocation","Command","InvalidStatement","Execute","body","match_statement","dedent","number","match_block","def","params","match_attributes","match_procedure","match_top_level_statement","EMPTY_PROGRAM","parse","lex_all","console","match_program","Blockly","getNested","input","blocks","inputList","connection","child","targetBlock","freeze","doFreezeArgs","frozen","setMovable","setDeletable","contextMenu","setEditable","inputsInline","filter","forEach","COLOR_MOVE_1","COLOR_MOVE_2","COLOR_BLOCK","KoboldConvert","xmlHelper","xml","xmlPro","block","breakStmt","slice","color","FieldColour","COLOURS","makeShadowNum","xmlRep","breakStmtRepNum","text_to_blocks","dom","Xml","textToDom","getMainWorkspace","clear","domToWorkspace","mainWorkspace","log","get","freeze_args","top","getTopBlocks","freeze_stack","freeze_all_blocks","has","block_to_text","str","convert_fn","children","getNextBlock","blocks_to_text","text","setColour","percent","f","p","R","G","B","Math","round","toString","shade_hex_color","getColour","num","id","COMMANDS","move2","place","remove","teaser","pack","up","down","defproc","ValueType","BlocklyComp","props","workspace","Blocks","init","jsonInit","message0","args0","check","previousStatement","nextStatement","colour","getInput","getFieldValue","appendDummyInput","appendField","setPreviousStatement","setNextStatement","indexOf","getProcedureDef","style","width","inject","toolbox","document","getElementById","renderer","updateToolbox","puzzle_manager","get_granted_blocks","devMode","granted_blocks","toolXML","data","puzzle","library","restricted","React","Component","RuntimeErrorCode","Environment","values","procedures","SimulatorState","RuntimeError","runtime_error","evaluate","env","clone","UnknownIdentifier","evaluate_repeat_header","repeat_eval","v","repeat_count","ValueError","ArgumentError","evaluate_arg_list","invo","vals","lookup_procedure","create_env_for_procedure","procedure","arity","ArityMismatch","new_env","cloneDeep","zip","decrement_repeat","count","IncrementalSimulator","world","base_env","sim_state","execution_stack","TICKS_PER_SECOND","ticks_per_command","last_stmt_exec_time","total_steps","Stopped","baseline_environment","s","Running","Finished","is_running","execute_to_command","exec","command","execute","set_finished","RecursiveSimulator","block_result","execute_block_to_end","execute_to_end","base_environment","load_stdlib","ast","extract_definitions","mapHasVector3","map","vec","equals","UP","THREE","DOWN","GoalInfoType","GoalType","WorldState","dragon_pos","dragon_dir","cube_map","dirty","add","z","y","color_id","CustomError","extract_single_int_arg","delete","mapDeleteVector3","mark_dirty","temp","ws","IMG_FILE_MAP","make_world_from_spec","spec","dir","cubes","Animation","PuzzleState","start_code","start_world","goals","instructions","required","granted","tag","win_callback","gamestate","is_complete","simulator","is_finished","posRequired","goal","RunOnly","MinCube","minRequired","size","AddCube","RemoveCube","DragonPos","dragonPosRequired","filename","state","fetchProgram","Promise","resolve","reject","fetch","then","response","catch","fetchSolution","Solution","solution","run_program_to_end","run","cubePos","make_goals_from_world","goalValue","json","replace","substring","SANDBOX_STATE","Slider","className","direction","min","max","step","onChange","CameraZoomIn","onClick","onClickFunction","icon","CameraZoomOut","CameraTiltUp","CameraTiltDown","CameraRotateRight","CameraRotateLeft","Display","divRef","constantValues","storageMaps","mainStuff","cameraPos","clockStuff","geometries","dragAnimation","finalValues","cubeOptMaps","goalOptMaps","puzzleInit","handleSlideChange","e","animPerSec","parseFloat","target","zoomInCamera","relativeCamPosMag","relativeCamPos","multiplyScalar","zoomOutCamera","rotateCameraRight","q","setFromAxisAngle","upVector","degreesToRadians","applyQuaternion","rotateCameraLeft","tiltCameraUp","cross","normalize","tiltCameraDown","WOBBLE_PERIOD","WOBBLE_MAGNITUDE","TRANSLATION_SMOOTHNESS","ROTATION_SMOOTHNESS","MAX_ANIMATION_TIME","MIN_ANIMATION_TIME","loader","cubeColors","goalCubes","cubeMats","dragonOffset","cubeOffset","scene","camera","window","innerWidth","innerHeight","oldCamQ","antialias","setSize","copy","lookAt","aspect","updateProjectionMatrix","clock","time","finalDragPos","finalDragQ","cubeGeo","goalGeo","cubeGoalMat","transparent","opacity","dragonGoalMat","goalShadow","side","light","planeGeometry","planeMaterial","plane","dragonGeometry","dragon","dragonNose","geometry","zCuePlane","animStatus","null","waitTime","animTime","available","filled","cubeTexture","load","getHexString","planeTexture","wrapS","wrapT","setValues","path","format","backgroundTexture","cubeLoader","background","createRef","zOffset","floor","translateZ","deg","PI","cube","cubePosition","material","existingCube","newCube","index","splice","delta","check_completed","setFromUnitVectors","waiting","animating","removeDragonCube","removePuzzleCube","removeCube","addPuzzleCube","addDragonCube","colorInd","addCube","mark_clean","current","appendChild","domElement","animate","requestAnimationFrame","tDelta","getDelta","simulate","updateDisplay","positionZCue","sin","elapsedTime","cos","lerp","quaternion","slerp","done","newCamPos","newCamQ","render","ref","Run","reset","col","title","PuzzleManager","packs","current_puzzle","completed_puzzle","pack_index","seq_index","puz_index","current_sequence","get_current_seq","puzzles","current_pack","get_current_pack","puzzlePackName","get_current_puzzle","puzzleToAdd","completed_puzzle_array","Array","keys","found","seqs","seq","j","ps","pack_list","pack_promises","packfile","promises","all","load_packs","load_all_puzzles","fab","faSearchMinus","faSearchPlus","faRedo","faUndo","faArrowUp","faArrowDown","ViewType","PuzzleSelect","event","onClickHome","currentTarget","onClickToPuzzle","returnHome","gameState","String","find_completed_puzzle","openPuzzle","App","lastSavedWorld","view","Loading","load_last_progress","set_pack","setState","Normal","load_puzzle","progress","localStorage","setItem","next_puzzle","progress_string","getItem","puzzle_file","make_from_file","win_puzzle","sim","set_puzzle","load_last_sandbox","complete_puzzle","check_complete_pack","SequencePause","PuzzlePause","save_progress","load_sandbox","initialize","set_running","save_sandbox","puzzle_tag","LearnMore","learn_more","htmlFor","on_change_pack","get_all_puzzles","toggle_dev_mode","continue","dangerouslySetInnerHTML","__html","run_program","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.7683ed6f.chunk.js","sourcesContent":["import _ from 'lodash';\n\n/*\nraw text -> lexer -> list of tokens\nlist of tokens -> parser -> program (abstract syntax tree, list of statements)\n*/\n\n// TODO split lexer and parser into separate files\n\n// @ and = for specifying program-wide attributes as key-value pairs\nconst SYMBOLS = ['(', ')', ',', '@', '='];\n\n// only pass, repeat, times, command, and define currently interpreted\n// but reserving various other keywords for future development\nconst KEYWORDS = [\"define\", \"function\",\n    \"set\", \"var\", \"let\", \"mutable\", \"to\", \"in\",\n    \"if\", \"elif\", \"else\", \"end\", \"then\",\n    \"repeat\", \"times\", \"pass\",\n    \"choice\", \"match\", \"case\", \"of\",\n    \"and\", \"or\", \"null\", \"true\", \"false\",\n    \"command\", \"query\"];\n\ntype Position = {\n    line: number\n    column: number\n}\n\nexport class FileLocation {\n    start: Position\n    end: Position\n\n    constructor(start = { line: 0, column: 0 }, end = { line: 0, column: 0 }) {\n        this.start = start;\n        this.end = end;\n    }\n}\n\nenum WhitespaceType {\n    Indent = 'indent',\n    Dedent = 'dedent',\n    Newline = 'newline',\n}\n\nenum TokenType {\n    Whitespace = 'whitespace',\n    Symbol = 'symbol',\n    Keyword = 'keyword',\n    Ident = 'ident',\n    IntLiteral = 'int',\n}\n\ntype Token = {\n    kind: TokenType\n    value: string | number | Ident // whitespace characters will have \"\" as their value\n    location: FileLocation\n    whitespace?: WhitespaceType\n}\n\nfunction token_equal(a: Token, b: Token) {\n    // isEqual needed for the values because they can be objects\n    return a.kind === b.kind && _.isEqual(a.value, b.value) && a.whitespace === b.whitespace;\n}\n\nfunction is_space(c: string) {\n    return c !== undefined && c.length === 1 && (c === '\\t' || c === '\\r' || c === ' ')\n}\n\nfunction is_indent(c: string) {\n    return c !== undefined && c.length === 1 && (c === '\\t' || c === ' ')\n}\n\nfunction is_alpha(c: string) {\n    return c !== undefined && /^[A-Z]$/i.test(c);\n}\n\nfunction is_digit(c: string) {\n    return c !== undefined && /^[0-9]$/.test(c);\n}\n\nenum SyntaxErrorCode {\n    UnexpectedEOF,\n    InvalidCharacter,\n    InvalidIndentation,\n    UnexpectedToken,\n    InvalidExpression,\n    InvalidStatement,\n}\n\nexport class SyntaxError extends Error {\n    code: SyntaxErrorCode;\n    location: FileLocation;\n\n    constructor(code: SyntaxErrorCode, location: FileLocation, msg: string) {\n        super(msg);\n        // necessary according to https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, SyntaxError.prototype);\n        this.code = code;\n        this.location = location;\n\n    }\n}\n\nexport type Meta = {\n    location: FileLocation\n    attributes: Map<string, string>\n};\n\nexport type Invocation = {\n    name: string\n    args: Expression[]\n};\n\n// have a separate Ident type to differentiate it from a keyword\nexport type Ident = {\n    name: string\n};\n\nexport enum ExpressionType {\n    Number = \"number\",\n    Ident = \"ident\"\n};\n\nexport type Expression = {\n    kind: ExpressionType,\n    meta: Meta,\n    expression: number | Ident,\n};\n\nexport type Command = {\n    invoke: Invocation\n};\n\nexport type Execute = {\n    invoke: Invocation\n};\n\nexport type Repeat = {\n    number: Expression\n    body: Statement[]\n};\n\nexport enum StatementType {\n    Repeat = \"repeat\",\n    Execute = \"execute\",\n    Command = \"command\"\n};\n\nexport type Statement = {\n    kind: StatementType\n    meta: Meta,\n    stmt: Repeat | Execute | Command,\n};\n\nexport type Procedure = {\n    kind: string // will be \"procedure\"\n    meta: Meta\n    name: string\n    params: string[]\n    body: Statement[]\n};\n\nexport type TopLevelStatement = Procedure | Statement;\n\nexport type Program = {\n    body: TopLevelStatement[]\n};\n\nexport class Lexer {\n    source: string;\n    position = 0;\n    indent_stack: number[] = [0];\n    next_line: number = 0;\n    next_column: number = 0;\n\n    constructor(program: string) {\n        this.source = program;\n    }\n\n    error(code: SyntaxErrorCode, msg: string) {\n        const pos = this.next_position();\n        return new SyntaxError(code, { start: pos, end: pos }, msg);\n    }\n\n    token(tok: TokenType, value: string | number | Ident,\n        start: Position, whitespace?: WhitespaceType): Token {\n        let end = this.next_position();\n        let loc = { start: start, end: end };\n        let t: Token = { kind: tok, value: value, location: loc }\n        if (tok === TokenType.Whitespace) {\n            t.whitespace = whitespace;\n        }\n        return t;\n    }\n\n    last_indent() {\n        return _.last(this.indent_stack);\n    }\n\n    next_position() {\n        return {\n            line: this.next_line,\n            column: this.next_column\n        }\n    }\n\n    advance() {\n        if (this.position < this.source.length) {\n            return this.source[this.position++];\n        }\n        return this.error(SyntaxErrorCode.UnexpectedEOF, \"Unexpected end of file\");\n    }\n\n    peek_char() {\n        if (this.position < this.source.length) {\n            return this.source[this.position];\n        }\n        return this.error(SyntaxErrorCode.UnexpectedEOF, \"Unexpected end of file\");\n    }\n\n    is_eof() {\n        return this.position >= this.source.length;\n    }\n\n    next_char() {\n        const c = this.advance();\n        if (c instanceof SyntaxError) {\n            return c;\n        }\n        switch (c) {\n            case '\\n':\n                this.next_line += 1;\n                this.next_column = 0;\n                break;\n            default:\n                // could check for control characters here\n                this.next_column += 1;\n        }\n        return c;\n    }\n\n    /// consumes characters while the predicate do_take_next is true\n    /// returns the resulting string\n    build_string(start: string, do_take_next: (c: string) => boolean) {\n        let c = this.peek_char();\n        while (!(c instanceof SyntaxError) && do_take_next(c)) {\n            start += this.next_char();\n            c = this.peek_char();\n        }\n        return start;\n    }\n\n    /// processes and returns next Token\n    lex_token(): Token | SyntaxError {\n        let start = this.next_position();\n        const c = this.next_char();\n        if (c instanceof SyntaxError) {\n            return c;\n        }\n        // identifiers start with alphabetic character or underscore\n        // primary motivation for allowing underscores is to be able to add them\n        // to user-defined procedure names to avoid collisions with stdlib\n        if (is_alpha(c) || c === '_') {\n            // can contain alphabetic, digits, and underscores\n            const string = this.build_string(c, (x: string) => is_alpha(x) || is_digit(x) || x === '_');\n            if (KEYWORDS.includes(string)) {\n                return this.token(TokenType.Keyword, string, start);\n            }\n            return this.token(TokenType.Ident, { name: string }, start);\n        } else if (is_digit(c)) {\n            const string = this.build_string(c, (x: string) => is_digit(x));\n            return this.token(TokenType.IntLiteral, parseInt(string), start);\n        } else if (SYMBOLS.includes(c)) {\n            return this.token(TokenType.Symbol, c, start);\n        }\n        return this.error(SyntaxErrorCode.InvalidCharacter,\n            `Invalid character '${c}'`)\n    }\n\n    /// skips any whitespace tokens, returning the number of indentation tokens skipped\n    skip_whitespace() {\n        let indent = 0;\n        let c = this.peek_char();\n        while (!(c instanceof SyntaxError) && is_space(c)) {\n            if (is_indent(c)) { indent += 1; }\n            this.next_char(); // consume whitespace character\n            c = this.peek_char();\n\n        }\n        return indent;\n    }\n\n    /// advances past any comment and/or newline if it exists,\n    /// returning true if the next char was a comment/newline/eof.\n    skip_comment() {\n        let next = this.peek_char();\n        if (this.is_eof() || next === '#' || next === '\\n') {\n            while (!this.is_eof() && this.peek_char() !== '\\n') {\n                this.next_char();\n            }\n            // skip the newline\n            if (!this.is_eof()) {\n                this.next_char();\n            }\n            return true\n        }\n        return false;\n    }\n\n    /// process the next line of the source, append tokens to out\n    lex_line(out: Token[]): void | SyntaxError {\n        let start = this.next_position();\n        let indent = this.skip_whitespace();\n\n        // only emit any indent/dedent if there is at least one token on the line\n        if (!this.skip_comment()) {\n            if (indent > this.last_indent()!) {\n                this.indent_stack.push(indent);\n                out.push(this.token(TokenType.Whitespace, \"\",\n                    start, WhitespaceType.Indent));\n            } else {\n                while (indent < this.last_indent()!) {\n                    out.push(this.token(TokenType.Whitespace, \"\",\n                        start, WhitespaceType.Dedent));\n                    this.indent_stack.pop();\n                }\n\n                // make sure we popped to an existing dedent level and not some spot in between\n                if (indent !== this.last_indent()) {\n                    return this.error(SyntaxErrorCode.InvalidIndentation, \"Invalid indentation level\");\n                }\n            }\n\n            // then lex all the tokens on the line until newline/comment\n            while (!this.skip_comment()) {\n                let t = this.lex_token();\n                if (t instanceof SyntaxError) {\n                    return t;\n                }\n                out.push(t);\n                this.skip_whitespace();\n            }\n            // always emit a newline token, even if we hit EOF\n            out.push(this.token(TokenType.Whitespace, \"\",\n                start, WhitespaceType.Newline));\n        }\n    }\n\n    lex_all(): Token[] | SyntaxError {\n        const tokens: Token[] = [];\n        while (!this.is_eof()) {\n            const result = this.lex_line(tokens)\n            if (result instanceof SyntaxError) {\n                return result;\n            }\n        }\n        for (let i = 1; i < this.indent_stack.length; i++) {\n            tokens.push(this.token(TokenType.Whitespace, \"\",\n                this.next_position(), WhitespaceType.Dedent));\n        }\n        return tokens;\n    }\n}\n\nexport class Parser {\n    tokens: Token[]\n    last_location: FileLocation\n\n    constructor(tokens: Token[]) {\n        this.tokens = _.reverse(tokens);\n        this.last_location = new FileLocation();\n    }\n\n    error(code: SyntaxErrorCode, msg: string) {\n        return new SyntaxError(code, this.last_location, msg);\n    }\n\n    make_check_token(tok: TokenType, value: string | number | Ident) {\n        let t: Token = { kind: tok, value: value, location: new FileLocation() }\n        return t;\n    }\n\n    make_ws_token(type: WhitespaceType) {\n        return {\n            kind: TokenType.Whitespace, value: \"\",\n            location: new FileLocation(), whitespace: type\n        };\n    }\n\n    next_location() {\n        if (this.tokens.length > 0) {\n            return _.last(this.tokens)!.location;\n        }\n        return new FileLocation();\n    }\n\n    next() {\n        const t = this.tokens.pop();\n        if (t !== undefined) {\n            this.last_location = t.location;\n            return t;\n        }\n        return this.error(SyntaxErrorCode.UnexpectedEOF, \"Unexpected end of file\");\n    }\n\n    match_token(expected: Token): SyntaxError | void {\n        const token = this.next();\n        if (token instanceof SyntaxError) {\n            return token;\n        }\n        if (!token_equal(token, expected)) {\n            return this.error(SyntaxErrorCode.UnexpectedToken,\n                `Expected token ${JSON.stringify(expected)}, found ${token.kind}`);\n        }\n    }\n\n    peek_token(expected: Token) {\n        const last = _.last(this.tokens);\n        return last !== undefined && token_equal(last, expected);\n    }\n\n    new_meta(start: FileLocation, attributes?: Map<string, string>): Meta {\n        const loc = new FileLocation(start.start, this.last_location.end);\n        return { location: loc, attributes: attributes ? attributes : new Map()};\n    }\n\n    match_ident(): string | SyntaxError {\n        const token = this.next();\n        if (token instanceof SyntaxError) {\n            return token;\n        }\n        if (token.kind === TokenType.Ident) {\n            return (token.value as Ident).name;\n        }\n        return this.error(SyntaxErrorCode.UnexpectedToken,\n            `Expected identifier, found ${token.kind}`);\n    }\n\n    match_expression(): Expression | SyntaxError {\n        const start = this.next_location();\n        const token = this.next();\n        if (token instanceof SyntaxError) {\n            return token;\n        }\n        let expr_type: ExpressionType;\n        let expr: number | Ident;\n        switch (token.kind) {\n            case TokenType.IntLiteral:\n                expr = token.value as number;\n                expr_type = ExpressionType.Number;\n                break;\n            case TokenType.Ident:\n                expr = token.value as Ident;\n                expr_type = ExpressionType.Ident;\n                break;\n            default:\n                return this.error(SyntaxErrorCode.InvalidExpression,\n                    \"Expected an expression which must start with an identifier or a literal\");\n        }\n        return { kind: expr_type, meta: this.new_meta(start), expression: expr }\n    }\n\n    match_paren_list<T>(matchfn: () => T | SyntaxError): T[] | SyntaxError {\n        let sep = this.match_token(this.make_check_token(TokenType.Symbol, '('));\n        if (sep instanceof SyntaxError) {\n            return sep;\n        }\n        let entries: T[] = [];\n        while (!this.peek_token(this.make_check_token(TokenType.Symbol, ')'))) {\n            let match = matchfn();\n            if (match instanceof SyntaxError) {\n                return match;\n            }\n            entries.push(match);\n            if (!this.peek_token(this.make_check_token(TokenType.Symbol, ','))) {\n                break;\n            }\n            sep = this.match_token(this.make_check_token(TokenType.Symbol, ','));\n            if (sep instanceof SyntaxError) {\n                return sep;\n            }\n        }\n        sep = this.match_token(this.make_check_token(TokenType.Symbol, ')'));\n        if (sep instanceof SyntaxError) {\n            return sep;\n        }\n        return entries;\n    }\n\n    match_invocation(name?: string): Invocation | SyntaxError {\n        if (name === undefined) {\n            const match = this.match_ident();\n            if (match instanceof SyntaxError) {\n                return match;\n            }\n            name = match;\n        }\n        const args = this.match_paren_list(this.match_expression.bind(this));\n        if (args instanceof SyntaxError) {\n            return args;\n        }\n\n        // language doesn't allow anything after a function call, so a newline must be here\n        const match = this.match_token(this.make_ws_token(WhitespaceType.Newline));\n        if (match instanceof SyntaxError) {\n            return match;\n        }\n\n        return { name: name, args: args };\n    }\n\n    match_attributes(): Map<string, string> | SyntaxError {\n        let attribs = new Map<string, string>();\n        while (this.peek_token(this.make_check_token(TokenType.Symbol, '@'))) {\n            let next = this.next();\n            if (next instanceof SyntaxError) {\n                return next;\n            }\n            let key = this.match_ident();\n            if (key instanceof SyntaxError) {\n                return key;\n            }\n            let eq = this.match_token(this.make_check_token(TokenType.Symbol, '='));\n            if (eq instanceof SyntaxError) {\n                return eq;\n            }\n            let val = this.match_ident();\n            if (val instanceof SyntaxError) {\n                return val;\n            }\n            let n = this.match_token(this.make_ws_token(WhitespaceType.Newline));\n            if (n instanceof SyntaxError) {\n                return n;\n            }\n            attribs.set(key, val);\n        }\n        return attribs;\n    }\n\n    match_statement(attributes?: Map<string, string>): Statement | null | SyntaxError {\n        const start = this.next_location();\n        const next = this.next();\n        if (next instanceof SyntaxError) {\n            return next;\n        }\n        const meta = this.new_meta(start, attributes);\n        switch (next.kind) {\n            case TokenType.Keyword:\n                switch (next.value) {\n                    case \"pass\":\n                        // pass must be immediately followed by a newline\n                        const match = this.match_token(this.make_ws_token(WhitespaceType.Newline));\n                        if (match instanceof SyntaxError) {\n                            return match;\n                        }\n                        return null;\n                    case \"repeat\": // statement is a repeat\n                        const repeat = this.match_repeat();\n                        if (repeat instanceof SyntaxError) {\n                            return repeat;\n                        }\n                        return { kind: StatementType.Repeat, meta: meta, stmt: repeat };\n                    case \"command\": // statement is calling built-in command\n                        const invoke = this.match_invocation();\n                        if (invoke instanceof SyntaxError) {\n                            return invoke;\n                        }\n                        return { kind: StatementType.Command, meta: meta, stmt: { invoke: invoke } }\n                    default:\n                        return this.error(SyntaxErrorCode.InvalidStatement, `Keyword ${next.value} not recognized`);\n                }\n            case TokenType.Ident: // statement is calling a user-defined function (Execute)\n                const invoke = this.match_invocation((next.value as Ident).name);\n                if (invoke instanceof SyntaxError) {\n                    return invoke;\n                }\n                return { kind: StatementType.Execute, meta: meta, stmt: { invoke: invoke } }\n            default:\n                return this.error(SyntaxErrorCode.InvalidStatement, \"Expected a statement, which must start with if, repeat, command, or an identifier\");\n        }\n    }\n\n    match_block(): Statement[] | SyntaxError {\n        // must start with a new line and an indent\n        let match = this.match_token(this.make_ws_token(WhitespaceType.Newline));\n        if (match instanceof SyntaxError) {\n            return match;\n        }\n        match = this.match_token(this.make_ws_token(WhitespaceType.Indent));\n        if (match instanceof SyntaxError) {\n            return match;\n        }\n\n        const body: Statement[] = [];\n        while (!this.peek_token(this.make_ws_token(WhitespaceType.Dedent))) {\n            let stmt = this.match_statement();\n            if (stmt instanceof SyntaxError) {\n                return stmt;\n            }\n            if (stmt === null) {\n                break;\n            }\n            body.push(stmt);\n        }\n\n        // read the dedent\n        const dedent = this.next();\n        if (dedent instanceof SyntaxError) {\n            return dedent;\n        }\n        return body;\n    }\n\n    match_repeat(): Repeat | SyntaxError {\n        const number = this.match_expression();\n        if (number instanceof SyntaxError) {\n            return number;\n        }\n        const token = this.match_token(this.make_check_token(TokenType.Keyword, \"times\"));\n        if (token instanceof SyntaxError) {\n            return token;\n        }\n        const body = this.match_block();\n        if (body instanceof SyntaxError) {\n            return body;\n        }\n        return { number: number, body: body };\n    }\n\n    match_procedure(attributes: Map<string, string>): Procedure | SyntaxError {\n        const start = this.next_location();\n        const def = this.match_token(this.make_check_token(TokenType.Keyword, \"define\"));\n        if (def instanceof SyntaxError) {\n            return def;\n        }\n        const name = this.match_ident();\n        if (name instanceof SyntaxError) {\n            return name;\n        }\n        const params = this.match_paren_list(this.match_ident.bind(this));\n        if (params instanceof SyntaxError) {\n            return params;\n        }\n        const body = this.match_block();\n        if (body instanceof SyntaxError) {\n            return body;\n        }\n        return {\n            kind: \"procedure\",\n            meta: this.new_meta(start, attributes),\n            name: name,\n            params: params,\n            body: body\n        }\n    }\n\n    match_top_level_statement(): TopLevelStatement | SyntaxError | null {\n        let attributes = this.match_attributes();\n        if (attributes instanceof SyntaxError) {\n            return attributes;\n        }\n        if (this.peek_token(this.make_check_token(TokenType.Keyword, \"define\"))) {\n            return this.match_procedure(attributes);\n        } else {\n            const stmt = this.match_statement(attributes);\n            if (stmt instanceof SyntaxError) {\n                if (stmt.code === SyntaxErrorCode.InvalidStatement) {\n                    // overwrite the statement message with a better one for top-level statements\n                    return new SyntaxError(stmt.code, stmt.location, \"Expected a top-level statement, which must start with define, if, repeat, command, or an identifier\");\n                } else {\n                    return stmt;\n                }\n            }\n            return stmt;\n        }\n    }\n\n    match_program(): Program | SyntaxError {\n        const body: TopLevelStatement[] = [];\n        while (this.tokens.length > 0) {\n            let stmt = this.match_top_level_statement();\n            if (stmt instanceof SyntaxError) {\n                return stmt;\n            }\n            if (stmt !== null) {\n                body.push(stmt);\n            }\n        }\n        return { body: body };\n    }\n}\n\nexport const EMPTY_PROGRAM = {\n    body: []\n}\n\nexport default function parse(program: string): Program | SyntaxError {\n    const lexer = new Lexer(program);\n    const tokens = lexer.lex_all();\n    if (tokens instanceof SyntaxError) {\n        console.error(`[SyntaxError] ${tokens}`);\n        return tokens;\n    }\n    const parser = new Parser(tokens);\n    return parser.match_program();\n}\n","import * as Blockly from 'blockly/core';\n\ndeclare module \"blockly\" {\n    interface Block {\n        getNested(): Blockly.Block[]\n        frozen: boolean\n        freeze(doFreezeArgs: boolean): void\n    }\n\n    interface ProcedureBlock extends Block {\n        /**\n         * Return the signature of this procedure definition.\n         * @return {!Array} Tuple containing three elements:\n         *     - (string) the name of the defined procedure,\n         *     - (Array) a list of all its arguments,\n         *     - (boolean) that it DOES have a return value.\n         * @this {Blockly.Block}\n         */\n        getProcedureDef(): [string, string[], boolean]\n    }\n}\n\nBlockly.Block.prototype.getNested = function () {\n    let blocks = [];\n    for (let i = 0, input; (input = this.inputList[i]); i++) {\n        if (input.connection) {\n            let child = input.connection.targetBlock();\n            if (child) {\n                blocks.push(child);\n            }\n        }\n    }\n    return blocks;\n};\n\n/**\n * Makes a block unmoveable, undeletetable, and disables its context menu\n * May make any fields on the block uneditable\n * IF YOU CALL THIS, YOU MUST SUBSEQUENTLY CALL <Block>.updateColour TO GET THE CORRECT COLORS\n */\nBlockly.Block.prototype.freeze = function (doFreezeArgs: boolean) {\n    this.frozen = true;\n\n    this.setMovable(false);\n    this.setDeletable(false);\n    this.contextMenu = false;\n    if (doFreezeArgs) {\n        this.setEditable(false);\n    }\n\n    // check for inline input that needs to be frozen\n    if (this.inputsInline) {\n        var inputs = this.inputList.filter(function (input) { return input.type === Blockly.INPUT_VALUE; });\n        inputs.forEach(function (input) { input.connection.targetBlock().freeze(doFreezeArgs); });\n    }\n};\n","import Blockly, { mainWorkspace } from 'blockly'; //newly added mainWorkspace\nimport React from 'react';\nimport _ from 'lodash';\nimport parse, {\n    ExpressionType,\n    SyntaxError, Statement, StatementType, Repeat, Execute, Command, TopLevelStatement\n} from './Parser';\nimport { GameState } from './App';\nimport './BlocklyExtensions';\n\nconst COLOR_MOVE_1 = '#0075A6';\nconst COLOR_MOVE_2 = '#B84B26';\nconst COLOR_BLOCK = '#978B63';\n// const COLOR_LOOPS = '#00711C';\n// const COLOR_UNUSED_1 = '#B63551';\n// const COLOR_UNUSED_2 = '#A88217';\n// Blockly.FieldColour.COLOURS\n\n// class KoboldLangOps {\n//     block_to_kobold: Map<string, ()>\n// }\n\n// var restricted_list = [\"remove\",\"repeat\",\"defproc\"];\n\n\nconst KoboldConvert = new Map<string, (block: Blockly.Block) => string>();\n\n// const allGranted = ['move2', 'place', 'remove', 'up', 'down', 'repeat', 'defproc'];\n\n// little helper functions for the recursive xmlHelper() function\nexport function breakStmt(stmt: Statement) {\n    switch (stmt.kind) {\n        case StatementType.Command:\n            let command = stmt.stmt as Command;\n            return command.invoke;\n\n        case StatementType.Execute:\n            let exec = stmt.stmt as Execute;\n            return exec.invoke;\n\n        default:\n            return null;\n    }\n}\nexport function breakStmtRep(stmt: Statement) {\n    let rep = stmt.stmt as Repeat;\n    return rep.body;\n}\nexport function breakStmtRepNum(stmt: Statement) {\n    let rep = stmt.stmt as Repeat;\n    return rep.number.expression;\n}\n\n\n// a recursive function that turns parsed code strings to a huge xml string\nexport function xmlHelper(program: TopLevelStatement[] | Statement[], xml: string) {\n\n    if (program.length === 0) {\n        return \"\";\n    }\n    //for (let s of program){\n\n    switch (program[0].kind) {\n        case \"procedure\": //block is a procedure\n            let xmlPro = \"\";\n            let pro = program[0].body;\n\n            xmlPro = xmlHelper(pro, xmlPro);\n\n            xmlPro = '<block type = \"procedures_defnoreturn\"><field name=\"NAME\">' + program[0].name +\n                '</field><statement name=\"STACK\">' + xmlPro;\n            xmlPro += '</statement></block>';\n            xml = xml + xmlPro;\n\n            break;\n\n        default: // block is a statement (repeat, execute or command)\n            let block = breakStmt(program[0] as Statement);\n            if (block) {\n                if (block.name === \"Left\" || block.name === \"Right\" || block.name === 'RemoveCube') {\n                    if (program.length === 1) {\n                        return '<block type=\"' + block.name + '\"></block>';\n                    }\n                    xml = '<block type=\"' + block.name + '\"><next>' + xmlHelper(program.slice(1), \"\") + '</next></block>';\n                }\n\n                else if (block.name === 'PlaceCube') {\n                    let expr = block.args;\n                    let color = 0;\n                    if (expr[0].kind === ExpressionType.Number) {\n                        color = expr[0].expression as number;\n                    }\n\n                    if (program.length === 1) {\n                        return '<block type=\"' + block.name + '\"><field name=\"VALUE\">' + Blockly.FieldColour.COLOURS[color] + '</field></block>';\n                    }\n                    xml = '<block type=\"' + block.name + '\"><field name=\"VALUE\">' + Blockly.FieldColour.COLOURS[color] + '</field><next>' +\n                        xmlHelper(program.slice(1), \"\") + '</next></block>';\n\n                }\n\n                else {\n                    let expr = block.args;\n                    if (expr[0].kind === ExpressionType.Number) {\n\n                        if (program.length === 1) {\n                            return '<block type=\"' + block.name + '\"><value name=\"VALUE\">' + makeShadowNum(expr[0].expression as number) +\n                                '</value></block>';\n                        }\n\n                        xml = '<block type=\"' + block.name + '\"><value name=\"VALUE\">' + makeShadowNum(expr[0].expression as number) +\n                            '</value><next>' + xmlHelper(program.slice(1), \"\") + '</next></block>';\n\n                    }\n                }\n            }\n            else { //block is a repeat\n                let xmlRep = \"\";\n                let rep = breakStmtRep(program[0] as Statement);\n\n                // xmlRep = xmlHelper([rep[rep.length-1]],\"\", true);//false\n\n                // for(let r = rep.length-2;r>=0;r--){\n                //     xmlRep = xmlHelper([rep[r]],xmlRep, true);\n                //     //console.log(xml);\n                // }\n\n                xmlRep = xmlHelper(rep, xmlRep);\n\n\n                xmlRep = '<block type=\"controls_repeat_ext\"><value name=\"TIMES\"><shadow type=\"math_number\"><field name=\"NUM\">'\n                    + breakStmtRepNum(program[0] as Statement) + '</field></shadow></value><statement name=\"DO\">' + xmlRep;\n\n\n                xmlRep += '</statement>';\n                if (program.length > 1) {\n                    xml = xml + xmlRep + '<next>' + xmlHelper(program.slice(1), \"\") + '</next></block>';\n                }\n                else {\n                    xml = xml + xmlRep + '</block>';\n                }\n\n\n            }\n\n    }\n\n\n\n    return xml;\n}\n\nexport function text_to_blocks(code: string) {\n    let xml = '<xml>';\n    let program = parse(code);\n    if (program instanceof SyntaxError) {\n        console.error(`Syntax Error: ${program}`);\n    } else {\n        xml += xmlHelper(program.body, \"\");\n        xml += '</xml>';\n        let dom = Blockly.Xml.textToDom(xml);\n        Blockly.getMainWorkspace().clear();\n        Blockly.Xml.domToWorkspace(dom, mainWorkspace);\n        console.log(program.body[0].meta.attributes.get(\"frozen\"));\n        if (program.body[0].meta.attributes.get(\"frozen\") === \"all\") {\n            freeze_all_blocks(program.body[0].meta.attributes.has(\"freezeArgs\"));\n        }\n    }\n}\n\nfunction print_block(indent: string, block: Blockly.Block) {\n    let convert_fn = KoboldConvert.get(block.type);\n    if (convert_fn) {\n        console.log(indent + convert_fn(block));\n    }\n    let children = block.getNested();\n    if (children.length > 0) {\n        // console.log(indent + `children:`);\n        _.forEach(children, _.partial(print_block, indent + \"\\t\"));\n    }\n    if (block.getNextBlock()) {\n        print_block(indent, block.getNextBlock());\n    }\n}\n\nexport function print_blocks() {\n    let top = Blockly.getMainWorkspace().getTopBlocks(true);\n    _.forEach(top, (block) => {\n        console.log(\"top\");\n        print_block(\"\", block);\n    });\n}\n\n\n\nexport function block_to_text(str: string, indent: string, block: Blockly.Block): string {\n    let convert_fn = KoboldConvert.get(block.type);\n    let children = block.getNested();\n    if (convert_fn) {\n        str += indent + convert_fn(block) + \"\\n\";\n    } else if (!KoboldConvert.has(block.type)) {\n        console.error(`No KoboldConvert function found for ${block.type}`);\n    }\n    if (children.length > 0) {\n        for (let child of children) {\n            str = block_to_text(str, (indent + \"\\t\"), child);\n        }\n    }\n    if (block.getNextBlock() && convert_fn) {\n        str = block_to_text(str, indent, block.getNextBlock());\n    }\n    return str;\n}\n\nexport function blocks_to_text(): string {\n    let text = \"\";\n    let top = Blockly.getMainWorkspace().getTopBlocks(true);\n    _.forEach(top, (block) => {\n        text += (block_to_text(\"\", \"\", block) + \"\\n\");\n    });\n    return text;\n}\n\n// return a new hex color string that lightens (positive) or darkens (negative) the \n// original color by `percent` (`percent` should be between 0 and 1)\nfunction shade_hex_color(color: string, percent: number) {\n    var f = parseInt(color.slice(1), 16), t = percent < 0 ? 0 : 255, p = percent < 0 ? percent * -1 : percent, R = f >> 16, G = f >> 8 & 0x00FF, B = f & 0x0000FF;\n    return \"#\" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);\n}\n\nfunction freeze_stack(block: Blockly.Block, freeze_args: boolean) {\n    block.setMovable(false);\n    block.setDeletable(false);\n    block.setColour(shade_hex_color(block.getColour(), -0.5));\n    if (freeze_args) {\n        block.setEditable(false);\n    }\n    if (block.getNextBlock()) {\n        freeze_stack(block.getNextBlock(), freeze_args);\n    }\n}\n\nfunction freeze_all_blocks(freeze_args: boolean) {\n    let top = Blockly.getMainWorkspace().getTopBlocks(true);\n    _.forEach(top, block => freeze_stack(block, freeze_args));\n}\n\n\nfunction makeShadowNum(num: number, id?: string) {\n    if (id) {\n        return '<shadow type=\"math_number\" id=\"' + id + '\"><field name=\"NUM\">' + num + '</field></shadow>';\n    }\n    return '<shadow type=\"math_number\"><field name=\"NUM\">' + num + '</field></shadow>';\n};\n\n\nconst COMMANDS = {\n    move2: { block: '<block type=\"Forward\"><value name=\"VALUE\">' + makeShadowNum(1) + '</value></block><block type=\"Left\"></block><block type=\"Right\"></block>' },\n    //set: { block: '<block type=\"Set\"><value name=\"VALUE\">' + makeShadowNum(1) + '</value></block>' },\n    place: { block: '<block type=\"PlaceCube\"></block>' },\n    remove: { block: '<block type=\"RemoveCube\"></block>', teaser: '<block type=\"RemoveCube_teaser\"></block>', pack: 'remove' },\n    up: { block: '<block type=\"Up\"><value name=\"VALUE\">' + makeShadowNum(1) + '</value></block>', teaser: '<block type=\"Up_teaser\"><value name=\"VALUE\">' + makeShadowNum(1) + '</value></block>', pack: 'up' },\n    down: { block: '<block type=\"Down\"><value name=\"VALUE\">' + makeShadowNum(1) + '</value></block>', teaser: '<block type=\"Down_teaser\"><value name=\"VALUE\">' + makeShadowNum(1) + '</value></block>', pack: 'up' },\n    repeat: {\n        block: '<block type=\"controls_repeat_ext\"><value name=\"TIMES\">' + makeShadowNum(10) + '</value></block>',\n        teaser: '<block type=\"controls_repeat_teaser\"><value name=\"TIMES\">' + makeShadowNum(10) + '</value></block>', pack: 'repeat'\n    },\n    // counting_loop: {\n    //     block: '<block type=\"controls_for\"><value name=\"COUNTER\"><block type=\"variables_get\" default=\"true\"><field name=\"VAR\">i</field></block></value>' +\n    //         '<value name=\"FROM\">' + makeShadowNum(0) + '</value>' +\n    //         '<value name=\"TO\">' + makeShadowNum(10) + '</value>' +\n    //         '<value name=\"BY\">' + makeShadowNum(1) + '</value>' +\n    //         '</block>'\n    // },\n    // defproc_noargs: { block: '<block type=\"procedures_noargs_defnoreturn\"></block>', teaser: '<block type=\"procedures_defnoreturn_teaser\"></block>', pack: 'procedures' },\n    // defproc: { block: '<block type=\"procedures_defnoreturn\"></block>', teaser: '<block type=\"procedures_defnoreturn_teaser\"></block>', pack: 'procedures' },\n    defproc: { block: '<block type=\"procedures_defnoreturn\"></block>', pack: 'procedures' },\n\n\n};\n\n\nfunction customBlocklyInit() {\n    Blockly.FieldColour.COLOURS = [\"#1ca84f\", \"#a870b7\", \"#ff1a6d\", \"#00bcf4\", \"#ffc911\", \"#ff6e3d\", \"#000000\", \"#ffffff\"];\n\n    //up\n    Blockly.Blocks['Up'] = {\n        init: function (this: Blockly.Block) {\n            this.jsonInit({\n                message0: \"up by %1\",\n                args0: [\n                    {\n                        type: \"input_value\",\n                        name: \"VALUE\",\n                        check: \"Number\"\n                    }\n                ],\n                previousStatement: true,\n                nextStatement: true,\n                inputsInline: true,\n                colour: COLOR_MOVE_2\n            });\n        }\n    };\n    KoboldConvert.set(\"Up\", (block: Blockly.Block) => {\n        return `Up(${block.getInput(\"VALUE\")?.connection?.targetBlock()?.getFieldValue(\"NUM\")})`\n    });\n\n    //down\n    Blockly.Blocks['Down'] = {\n        init: function (this: Blockly.Block) {\n            this.jsonInit({\n                message0: \"down by %1\",\n                args0: [\n                    {\n                        type: \"input_value\",\n                        name: \"VALUE\",\n                        check: \"Number\"\n\n                    }\n                ],\n                previousStatement: true,\n                nextStatement: true,\n                inputsInline: true,\n                colour: COLOR_MOVE_2\n            });\n        }\n    };\n    KoboldConvert.set(\"Down\", (block: Blockly.Block) => {\n        return `Down(${block.getInput(\"VALUE\")?.connection?.targetBlock()?.getFieldValue(\"NUM\")})`\n    });\n\n    //forward\n    Blockly.Blocks['Forward'] = {\n        init: function (this: Blockly.Block) {\n            this.jsonInit({\n                message0: \"forward by %1\",\n                args0: [\n                    {\n                        type: \"input_value\",\n                        name: \"VALUE\",\n                        check: \"Number\"\n                    }\n                ],\n                previousStatement: true,\n                nextStatement: true,\n                inputsInline: true,\n                colour: COLOR_MOVE_1\n            });\n        }\n    };\n    KoboldConvert.set(\"Forward\", (block: Blockly.Block) => {\n        return `Forward(${block.getInput(\"VALUE\")?.connection?.targetBlock()?.getFieldValue(\"NUM\")})`\n    });\n\n    //left\n    Blockly.Blocks['Left'] = {\n        init: function (this: Blockly.Block) {\n            this.setColour(COLOR_MOVE_1);\n            this.appendDummyInput()\n                .appendField(\"turn left\");\n            this.setPreviousStatement(true);\n            this.setNextStatement(true);\n        }\n    };\n    KoboldConvert.set(\"Left\", (block: Blockly.Block) => {\n        return `Left()`\n    });\n\n    //right\n    Blockly.Blocks['Right'] = {\n        init: function (this: Blockly.Block) {\n            this.setColour(COLOR_MOVE_1);\n            this.appendDummyInput()\n                .appendField(\"turn right\");\n            this.setPreviousStatement(true);\n            this.setNextStatement(true);\n        }\n    };\n    KoboldConvert.set(\"Right\", (block: Blockly.Block) => {\n        return `Right()`\n    });\n\n    //placecube\n    Blockly.Blocks['PlaceCube'] = {\n        init: function (this: Blockly.Block) {\n            this.setColour(COLOR_BLOCK);\n            this.appendDummyInput()\n                .appendField(\"place cube\")\n                .appendField(new Blockly.FieldColour(Blockly.FieldColour.COLOURS[0]), 'VALUE');\n            this.setPreviousStatement(true);\n            this.setNextStatement(true);\n        }\n    };\n    KoboldConvert.set(\"PlaceCube\", (block: Blockly.Block) => {\n        return `PlaceCube(` + Blockly.FieldColour.COLOURS.indexOf(block.getFieldValue(\"VALUE\")) + `)`\n        // this will be an integer\n    });\n\n    //removecube\n    Blockly.Blocks['RemoveCube'] = {\n        init: function (this: Blockly.Block) {\n            this.setColour(COLOR_BLOCK);\n            this.appendDummyInput()\n                .appendField(\"remove cube\");\n            this.setPreviousStatement(true);\n            this.setNextStatement(true);\n        }\n    };\n    KoboldConvert.set(\"RemoveCube\", (block: Blockly.Block) => {\n        return `RemoveCube()`\n    });\n\n    //repeat (built-in)\n    KoboldConvert.set(\"controls_repeat_ext\", (block: Blockly.Block) => {\n        return `repeat ${block.getInput(\"TIMES\")?.connection?.targetBlock()?.getFieldValue(\"NUM\")} times`;\n    });\n\n    //procedure (built-in)\n    KoboldConvert.set(\"procedures_defnoreturn\", (block: Blockly.Block) => {\n        let [name, args, _hasReturn] = (block as Blockly.ProcedureBlock).getProcedureDef();\n        return `define ${name}(${args})`;\n    });\n\n    KoboldConvert.set(\"procedures_callnoreturn\", (block: Blockly.Block) => {\n        return `${block.getFieldValue(\"NAME\")}()`;\n    });\n}\n\nexport default class BlocklyComp extends React.Component<GameState> {\n    workspace?: Blockly.WorkspaceSvg\n\n    constructor(props: GameState) {\n        super(props);\n        customBlocklyInit();\n\n    }\n\n\n    render() {\n\n        return (\n            <div id=\"blocklyDiv\" style={{ width: '100%' }}></div>\n            \n        )\n    }\n\n    componentDidMount() {\n        this.workspace = Blockly.inject('blocklyDiv',\n            { toolbox: document.getElementById('toolbox')!, renderer: 'thrasos' });\n        this.updateToolbox(this.workspace, []); // the initial toolbox, empty but we can add any block here\n    }\n\n    componentDidUpdate() {\n        if (this.workspace) {\n            this.updateToolbox(this.workspace, this.props.puzzle_manager.get_granted_blocks(this.props.devMode));\n        }\n    }\n\n    updateToolbox(workspace: Blockly.WorkspaceSvg, granted_blocks: string[]) {\n        let toolXML = '<xml id=\"toolbox\" style=\"display: none\">';\n        // console.log(\"updating toolbox: this.props.grantedBlocks = \" + granted_blocks);\n        _.forEach(COMMANDS, (data, name) => {\n\n            if (!_.includes(this.props.puzzle?.library.restricted, name) && _.includes(granted_blocks, name)) {\n                toolXML += data.block;\n            }\n        });\n\n        toolXML += '</xml>';\n\n        workspace.updateToolbox(toolXML);\n\n    }\n}","import _ from 'lodash';\nimport parse, {\n    Procedure, FileLocation, Expression,\n    ExpressionType, Invocation, Meta, Ident, Program,\n    SyntaxError, Statement, StatementType, Repeat, Execute, Command\n} from './Parser';\nimport WorldState from './WorldState';\nimport { StdLibText } from './StdLib';\n\nexport enum ValueType {\n    Number = \"number\"\n};\n\n// currently only number Values are implemented, but using a structure\n// that will make this easy to expand\nexport type Value = {\n    kind: ValueType\n    val: number\n};\n\nclass Environment {\n    values: Map<string, Value>;\n    procedures: Map<string, Procedure>;\n\n    constructor() {\n        this.values = new Map<string, Value>();\n        this.procedures = new Map<string, Procedure>();\n    }\n}\n\nexport type SimCommand = {\n    meta: Meta\n    name: string\n    args: Value[]\n};\n\nexport enum RuntimeErrorCode {\n    CustomError,\n    UnknownIdentifier,\n    ArityMismatch,\n    ArgumentError,\n    ValueError\n};\n\nexport class RuntimeError extends Error {\n    code: RuntimeErrorCode;\n    location: FileLocation;\n\n    constructor(code: RuntimeErrorCode, location: FileLocation, msg: string) {\n        super(msg);\n        // necessary according to https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, RuntimeError.prototype);\n        this.code = code;\n        this.location = location;\n    }\n}\n\nexport function runtime_error(code: RuntimeErrorCode, msg: string, meta?: Meta) {\n    console.error(msg);\n    return new RuntimeError(code, meta ? meta.location : new FileLocation(), msg);\n}\n\nfunction evaluate(env: Environment, expr: Expression): Value | RuntimeError {\n    switch (expr.kind) {\n        case ExpressionType.Number:\n            return { kind: ValueType.Number, val: expr.expression as number }\n        case ExpressionType.Ident:\n            // look up the identifier name in the environment\n            // if it exists, return the corresponding value\n            // otherwise, return an unknown identfier error\n            const name = (expr.expression as Ident).name\n            if (env.values.has(name)) {\n                return _.clone(env.values.get(name)!);\n            }\n            return runtime_error(RuntimeErrorCode.UnknownIdentifier,\n                `Unknown identifier ${name}`, expr.meta);\n    }\n}\n\nfunction value_as_int(v: Value): number | RuntimeError {\n    if (v.kind === ValueType.Number) {\n        return v.val as number;\n    }\n    return runtime_error(RuntimeErrorCode.ValueError,\n        `Could not convert ${JSON.stringify(v)} to int`);\n}\n\nfunction evaluate_repeat_header(env: Environment, number: Expression, meta: Meta): number | RuntimeError {\n    const repeat_eval = evaluate(env, number);\n    if (repeat_eval instanceof RuntimeError) {\n        return repeat_eval;\n    }\n    const repeat_count = value_as_int(repeat_eval);\n    if (repeat_count instanceof RuntimeError) {\n        return repeat_count;\n    }\n\n    if (repeat_count < 0) {\n        return runtime_error(RuntimeErrorCode.ArgumentError,\n            `Repeat with negative number of iterations: ${repeat_count}`, meta)\n    }\n    return repeat_count;\n}\n\nfunction evaluate_arg_list(env: Environment, invo: Invocation): Value[] | RuntimeError {\n    const vals: Value[] = [];\n    for (let arg of invo.args) {\n        const x = evaluate(env, arg);\n        if (x instanceof RuntimeError) {\n            return x;\n        }\n        vals.push(x);\n    }\n    return vals;\n}\n\nfunction lookup_procedure(env: Environment, invo: Invocation, meta: Meta): Procedure | RuntimeError {\n    if (env.procedures.has(invo.name)) {\n        return _.clone(env.procedures.get(invo.name)!);\n    }\n    return runtime_error(RuntimeErrorCode.UnknownIdentifier,\n        `Unknown procedure ${invo.name}`, meta);\n}\n\nfunction create_env_for_procedure(env: Environment, procedure: Procedure,\n    invo: Invocation, meta: Meta): Environment | RuntimeError {\n    const vals = evaluate_arg_list(env, invo);\n    if (vals instanceof RuntimeError) {\n        return vals;\n    }\n\n    // check that the number of arguments matches the number of parameters\n    const arity = vals.length;  // arity means the number of arguments\n    if (arity !== procedure.params.length) {\n        return runtime_error(RuntimeErrorCode.ArityMismatch,\n            `Procedure ${invo.name} expects ${procedure.params.length} arguments, received ${arity}`);\n    }\n\n    // update the environment with the local variables\n    const new_env = _.cloneDeep(env);\n    for (let [name, value] of _.zip(procedure.params, vals)) {\n        new_env.values.set(name!, value!);  // we know these won't be undefined because arity matches\n    }\n    return new_env;\n}\n\nexport enum SimulatorState {\n    Running = \"running\",\n    Stopped = \"stopped\",\n    Paused = \"paused\",\n    Finished = \"finished\"\n}\n\n/// take a repeat statement and a count and return a new repeat statment with one lower count\nfunction decrement_repeat(stmt: Statement, count: number): Statement {\n    let repeat = stmt.stmt as Repeat;\n    return {\n        kind: StatementType.Repeat,\n        meta: stmt.meta,\n        stmt: {\n            number: {\n                kind: ExpressionType.Number,\n                meta: repeat.number.meta,\n                expression: count - 1\n            },\n            body: repeat.body\n        }\n    }\n}\n\n/// A Kobold simulator for simulating one command at a time\n/// Useful for animating program execution and generating sequence of world states\nexport class IncrementalSimulator {\n    world: WorldState\n    base_env: Environment\n\n    sim_state: SimulatorState\n    execution_stack: [Statement, Environment][]  // stack of statements to be executed\n\n    TICKS_PER_SECOND = 60;\n    ticks_per_command = 30;  // controlled by speed slider\n    last_stmt_exec_time = 0;\n    total_steps = 0;\n\n    constructor(world: WorldState, program: Program) {\n        this.world = world;\n        this.sim_state = SimulatorState.Stopped;\n        this.execution_stack = [];\n        this.base_env = _.cloneDeep(baseline_environment!);\n\n        // go through program and process procedure definitions\n        // push statements onto the execution stack---program.body is reversed so they end up in the correct order\n        for (let s of program.body.slice().reverse()) {\n            switch (s.kind) {\n                case \"procedure\":\n                    this.base_env.procedures.set(s.name, _.cloneDeep(s))\n                    break;\n\n                default:\n                    this.execution_stack.push([s as Statement, this.base_env]);\n            }\n        }\n    }\n\n    is_running(): boolean {\n        return this.sim_state === SimulatorState.Running;\n    }\n\n    set_running() {\n        this.sim_state = SimulatorState.Running;\n    }\n\n    is_finished(): boolean {\n        return this.sim_state === SimulatorState.Finished;\n    }\n\n    set_finished() {\n        this.sim_state = SimulatorState.Finished;\n    }\n\n    is_stopped(): boolean {\n        return this.sim_state === SimulatorState.Stopped;\n    }\n\n    set_stopped() {\n        this.sim_state = SimulatorState.Stopped;\n    }\n\n    execute_to_command(): void | RuntimeError {\n        // an empty execution_stack indicates there's nothing left to run, so mark as finished\n        if (this.execution_stack.length === 0) {\n            this.set_finished();\n            return;\n        }\n\n        // don't execute unless the simulator is running\n        if (!this.is_running()) {\n            // this could be an error\n            return;\n        }\n\n        const [stmt, env] = this.execution_stack.pop()!;\n        switch (stmt.kind) {\n            case StatementType.Repeat:\n                let repeat = stmt.stmt as Repeat;\n                let repeat_count = evaluate_repeat_header(env, repeat.number, stmt.meta);\n                if (repeat_count instanceof RuntimeError) {\n                    return repeat_count;\n                }\n                // repeat is not a command\n                // so what we do is push a new repeat with one less count (if count > 1)\n                // then push the body of the repeat so it gets executed next\n                // finally return a recursive call (i.e., continue executing since we haven't hit a command)\n                if (repeat_count > 1) {\n                    this.execution_stack.push([decrement_repeat(stmt, repeat_count), env]);\n                }\n                for (let s of repeat.body.slice().reverse()) {\n                    this.execution_stack.push([s, env]);\n                }\n                return this.execute_to_command();\n\n            case StatementType.Execute:\n                let exec = stmt.stmt as Execute;\n                let procedure = lookup_procedure(env, exec.invoke, stmt.meta);\n                if (procedure instanceof RuntimeError) {\n                    return procedure;\n                }\n                let new_env = create_env_for_procedure(env, procedure, exec.invoke, stmt.meta);\n                if (new_env instanceof RuntimeError) {\n                    return new_env;\n                }\n                // push body of procedure onto the stack with new environment\n                for (let s of procedure.body.slice().reverse()) {\n                    this.execution_stack.push([s, new_env]);\n                }\n                // continue executing recursively\n                return this.execute_to_command();\n\n            case StatementType.Command:\n                let command = stmt.stmt as Command;\n                let args = evaluate_arg_list(env, command.invoke);\n                if (args instanceof RuntimeError) {\n                    return args;\n                }\n                // we've reached a command (base case), execute it using the WorldState\n                let result = this.world.execute({\n                    name: command.invoke.name,\n                    args: args,\n                    meta: stmt.meta\n                });\n                if (result instanceof RuntimeError) {\n                    return result;\n                }\n                break;\n        }\n    }\n}\n\n/// A Kobold simulator for running a program straight through to the end\n/// mostly useful for testing parsing and other language infrastructure\nexport class RecursiveSimulator {\n    world: WorldState\n\n    constructor(world: WorldState) {\n        this.world = world;\n    }\n\n    execute_to_end(env: Environment, stmt: Statement): void | RuntimeError {\n        switch (stmt.kind) {\n            case StatementType.Repeat:\n                let repeat = stmt.stmt as Repeat;\n                let repeat_count = evaluate_repeat_header(env, repeat.number, stmt.meta);\n                if (repeat_count instanceof RuntimeError) {\n                    return repeat_count;\n                }\n                for (let i = 0; i < repeat_count; i++) {\n                    let block_result = this.execute_block_to_end(env, repeat.body);\n                    if (block_result instanceof RuntimeError) {\n                        return block_result;\n                    }\n                }\n                break;\n\n            case StatementType.Execute:\n                let exec = stmt.stmt as Execute;\n                let procedure = lookup_procedure(env, exec.invoke, stmt.meta);\n                if (procedure instanceof RuntimeError) {\n                    return procedure;\n                }\n                let new_env = create_env_for_procedure(env, procedure, exec.invoke, stmt.meta);\n                if (new_env instanceof RuntimeError) {\n                    return new_env;\n                }\n                let block_result = this.execute_block_to_end(new_env, procedure.body);\n                if (block_result instanceof RuntimeError) {\n                    return block_result;\n                }\n                break;\n\n            case StatementType.Command:\n                let command = stmt.stmt as Command;\n                let args = evaluate_arg_list(env, command.invoke);\n                if (args instanceof RuntimeError) {\n                    return args;\n                }\n                let result = this.world.execute({\n                    name: command.invoke.name,\n                    args: args,\n                    meta: stmt.meta\n                });\n                if (result instanceof RuntimeError) {\n                    return result;\n                }\n                break;\n        }\n    }\n\n    execute_block_to_end(env: Environment, block: Statement[]): void | RuntimeError {\n        for (let s of block) {\n            let result = this.execute_to_end(env, s);\n            if (result instanceof RuntimeError) {\n                return result;\n            }\n        }\n    }\n\n    run_program_to_end(base_environment: Environment, program: Program): void | RuntimeError {\n        let env = _.cloneDeep(base_environment);\n        for (let s of program.body) {\n            switch (s.kind) {\n                case \"procedure\":\n                    env.procedures.set(s.name, _.cloneDeep(s))\n                    break;\n\n                default:\n                    let result = this.execute_to_end(env, s as Statement);\n                    if (result instanceof RuntimeError) {\n                        return result;\n                    }\n            }\n        }\n    }\n}\n\n/// run program to the end using a RecursiveSimulator, applying any commands to world\nexport default function run(world: WorldState, program: Program): void | RuntimeError {\n    if (baseline_environment) {\n        let sim = new RecursiveSimulator(world);\n        let result = sim.run_program_to_end(baseline_environment, program);\n        if (result instanceof RuntimeError) {\n            console.error(`[RuntimeError] ${result}`);\n            return result;\n        }\n    } else {\n        console.error(\"run called before stdlib is loaded\");\n        return runtime_error(RuntimeErrorCode.CustomError, \"run called before stdlib is loaded\");\n    }\n}\n\nexport let baseline_environment: Environment | null = null;\n\nfunction extract_definitions(program: Program): Environment {\n    let env = new Environment();\n    for (let stmt of program.body) {\n        if (stmt.kind === \"procedure\") {\n            let p = stmt as Procedure;\n            env.procedures.set(p.name, _.cloneDeep(p));\n        }\n    }\n    return env;\n}\n\nexport function load_stdlib() {\n    let ast = parse(StdLibText);\n    if (ast instanceof SyntaxError) {\n        console.error(`Error parsing stdlib: ${JSON.stringify(ast)}`);\n        return;\n    }\n    let env = extract_definitions(ast);\n    if (env instanceof RuntimeError) {\n        console.error(`Error loading stdlib: ${JSON.stringify(env)}`);\n        return;\n    }\n    baseline_environment = env;\n}","export const StdLibText = `\ndefine Forward(x)\n    repeat x times\n        command forward()\n\ndefine Left()\n    command left()\n\ndefine Right()\n    command right()\n\ndefine Up(x)\n    repeat x times\n        command up()\n\ndefine Down(x)\n    repeat x times\n        command down()\n\ndefine PlaceCube(color)\n    command cube(color)\n\ndefine RemoveCube()\n    command remove()\n`;","export function mapHasVector3(map: Map<THREE.Vector3, any>, vec: THREE.Vector3): boolean {\n    for (let [key, _val] of map) {\n        if (key.equals(vec)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function mapGetVector3<T>(map: Map<THREE.Vector3, T>, vec: THREE.Vector3): T | undefined {\n    for (let [key, val] of map) {\n        if (key.equals(vec)) {\n            return val;\n        }\n    }\n}\n\nexport function mapDeleteVector3(map: Map<THREE.Vector3, any>, vec: THREE.Vector3): boolean {\n    for (let [key, _val] of map) {\n        if (key.equals(vec)) {\n            map.delete(key);\n            return true;\n        }\n    }\n    return false;\n}\n","import * as THREE from 'three';\nimport { SimCommand, RuntimeError, RuntimeErrorCode, runtime_error, \n    ValueType } from './Simulator';\nimport _ from 'lodash';\nimport { mapDeleteVector3, mapHasVector3 } from './Util';\n\nexport const UP = new THREE.Vector3(0, 0, 1);\nexport const DOWN = new THREE.Vector3(0, 0, -1);\n\nfunction extract_single_int_arg(command: SimCommand): number | RuntimeError {\n    if (command.args.length > 1) {\n        return runtime_error(RuntimeErrorCode.CustomError, \n            `Expected 1 argument to ${command.name}`, command.meta);\n    }\n    if (command.args[0] && command.args[0].kind === ValueType.Number) {\n        return command.args[0].val as number;\n    }\n    return runtime_error(RuntimeErrorCode.CustomError,\n        `Expected an integer argument to ${command.name}`, command.meta);\n}\n\nexport default class WorldState {\n    dragon_pos: THREE.Vector3\n    dragon_dir: THREE.Vector3\n    // cube_map maps Vector3 positions to integers representing color\n    cube_map: Map<THREE.Vector3, number>\n    dirty: boolean = false;\n\n    constructor() {\n        this.dragon_pos = new THREE.Vector3(0, 0, 0);\n        this.dragon_dir = new THREE.Vector3(1, 0, 0);\n        this.cube_map = new Map<THREE.Vector3, number>();\n    }\n\n    mark_dirty() {\n        this.dirty = true;\n    }\n\n    mark_clean() {\n        this.dirty = false;\n    }\n\n    execute(command: SimCommand): void | RuntimeError {\n        switch (command.name) {\n            case \"forward\":\n                this.dragon_pos.add(this.dragon_dir);\n                break;\n            case \"up\":\n                this.dragon_pos.add(UP);\n                break;\n            case \"down\":\n                if (this.dragon_pos.z === 0) {\n                    return;  // dragon should not be able to pass below the plane, \n                             // return early here to avoid marking as dirty state that did not change\n                }\n                this.dragon_pos.add(DOWN);\n                break;\n            case \"left\":\n                this.dragon_dir = new THREE.Vector3(-this.dragon_dir.y, \n                                                    this.dragon_dir.x,\n                                                    this.dragon_dir.z);\n                break;\n            case \"right\":\n                this.dragon_dir = new THREE.Vector3(this.dragon_dir.y, \n                                                    -this.dragon_dir.x,\n                                                    this.dragon_dir.z);\n                break;\n            case \"cube\":\n                let color_id = extract_single_int_arg(command);\n                if (color_id instanceof RuntimeError) {\n                    return color_id;\n                }\n                // only has an affect when a cube is not already present\n                if (!mapHasVector3(this.cube_map, this.dragon_pos)) {\n                    this.cube_map.set(this.dragon_pos.clone(), color_id);\n                } else {\n                    return; // return early to avoid marking dirty an unchanged state\n                }\n                break;\n            case \"remove\":\n                if (!mapDeleteVector3(this.cube_map, this.dragon_pos)) {\n                    return; // return early to avoid marking dirty an unchanged state\n                }\n                break;\n            default:\n                return runtime_error(RuntimeErrorCode.CustomError, \n                    `Unknown command ${command.name}`, command.meta);\n        }\n        this.mark_dirty();\n    }\n\n    // custom serialization functions needed since JSON module can't handle Map objects\n    // TODO serialization/deserialization tests\n\n    toJSON() {\n        const { cube_map, ...clone } = this;\n        const temp = {\n            cube_map: JSON.stringify([...cube_map]),\n            ...clone\n        }\n        return temp;\n    }\n\n    static fromJSON(s: string): WorldState {\n        const temp = JSON.parse(s);\n        const ws = new WorldState();\n        ws.dragon_pos = temp.dragon_pos;\n        ws.dragon_dir = temp.dragon_dir;\n        ws.dirty = temp.dirty;\n        ws.cube_map = new Map(JSON.parse(temp.cube_map));\n        return ws;\n    }\n}\n","import _ from \"lodash\"\nimport * as THREE from \"three\"\nimport { GameState } from \"./App\"\nimport parse, { SyntaxError } from \"./Parser\"\nimport run from \"./Simulator\"\nimport { mapHasVector3 } from \"./Util\"\nimport WorldState from \"./WorldState\"\n\nconst IMG_FILE_MAP = new Map([\n    [\"forward\", \"media/DA2-forward.png\"],\n    [\"set\", \"media/blockSvgs/set.svg\"],\n    [\"left\", \"media/blockSvgs/left.svg\"],\n    [\"right\", \"media/DA2-right.png\"],\n    [\"placecube\", \"media/DA2-place-cube.png\"],\n    [\"removecube\", \"media/DA2-remove-cube.png\"],\n    [\"variable\", \"media/variable.png\"],\n    [\"rotate\", \"media/DA2-rotate.png\"],\n    [\"scroll\", \"media/DA2-tilt.png\"],\n    [\"square\", \"media/DA2-cube.png\"],\n    [\"x\", \"media/x.png\"],\n    [\"forwardx\", \"media/forwardx.png\"],\n    [\"get\", \"media/get.png\"],\n    [\"up\", \"media/DA2-up.png\"],\n    [\"down\", \"media/DA2-down.png\"],\n    [\"repeat\", \"media/DA2-repeat.png\"],\n    [\"repeat4\", \"media/blockSvgs/repeat4.svg\"],\n    [\"repeat5\", \"media/blockSvgs/repeat5.svg\"],\n    [\"repeat9\", \"media/blockSvgs/repeat9.svg\"],\n    [\"SquareProc\", \"media/blockSvgs/SquareProc.svg\"],\n    [\"upcube\", \"media/upcube.png\"],\n    [\"FixedCastleProc\", \"media/blockSvgs/FixedCastleProc.svg\"],\n    [\"FixedTowerProc\", \"media/blockSvgs/FixedTowerProc.svg\"],\n    [\"FixedWallProc\", \"media/blockSvgs/FixedWallProc.svg\"],\n    [\"run\", \"media/DA2-run-button.png\"],\n    [\"rotateCW\", \"media/rotateCWButton.png\"],\n    [\"rotateCCW\", \"media/rotateCCWButton.png\"],\n    [\"camera\", \"media/DA2-camera-controls.png\"],\n    [\"learn\", \"media/learnButton.png\"],\n    [\"workshop\", \"media/workshopButton.png\"],\n    [\"clear\", \"media/clearSandboxButton.png\"],\n    [\"speedSlider\", \"media/DA2-speed-slider.png\"],\n    [\"done\", \"media/doneButton.png\"],\n    [\"pinkboxGround\", \"media/DA2-dragon-pos-cube.png\"],\n    [\"pinkboxUp\", \"media/pinkboxUp.png\"],\n    [\"castle\", \"media/blockSvgs/castle.svg\"],\n    [\"wall\", \"media/blockSvgs/wall.svg\"],\n    [\"tower\", \"media/blockSvgs/tower.svg\"],\n    [\"towerlayer\", \"media/blockSvgs/towerlayer.svg\"],\n    [\"towertop\", \"media/blockSvgs/towertop.svg\"],\n    [\"wallsheet\", \"media/blockSvgs/wallsheet.svg\"],\n    [\"walltop\", \"media/blockSvgs/walltop.svg\"],\n    [\"pillarProc\", \"media/blockSvgs/pillarProc.svg\"],\n    [\"procDef\", \"media/blockSvgs/procDef.svg\"],\n    [\"procedure\", \"media/DA2-procedure.png\"],\n    [\"bridge\", \"media/DA2-bridge.png\"],\n    [\"cube\", \"media/Da2-cube.png\"],\n    [\"purple_cube\", \"media/purple_cube.png\"],\n    [\"menu_btn\", \"media/menu_btn.png\"]]);\n\n// replace each word inside {} with the corresponding html produced by makeImgHtml (if applicable)\nfunction process_instruction_string(str: string) {\n    return \"Goal: \" + str.replace(/{(\\w+)}/g, (match, id) => {\n        if (IMG_FILE_MAP.get(id)!.substring(IMG_FILE_MAP.get(id)!.length-3) === \"png\") {\n            return IMG_FILE_MAP.has(id)\n                ? `<object class=\"instructions-png\" data=\"${IMG_FILE_MAP.get(id)}\"></object>`\n                : match;\n        }\n        else {\n            return IMG_FILE_MAP.has(id)\n                ? `<object class=\"instructions-svg\" data=\"${IMG_FILE_MAP.get(id)}\"></object>`\n                : match;\n        }\n    });\n}\n\nexport enum GoalInfoType {\n    DragonPos = \"position\",  // goals only care about dragon position, not direction\n    AddCube = \"addcube\",\n    RemoveCube = \"removecube\",\n    RunOnly = \"runonly\",\n    MinCube = \"mincube\"\n}\n\nexport type GoalInfo = {\n    kind: GoalInfoType\n    position?: THREE.Vector3  // only present for DragonPos and add/remove Cube kinds\n    value?: number            // only present for MinCube kind\n}\n\n// available code blocks, strings must be keys in BlocklyComp.COMMANDS\n// restricted: these blocks should not appear in the toolbox\n// required: these blocks must appear in the toolbox\n// granted: these blocks become available in the sandbox after completing this puzzle\ntype LibrarySpec = {\n    restricted: string[]\n    required: string[]\n    granted: string[]\n}\n\n// starting cubes\ntype CubeSpec = {\n    pos: number[]\n    color: number\n}\n\n// starting world state\ntype WorldSpec = {\n    pos: number[]\n    dir: number[]\n    cubes?: CubeSpec[]  // undefined indicates no starting cubes\n}\n\nenum GoalType {\n    Solution = \"solution\",  // dragon moves, cubes added/removed based on a solution program\n    RunOnly = \"run_only\",\n    MinCube = \"min_cube\"\n}\n\nexport type PuzzleSpec = {\n    name: string\n    tag: string\n    library: LibrarySpec\n    world: WorldSpec\n    program?: string      // file containing starting program; undefined indicates no starting code\n    solution?: string     // file containing solution program; undefined for run-only and min cubes goal types\n    goal: GoalType\n    goalValue?: number    // number of cubes for a min cube goal\n    instructions: string\n}\n\nfunction make_world_from_spec(spec: WorldSpec): WorldState {\n    let world = new WorldState();\n    world.dragon_pos = new THREE.Vector3(...spec.pos);\n    world.dragon_dir = new THREE.Vector3(...spec.dir);\n    if (spec.cubes) {\n        for (let { pos, color } of spec.cubes) {\n            world.cube_map.set(new THREE.Vector3(...pos), color);\n        }\n    }\n    world.dirty = true;\n    return world;\n}\n\nfunction make_goals_from_world(end: WorldState, start: WorldState): GoalInfo[] {\n    let goals = []\n\n    // check for cubes added, position only\n    for (let [cubePos, _cubeColor] of end.cube_map) {\n        if (!mapHasVector3(start.cube_map, cubePos)) {\n            goals.push({\n                kind: GoalInfoType.AddCube,\n                position: cubePos\n            });\n        }\n    }\n\n    // check for cubes removed, position only\n    for (let [cubePos, _cubeColor] of start.cube_map) {\n        if (!mapHasVector3(end.cube_map, cubePos)) {\n            goals.push({\n                kind: GoalInfoType.RemoveCube,\n                position: cubePos\n            });\n        }\n    }\n\n    // only have a position goal if there are no cube goals\n    if (goals.length === 0) {\n        // only care about dragon position, not direction\n        if (!end.dragon_pos.equals(start.dragon_pos)) {\n            goals.push({\n                kind: GoalInfoType.DragonPos,\n                position: end.dragon_pos\n            });\n        }\n    }\n\n    return goals;\n}\n\nexport default class PuzzleState {\n    start_code: string = \"\"\n    start_world: WorldState = new WorldState()\n    goals: GoalInfo[] = []\n    instructions: string = \"\"\n    library: LibrarySpec = {\n        restricted: [],\n        required: [],\n        granted: []\n    }\n    name: string = \"\"\n    tag: string = \"\"\n    win_callback: () => void = () => { }\n\n\n    print_puzzleState() {\n        let str = \"\";\n        str += \" instructions: \" + this.instructions;\n        str += \" granted: \" + this.library.granted;\n        console.log(\"print_puzzleState: \" + str);\n    }\n\n    check_completed(gamestate: GameState) {\n        if (this.is_complete(gamestate)) {\n            this.win_callback();\n        }\n    }\n\n    // return true if the current game state matches the goals\n    // assumptions: RunOnly, MinCube, DragonPos will be the only goal \n    //              if they are present\n    /* criteria\n        simulator must be finished\n        loop over goals\n            switch on goal.kind\n                RunOnly: true\n                MinCube: check gamestate.world.cube_map for correct number of cubes\n                AddCube: check that this cube exists\n                RemoveCube: check that this cube does not exist\n                DragonPos: check dragon's position\n        check that no extra cubes have been placed\n    */\n    is_complete(gamestate: GameState): boolean {\n        if (!gamestate.simulator.is_finished()) {\n            return false;\n        }\n        let posRequired;\n        for (let goal of this.goals) {\n            switch (goal.kind) {\n                case GoalInfoType.RunOnly:\n                    return true;\n                case GoalInfoType.MinCube:\n                    let minRequired = goal.value as number;\n                    let cubeNum = gamestate.world.cube_map.size;\n                    return cubeNum >= minRequired;\n                case GoalInfoType.AddCube:\n                    posRequired = goal.position as THREE.Vector3;\n                    if (!mapHasVector3(gamestate.world.cube_map, posRequired)) {\n                        return false;\n                    }\n                    break;\n                case GoalInfoType.RemoveCube:\n                    posRequired = goal.position as THREE.Vector3;\n                    if (mapHasVector3(gamestate.world.cube_map, posRequired)) {\n                        return false;\n                    }\n                    break;\n                case GoalInfoType.DragonPos:\n                    let dragonPosRequired = goal.position as THREE.Vector3;\n                    return gamestate.world.dragon_pos.equals(dragonPosRequired);\n            }\n        }\n        return gamestate.world.cube_map.size <= this.goals.length\n    }\n\n    static make_from_file(filename: string, win_callback: () => void) {\n        let state = new PuzzleState();\n        state.win_callback = win_callback;\n\n        /// read in starting program from file\n        let fetchProgram = (data: PuzzleSpec) => {\n            return new Promise<PuzzleSpec>((resolve, reject) => {\n                if (data.program) {\n                    fetch(data.program)\n                        .then(response => response.text())\n                        .then(text => {\n                            state.start_code = text;\n                            resolve(data)\n                        })\n                        .catch(error => {\n                            reject(`Encountered error loading program from ${data.program}, as specified in ${filename}: ${error}`);\n                        });\n                } else {\n                    resolve(data);\n                }\n            });\n        }\n\n\n        /// set up the puzzle's solution, potentially reading it from a file\n        let fetchSolution = (data: PuzzleSpec) => {\n            return new Promise<PuzzleSpec>((resolve, reject) => {\n                if (data.goal === GoalType.Solution) {\n                    // these goals depend on the world state after a solution is run, so read in solution from file\n                    if (data.solution) {\n                        fetch(data.solution)\n                            .then(response => response.text())\n                            .then(text => {\n                                let program = parse(text);  // parse solution\n                                if (program instanceof SyntaxError) {\n                                    reject(`Syntax error when parsing solution ${text} from ${filename}: ${program}`);\n                                } else {\n                                    // run solution and use the differences from starting state to generate goals\n                                    let world = make_world_from_spec(data.world);\n                                    run(world, program);\n                                    state.goals = make_goals_from_world(world, state.start_world);\n                                    resolve(data);\n                                }\n                            })\n                            .catch(error => {\n                                reject(`Encountered error loading solution from ${data.solution}, as specified in ${filename}: ${error}`);\n                            })\n                    } else {\n                        reject(`Puzzle specification ${filename} has goal type ${data.goal}, but does not provide solution file`);\n                    }\n                    // otherwise we have a single goal, either MinCube or RunOnly\n                } else if (data.goal === GoalType.MinCube) {\n                    state.goals = [{\n                        kind: GoalInfoType.MinCube,\n                        value: data.goalValue\n                    }];\n                    resolve(data);\n                } else if (data.goal === GoalType.RunOnly) {\n                    state.goals = [{\n                        kind: GoalInfoType.RunOnly\n                    }];\n                    resolve(data);\n                } else {\n                    reject(`Unrecognized goal type ${data.goal} in ${filename}`);\n                }\n            });\n        }\n\n        return new Promise<PuzzleState>(resolve => {\n            fetch(filename)\n                .then(response => { return response.json() })\n                .then((data: PuzzleSpec) => {\n                    state.start_world = make_world_from_spec(data.world);\n                    state.library = data.library;\n                    state.name = data.name;\n                    state.tag = data.tag;\n                    state.instructions = process_instruction_string(data.instructions)\n                    return data;\n                })\n                .then(fetchProgram)\n                .then(fetchSolution)\n                .then(() => {\n                    resolve(state);\n                })\n                .catch(error => console.error(error));\n        });\n    }\n}\n\nexport let SANDBOX_STATE = new PuzzleState();","// Overview: This file contains code that displays the dragon and cubes\nimport React from 'react';\nimport * as THREE from 'three';\nimport { GameState } from './App';\nimport { GoalInfo, GoalInfoType } from './PuzzleState';\nimport { mapHasVector3 } from './Util';\nimport Blockly from 'blockly';\nimport Slider from './Slider';\nimport { CameraZoomIn, CameraZoomOut, CameraRotateRight, CameraRotateLeft, CameraTiltDown, CameraTiltUp } from './CameraPositioning';\nimport \"./css/index.css\"\n\n// All constant variables\ntype Constants = {\n    WOBBLE_PERIOD: number,\n    WOBBLE_MAGNITUDE: number,\n    TRANSLATION_SMOOTHNESS: number, // relative speed at which the camera will catch up.\n    ROTATION_SMOOTHNESS: number, // The relative speed at which the camera will catch up.\n    MAX_ANIMATION_TIME: number, // if animation would take longer than this, take this time and then just sit idle\n    MIN_ANIMATION_TIME: number, // if animation would take less than this, just don't bother animating anything\n    loader: THREE.TextureLoader, // Allows us to load in textures (plane, cubes, etc.)\n}\n\n// Maps and arrays that contain information about cubes, goalCubes, colors, and materials\ntype StorageMaps = {\n    cubeColors: string[], // These are all the possible colors of the cubes placed by the dragon\n    cubes: Map<string, THREE.Mesh[]>, // Map that holds all placed cubes categorized by color\n    goalCubes: Map<string, THREE.Mesh[]>, // Map that holds all placed goal cubes (or puzzle cubes) categorized by color\n    cubeMats: Map<string, THREE.MeshLambertMaterial>, // List containing the materials of each cube \"in order\" of color\n}\n\n// All variables that store information about the camera\ntype CameraPos = {\n    relativeCamPos: THREE.Vector3,\n    // Offsets are needed to make dragon appear above the placement of the cubes, and to appear in the center of the plane\n    dragonOffset: THREE.Vector3, // How much the dragon is offSet from center of position\n    cubeOffset: THREE.Vector3, // How much cubes are offset from center of position\n    relativeCamPosMag: number,\n    upVector: THREE.Vector3\n}\n\n// The camera, scene, and renderer variables\ntype Main = {\n    scene: THREE.Scene,\n    camera: THREE.PerspectiveCamera,\n    oldCamQ: THREE.Quaternion,\n    renderer: THREE.WebGLRenderer\n}\n\n// This type holds information about the clock (which is used for animation)\ntype ClockStuff = {\n    clock: THREE.Clock,\n    time: number\n}\n\n// This type holds the dragon's final position and quaternion\ntype FinalValues = {\n    finalDragPos: THREE.Vector3,\n    finalDragQ: THREE.Quaternion,\n}\n\n// This type holds information about the geometries of the cubes, light, plane, and dragon\ntype Geometries = {\n    // Cube geometry, materials, and mesh\n    cubeGeo: THREE.BoxGeometry,\n    goalGeo: THREE.BoxGeometry,\n    cubeGoalMat: THREE.MeshLambertMaterial,\n    dragonGoalMat: THREE.MeshLambertMaterial,\n    goalShadow: THREE.Mesh,\n\n    // Light\n    light: THREE.DirectionalLight,\n\n    // Plane geometry, material, and mesh\n    planeGeometry: THREE.PlaneBufferGeometry,\n    planeMaterial: THREE.MeshBasicMaterial,\n    plane: THREE.Mesh,\n\n    // Dragon\n    dragonGeometry: THREE.SphereGeometry,\n    dragon: THREE.Mesh,\n    dragonNose: THREE.ArrowHelper, // This is the \"nose\" on the dragon that points to where it's going\n    geometry: THREE.PlaneBufferGeometry,\n\n    // zCue plane (indicates which square the dragon is on if its z-value is higher than 0)\n    zCuePlane: THREE.Mesh\n}\n\n// This type holds information about the dragon's animation\ntype DragonAnimation = {\n    animStatus: Animation,\n    waitTime: number,\n    animTime: number,\n    animPerSec: number\n}\n\n// This type holds the available and filled optimization maps\ntype OptimizationMaps = {\n    available: Map<string, THREE.Mesh[]>, // Map that contains all cubes that don't currently have positions\n    filled: Map<THREE.Vector3, THREE.Mesh>// Map that contains all positions on the display that are currently filled\n}\n\n// This enum represents what stage the animation is at (waiting, animating, done, null) and is used by the animStatus variable\nenum Animation {\n    waiting = \"waiting\",\n    animating = \"animating\",\n    done = \"done\",\n    null = \"null\"\n}\n\n// The Display.tsx function that does everything\nexport default class Display extends React.Component<GameState> {\n    divRef: React.RefObject<HTMLDivElement>;\n    // Initialize all types + enums in constructor\n    constantValues: Constants;\n    storageMaps: StorageMaps;\n    mainStuff: Main;\n    cameraPos: CameraPos;\n    clockStuff: ClockStuff;\n    geometries: Geometries;\n    dragAnimation: DragonAnimation;\n    finalValues: FinalValues;\n    cubeOptMaps: OptimizationMaps;\n    goalOptMaps: OptimizationMaps;\n    puzzleInit: string;\n\n    // Constructor method!\n    constructor(props: GameState) {\n        super(props);\n        this.constantValues = {\n            WOBBLE_PERIOD: 4,\n            WOBBLE_MAGNITUDE: 0.05,\n            TRANSLATION_SMOOTHNESS: 1.5,\n            ROTATION_SMOOTHNESS: 5.0,\n            MAX_ANIMATION_TIME: .4,\n            MIN_ANIMATION_TIME: 0.1,\n            loader: new THREE.TextureLoader(),\n        }\n\n        this.storageMaps = {\n            cubeColors: Blockly.FieldColour.COLOURS,\n            cubes: new Map<string, THREE.Mesh[]>(),\n            goalCubes: new Map<string, THREE.Mesh[]>(),\n            cubeMats: new Map<string, THREE.MeshLambertMaterial>()\n        }\n\n        this.cameraPos = {\n            // Camera positioning\n            relativeCamPos: new THREE.Vector3(-15, 0, 12),\n            // Offsets are needed to make dragon appear above the placement of the cubes, and to appear in the center of the plane\n            dragonOffset: new THREE.Vector3(0.5, 0.5, 1.5), // How much the dragon is offSet from center of position\n            cubeOffset: new THREE.Vector3(0.5, 0.5, 0.5), // How much cubes are offset from center of position\n            relativeCamPosMag: 0,\n            upVector: new THREE.Vector3(0, 0, 1)\n        }\n\n        this.mainStuff = {\n            scene: new THREE.Scene(),\n            camera: new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1500),\n            oldCamQ: new THREE.Quaternion(),\n            renderer: new THREE.WebGLRenderer({ antialias: true }),\n        }\n\n        this.mainStuff.renderer.setSize(window.innerWidth / 2, window.innerHeight / 2) // Makes renderer half the size of the window\n\n        // Camera: initial values\n        this.mainStuff.camera.position.copy(this.cameraPos.relativeCamPos);\n        this.mainStuff.camera.lookAt(new THREE.Vector3(0, 0, 0));\n        this.mainStuff.camera.up.set(0, 0, 1);\n        this.mainStuff.camera.aspect = window.innerWidth / window.innerHeight;\n        this.mainStuff.camera.updateProjectionMatrix();\n\n        // Defines clock (used for animation) and sets time to 0\n        this.clockStuff = {\n            clock: new THREE.Clock(),\n            time: 0\n        }\n\n        // Initializes values for final position and quaternion of dragon\n        this.finalValues = {\n            finalDragPos: new THREE.Vector3(),\n            finalDragQ: new THREE.Quaternion()\n        }\n\n        // Initializes values for geometries and lights\n        this.geometries = {\n            // Cube geometry, materials, and mesh\n            cubeGeo: new THREE.BoxGeometry(1, 1, 1),\n            goalGeo: new THREE.BoxGeometry(1.1, 1.1, 1.1),\n            cubeGoalMat: new THREE.MeshLambertMaterial({ color: \"#4078E6\", transparent: true, opacity: 0.5 }),\n            dragonGoalMat: new THREE.MeshLambertMaterial({ color: \"#df67be\", transparent: true, opacity: 0.5 }),\n            goalShadow: new THREE.Mesh(new THREE.PlaneBufferGeometry(1, 1, 32),\n                new THREE.MeshBasicMaterial({ color: \"#686868\", transparent: true, opacity: 0.31, side: THREE.DoubleSide })),\n\n            // Light\n            light: new THREE.DirectionalLight(\"#ffffff\", 1.74),\n\n            // Plane geometry, material, and mesh\n            planeGeometry: new THREE.PlaneBufferGeometry(100, 100, 32),\n            planeMaterial: new THREE.MeshBasicMaterial(),\n            plane: new THREE.Mesh(),\n\n            // Dragon\n            dragonGeometry: new THREE.SphereGeometry(0.5, 32, 32),\n            dragon: new THREE.Mesh(new THREE.SphereGeometry(0.5, 32, 32), new THREE.MeshLambertMaterial({ color: \"#f56e90\" })),\n            dragonNose: new THREE.ArrowHelper(new THREE.Vector3(1, 0, 0), new THREE.Vector3(0, 0, 0), 1, \"#ff0000\", 0.5, 0.2),\n            geometry: new THREE.PlaneBufferGeometry(1, 1, 32),\n\n            // zCue plane\n            zCuePlane: new THREE.Mesh(new THREE.PlaneBufferGeometry(1, 1, 32), new THREE.MeshBasicMaterial({ color: \"#686868\", transparent: true, opacity: 0.8, side: THREE.DoubleSide }))\n        }\n\n        // Set the dragon's starting position and nose position from the world props\n        this.geometries.dragon.position.copy(this.props.world.dragon_pos).add(this.cameraPos.dragonOffset);\n\n        // Set starting values for the dragon's animation\n        this.dragAnimation = {\n            animStatus: Animation.null,\n            waitTime: 0,\n            animTime: 0,\n            animPerSec: .4\n        }\n\n        // OptimizationMaps for cubes that the dragon places\n        this.cubeOptMaps = {\n            available: new Map<string, THREE.Mesh[]>(),\n            filled: new Map<THREE.Vector3, THREE.Mesh>()\n        }\n\n        // OptimizationMaps for goal cubes defined by puzzleState\n        this.goalOptMaps = {\n            available: new Map<string, THREE.Mesh[]>(),\n            filled: new Map<THREE.Vector3, THREE.Mesh>()\n        }\n\n        // This is the texture of the cubes that are placed by the dragon\n        let cubeTexture = this.constantValues.loader.load(\"media/canvas_cube.png\");\n\n        // For loop to create the meshes of each cube and store them in cubeMats (array) and cubes (map)\n        this.storageMaps.cubeColors.forEach((color: string) => {\n            this.storageMaps.cubeMats.set(color, new THREE.MeshLambertMaterial({ color: color, map: cubeTexture }));\n            this.storageMaps.cubes.set(color, []);\n        });\n\n        // Sets the goal cubes map. Will contain all goal cubes in the game, like the \"cubes\" variable (map)\n        this.storageMaps.goalCubes.set(`#${this.geometries.cubeGoalMat.color.getHexString()}`, []);\n        this.storageMaps.goalCubes.set(`#${this.geometries.dragonGoalMat.color.getHexString()}`, []);\n\n        // Set puzzle initialization = false. This means that a puzzle has not been drawn on the display\n        this.puzzleInit = \"\";\n\n        this.cameraPos.relativeCamPosMag = this.cameraPos.relativeCamPos.length() - 0.5;\n\n        // Setting up light\n        this.geometries.light.position.set(-0.56, -0.32, 0.77);\n        this.mainStuff.scene.add(this.geometries.light);\n        this.mainStuff.scene.add(new THREE.AmbientLight(\"#404040\"));\n\n        // Setting up plane texture\n        let planeTexture = this.constantValues.loader.load(\"media/grass_texture.png\");\n        planeTexture.wrapS = THREE.RepeatWrapping;\n        planeTexture.wrapT = THREE.RepeatWrapping;\n        planeTexture.repeat.set(100, 100);\n        this.geometries.planeMaterial.setValues({ map: planeTexture, side: THREE.DoubleSide });\n        this.geometries.plane = new THREE.Mesh(this.geometries.planeGeometry, this.geometries.planeMaterial);\n        this.mainStuff.scene.add(this.geometries.plane);\n\n        // Adding dragon, dragon nose, and zCuePlane to scene\n        this.geometries.dragon.add(this.geometries.dragonNose);\n        this.mainStuff.scene.add(this.geometries.dragon);\n        this.mainStuff.scene.add(this.geometries.zCuePlane);\n\n        // Skybox + background texture\n        let path = \"media/skybox/\";\n        let format = \".jpg\";\n        // It's not clear to me three js does what it says it does with the six images, but I've got everything lining\n        // up via trial and error\n        let backgroundTexture = [path + \"px\" + format, path + \"nx\" + format,\n        path + \"py\" + format, path + \"ny\" + format,\n        path + \"pz\" + format, path + \"nz\" + format];\n        let cubeLoader = new THREE.CubeTextureLoader();\n        this.mainStuff.scene.background = cubeLoader.load(backgroundTexture);\n\n        // Initialize available maps for cubes, goal cubes, and dragon goal cubes\n        this.storageMaps.cubeColors.forEach((color: string) => {\n            this.cubeOptMaps.available.set(color, []); // Set each color in available map to an empty array\n        });\n\n        // Craete divRed\n        this.divRef = React.createRef();\n    }\n\n    // Position the shadow underneath the dragon\n    positionZCue() {\n        // Find nearest filled cell below dragon\n        // Use dragon.position (instead of this.props.dragon_pos), so zOffset is correct when animating\n        // Use Math.floor to compensate for dragonOffset\n        let zOffset = this.geometries.dragon.position.z;\n        let vec = new THREE.Vector3();\n        for (let z = Math.floor(this.geometries.dragon.position.z); z >= 0; z--) {\n            if (mapHasVector3(this.props.world.cube_map, vec.set(Math.floor(this.geometries.dragon.position.x), Math.floor(this.geometries.dragon.position.y), z))) {\n                zOffset -= z + (this.cameraPos.dragonOffset.z - this.cameraPos.cubeOffset.z);\n                this.geometries.zCuePlane.position.copy(this.geometries.dragon.position);\n                this.geometries.zCuePlane.translateZ(-zOffset + 0.1); // offset a bit to avoid z-fighting\n                return;\n            }\n        }\n        // Position when there's no cube below\n        this.geometries.zCuePlane.position.copy(this.geometries.dragon.position);\n        this.geometries.zCuePlane.translateZ(-zOffset + 0.1); // offset a bit to avoid z-fighting\n    };\n\n    // Turns degrees to radians (useful for camera rotations and tilts)\n    degreesToRadians(deg: number) {\n        return deg / 180 * Math.PI;\n    };\n\n    // Remove cube\n    removeCube(cube: THREE.Mesh, color: string) {\n        if (!mapHasVector3(this.props.world.cube_map, cube.position)) { // If the cube doesn't have a position property\n            this.mainStuff.scene.remove(cube); // Remove from scene\n            if (cube !== undefined) {\n                if (!this.cubeOptMaps.available.get(color)!.includes(cube)) {\n                    this.cubeOptMaps.available.get(color)!.push(cube);\n                }\n            }\n            this.cubeOptMaps.filled.delete(cube.position);\n            // const index = this.storageMaps.cubes.get(color)?.indexOf(cube);\n            // if (index) {\n            //     this.storageMaps.cubes.get(color)!.splice(index, 1);\n            // }\n        } else { // If the cube has a position property\n            this.cubeOptMaps.filled.set(cube.position, cube); // Set the filled object at that cube object to true\n        }\n    }\n\n    // Add cube\n    addCube(cubePosition: THREE.Vector3, material: THREE.MeshLambertMaterial) {\n        if (!mapHasVector3(this.cubeOptMaps.filled, cubePosition)) { // If this cube position does not exist (is undefined) in filled\n            let existingCube = this.cubeOptMaps.available.get(`#${material.color.getHexString()}`)?.pop(); // Remove the last cube mesh from available list\n            if (existingCube) { // If there is a cube available....\n                existingCube.position.copy(cubePosition).add(this.cameraPos.cubeOffset); // ...Give it the position of the current cube\n                this.mainStuff.scene.add(existingCube);\n                this.cubeOptMaps.filled.set(existingCube.position, existingCube);\n                // const ind = this.storageMaps.cubeColors.indexOf(material.color.getHexString());\n                // this.props.world.cube_map.set(cubePosition.add(this.cameraPos.cubeOffset), ind);\n            } else { // If there isn't a cube mesh available....\n                let newCube: THREE.Mesh = new THREE.Mesh(this.geometries.cubeGeo, material) // ...Create a new cube mesh\n                newCube.position.copy(cubePosition).add(this.cameraPos.cubeOffset);\n                this.storageMaps.cubes.get(`#${material.color.getHexString()}`)!.push(newCube);\n                this.cubeOptMaps.filled.set(newCube.position, newCube);\n                this.mainStuff.scene.add(newCube);\n            }\n        }\n    }\n\n    // Removes puzzle cube\n    removePuzzleCube(cube: THREE.Mesh<THREE.BufferGeometry>) {\n        if (!mapHasVector3(this.props.world.cube_map, cube.position)) { // If the cube doesn't have a position property\n            this.mainStuff.scene.remove(cube); // Remove from scene\n            const index = this.storageMaps.goalCubes.get(this.geometries.cubeGoalMat.color.getHexString())?.indexOf(cube);\n            if (index) {\n                this.storageMaps.goalCubes.get(this.geometries.cubeGoalMat.color.getHexString())!.splice(index, 1);\n            }\n        }\n    }\n\n    // Removes puzzle cube\n    removeDragonCube(cube: THREE.Mesh<THREE.BufferGeometry>) {\n        if (!mapHasVector3(this.props.world.cube_map, cube.position)) { // If the cube doesn't have a position property\n            this.mainStuff.scene.remove(cube); // Remove from scene\n            const index = this.storageMaps.goalCubes.get(this.geometries.dragonGoalMat.color.getHexString())?.indexOf(cube);\n            if (index) {\n                this.storageMaps.goalCubes.get(this.geometries.dragonGoalMat.color.getHexString())!.splice(index, 1);\n            }\n        }\n    }\n\n    addPuzzleCube(cubePosition: THREE.Vector3) {\n        let newCube: THREE.Mesh = new THREE.Mesh(this.geometries.cubeGeo, this.geometries.cubeGoalMat) // ...Create a new cube mesh\n        newCube.position.copy(cubePosition).add(this.cameraPos.cubeOffset);\n        this.storageMaps.goalCubes.get(`#${this.geometries.cubeGoalMat.color.getHexString()}`)?.push(newCube);\n        this.mainStuff.scene.add(newCube);\n    }\n\n    // This adds a dragon position cube (only difference is the offSet - it's 1 z-value higher for the dragon)\n    addDragonCube(cubePosition: THREE.Vector3) {\n        let newCube: THREE.Mesh = new THREE.Mesh(this.geometries.cubeGeo, this.geometries.dragonGoalMat) // ...Create a new cube mesh\n        newCube.position.copy(cubePosition).add(this.cameraPos.dragonOffset);\n        this.storageMaps.goalCubes.get(`#${this.geometries.dragonGoalMat.color.getHexString()}`)?.push(newCube);\n        this.mainStuff.scene.add(newCube);\n    }\n\n    // Simulate function\n    // This function will activate the simulation every X seconds\n    simulate(delta: number) {\n        // Checks to see if the simulator is running (if there are still animations left to do)\n        if (this.props.simulator.is_running()) {\n            this.clockStuff.time += delta; // Add delta to time variable (total time between each time entering second if statement below)\n            if (this.clockStuff.time > this.dragAnimation.animPerSec) { // If the total time is greater than the time you want...\n                this.props.simulator.execute_to_command(); // The command is executed\n                this.clockStuff.time = 0; // Reset time to 0\n                if (this.props.simulator.is_finished()) {\n                    this.props.puzzle?.check_completed(this.props);\n                }\n            }\n        }\n    }\n\n    // This function will update the display (what you see on the screen) using the this.dirty flag\n    updateDisplay() {\n        // Dragon final position and animation times\n        this.finalValues.finalDragPos.copy(this.props.world.dragon_pos).add(this.cameraPos.dragonOffset);\n        this.finalValues.finalDragQ.setFromUnitVectors(new THREE.Vector3(1, 0, 0), this.props.world.dragon_dir); // 1,0,0 is default direction\n        // Hack to avoid weird dip when rotating to face -x direction\n        if (this.props.world.dragon_dir.x === -1) {\n            this.finalValues.finalDragQ.set(0, 0, 1, 0);\n        }\n\n        // waitTime is determined by taking 10% of the animPerSec\n        // animTime is determined by taking the other 90% of the animPerSec (or the maximum animation time if that value is too big)\n        this.dragAnimation.waitTime = this.dragAnimation.animPerSec * 0.1;\n        this.dragAnimation.animTime = Math.min(this.dragAnimation.animPerSec * 0.9, this.constantValues.MAX_ANIMATION_TIME);\n        this.dragAnimation.animStatus = Animation.waiting;\n        if (this.dragAnimation.animTime < this.constantValues.MIN_ANIMATION_TIME) { // If animTime is lower than min animTime...\n            this.dragAnimation.animStatus = Animation.animating; // ...set Animation enum to animating\n        }\n\n        // Placing puzzle cubes!\n        if (this.props.puzzle && this.puzzleInit !== this.props.puzzle.name) { // If the state has a puzzle and it hasn't been initielized yet\n\n            // First remove dragon cubes already placed...\n            if (this.storageMaps.goalCubes.get(`#${this.geometries.dragonGoalMat.color.getHexString()}`)) {\n                this.storageMaps.goalCubes.get(`#${this.geometries.dragonGoalMat.color.getHexString()}`)!.forEach((cube: THREE.Mesh) => { // For each cube.position in the targetFilled map\n                    this.removeDragonCube(cube); // Remove dragon puzzle cubes\n                });\n            }\n\n            // Remove goal cubes already placed...\n            if (this.storageMaps.goalCubes.get(`#${this.geometries.cubeGoalMat.color.getHexString()}`)) {\n                this.storageMaps.goalCubes.get(`#${this.geometries.cubeGoalMat.color.getHexString()}`)!.forEach((cube: THREE.Mesh) => { // For each cube.position in the targetFilled map\n                    this.removePuzzleCube(cube); // Remove the puzzle cube from the map\n                });\n            }\n\n            // Remove user cubes already placed...\n            this.storageMaps.cubeColors.forEach((color: string) => {\n                if (this.storageMaps.cubes.get(color)) {\n                    this.storageMaps.cubes.get(color)!.forEach((cube: THREE.Mesh) => { // For each cube.position in the targetFilled map\n                        this.removeCube(cube, color); // Remove the puzzle cube from the map\n                    });\n                }\n            });\n\n            // ...then start adding in the goal cubes depending on goal type\n            this.props.puzzle.goals.forEach((goal: GoalInfo) => { // Iterate through each cube that should be placed for the puzzle\n                if (goal.kind === GoalInfoType.AddCube) { // If goal.kind is AddCube...\n                    if (goal.position) { //  And if there is a goal.position...\n                        this.addPuzzleCube(goal.position); // Use addCube()\n                    }\n                }\n                if (goal.kind === GoalInfoType.DragonPos) {\n                    if (goal.position) {\n                        this.addDragonCube(goal.position);\n                    }\n                }\n            });\n            this.puzzleInit = this.props.puzzle.name; // Set puzzleInit to true to show that puzzle cubes have been placed\n\n        }\n\n        // This for loop checks for cubes that are no longer in the cube_map and should be removed\n        this.storageMaps.cubeColors.forEach((color: string) => { // Iterate over each color\n            this.storageMaps.cubes.get(color)!.forEach((cube: THREE.Mesh) => { // For each cube (mesh with material and position) in the specified color\n                this.removeCube(cube, color);\n            });\n        });\n\n        // Loop over all cubes in cube map\n        // This loop will add a cube to the display if the cube doesn't have a position\n        for (let [cubePosition, colorInd] of this.props.world.cube_map) {\n            let color: string = this.storageMaps.cubeColors[colorInd];\n            this.addCube(cubePosition, this.storageMaps.cubeMats.get(color)!);\n        }\n        // After display is updated, the world state is no longer dirty\n        this.props.world.mark_clean();\n    }\n\n    // Function that displays things after program \"did mount\"\n    componentDidMount() {\n\n        // Without this, the image doesn't show\n        this.divRef.current?.appendChild(this.mainStuff.renderer.domElement);\n\n        // This animates the scene. In the animate function, the scene and camera are rendered\n        let animate = () => {\n            requestAnimationFrame(animate);\n            // tDelta represents the time that has passed since the last time getDelta() was called\n            let tDelta = this.clockStuff.clock.getDelta();\n\n            // Animation :)\n            this.simulate(tDelta);\n\n            // Update display\n            if (this.props.world.dirty) {\n                this.updateDisplay();\n            };\n\n            this.positionZCue();\n\n            let z = this.constantValues.WOBBLE_MAGNITUDE * Math.sin(this.clockStuff.clock.elapsedTime * 4 * Math.PI / this.constantValues.WOBBLE_PERIOD);\n            let y = this.constantValues.WOBBLE_MAGNITUDE * Math.cos(this.clockStuff.clock.elapsedTime * 2 * Math.PI / this.constantValues.WOBBLE_PERIOD);\n            let v = new THREE.Vector3(0, y, z);\n\n            // Smoothens out the dragon's movement and animation\n            // Waiting...\n            if (this.dragAnimation.animStatus === Animation.waiting) { // If animStatus is waiting...\n                this.dragAnimation.waitTime -= tDelta; // Substract time since last iteration\n                if (this.dragAnimation.waitTime <= 0) { // If waitTime gets below 0...\n                    tDelta += this.dragAnimation.waitTime; // Substract waitTime from tDelta\n                    this.dragAnimation.animStatus = Animation.animating; // animSatus is animating!\n                }\n            }\n            // Animating...\n            if (this.dragAnimation.animStatus === Animation.animating) {\n                // lerp and slerp gradually towards the dragon final position and direction\n                this.geometries.dragon.position.lerp(this.finalValues.finalDragPos, Math.min(tDelta / this.dragAnimation.animTime, 1));\n                this.geometries.dragon.quaternion.slerp(this.finalValues.finalDragQ, Math.min(tDelta / this.dragAnimation.animTime, 1));\n                this.dragAnimation.animTime -= tDelta; // Subtract tDelta from animTime to animate on time\n                if (this.dragAnimation.animTime <= 0) { // If animTime < 0...\n                    this.geometries.dragon.position.copy(this.finalValues.finalDragPos); // End the animation, send dragon to final positions\n                    this.geometries.dragon.quaternion.copy(this.finalValues.finalDragQ);\n                    this.dragAnimation.animStatus = Animation.done;\n                }\n            }\n\n            // Smoothly move the camera towards its position relative to the dragon\n            let newCamPos = v.add(this.cameraPos.relativeCamPos).add(this.geometries.dragon.position);\n            this.mainStuff.camera.position.lerp(newCamPos, this.constantValues.TRANSLATION_SMOOTHNESS * tDelta);\n\n            // Smoothly rotate the camera to look at the dragon\n            this.mainStuff.camera.lookAt(this.geometries.dragon.position);\n            let newCamQ = this.mainStuff.camera.quaternion.clone();\n            let oldCamQ = this.mainStuff.camera.quaternion.clone();\n            this.mainStuff.camera.quaternion.copy(oldCamQ);\n            this.mainStuff.camera.quaternion.slerp(newCamQ, this.constantValues.ROTATION_SMOOTHNESS * tDelta);\n\n            // Render everything\n            this.mainStuff.renderer.render(this.mainStuff.scene, this.mainStuff.camera);\n        };\n        animate();\n    }\n\n    // This method is passed into the Slider file. Each time it's called, the animPerSec changes\n    handleSlideChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        // use value from event to set animations per second\n        this.dragAnimation.animPerSec = parseFloat(e.target.value);\n    }\n\n    // ZoomIn method passed to cameraPositioning file. Manipulates relativeCamPos by .8\n    zoomInCamera = (e: React.MouseEvent<HTMLElement>) => {\n        if (this.cameraPos.relativeCamPosMag > 5) { // Ensures that the camera doesn't zoom in too far\n            this.cameraPos.relativeCamPos.multiplyScalar(.8);\n            this.cameraPos.relativeCamPosMag = this.cameraPos.relativeCamPos.length() - 0.5; // Updates realtiveCamPosMag\n        }\n    }\n\n    // ZoomOut method passed to cameraPositioning file. Manipulates relativeCamPos by 1.2\n    zoomOutCamera = (e: React.MouseEvent<HTMLElement>) => {\n        if (this.cameraPos.relativeCamPosMag < 100) { // Ensures the camera doesn't zoom out too far\n            this.cameraPos.relativeCamPos.multiplyScalar(1.2);\n            this.cameraPos.relativeCamPosMag = this.cameraPos.relativeCamPos.length() - 0.5; // Updates realtiveCamPosMag\n        }\n    }\n\n    // RotateRight method passed into cameraPositioning\n    rotateCameraRight = (e: React.MouseEvent<HTMLElement>) => {\n        let q = new THREE.Quaternion();\n        q.setFromAxisAngle(this.cameraPos.upVector, this.degreesToRadians(10)); // Create now quaternion based off of current dragon pos and 10 degrees\n        this.cameraPos.relativeCamPos.applyQuaternion(q);\n    }\n\n    // RotateLeft method passed into cameraPositioning\n    rotateCameraLeft = (e: React.MouseEvent<HTMLElement>) => {\n        let q = new THREE.Quaternion();\n        q.setFromAxisAngle(this.cameraPos.upVector, this.degreesToRadians(-10)); // Create now quaternion based off of current dragon pos and -10 degrees\n        this.cameraPos.relativeCamPos.applyQuaternion(q);\n    }\n\n    // TiltUp method passed into cameraPositioning\n    tiltCameraUp = (e: React.MouseEvent<HTMLElement>) => {\n        let q = new THREE.Quaternion();\n        // Sets the new quaternion to the current camPos and crosses it with the \"upVector\" (0, 0, 1)\n        q.setFromAxisAngle(this.cameraPos.relativeCamPos.clone().cross(this.cameraPos.upVector).normalize(), this.degreesToRadians(10));\n        this.cameraPos.relativeCamPos.applyQuaternion(q);\n    }\n\n    // TiltDown method passed into cameraPositioning\n    tiltCameraDown = (e: React.MouseEvent<HTMLElement>) => {\n        let q = new THREE.Quaternion();\n        // Sets the new quaternion to the current camPos and crosses it with the \"upVector\" (0, 0, 1)\n        q.setFromAxisAngle(this.cameraPos.relativeCamPos.clone().cross(this.cameraPos.upVector).normalize(), this.degreesToRadians(-10));\n        this.cameraPos.relativeCamPos.applyQuaternion(q);\n    }\n\n    render() {\n        return (\n            <div id=\"three-js\" ref={this.divRef}>\n                <div className=\"game-controls-bar-container\">\n                    <div className=\"camera-control-category\">\n                        <div className=\"game-control_title\"><h4>Tilt</h4></div>\n                        <div className=\"game-control_buttons\">\n                            <CameraTiltDown onClickFunction={this.tiltCameraDown} />\n                            <CameraTiltUp onClickFunction={this.tiltCameraUp} />\n                        </div>\n                    </div>\n                    <div className=\"camera-control-category\">\n                        <div className=\"game-control_title\"><h4>Rotate</h4></div>\n                        <div className=\"game-control_buttons\">\n                            <CameraRotateLeft onClickFunction={this.rotateCameraLeft} />\n                            <CameraRotateRight onClickFunction={this.rotateCameraRight} />\n                        </div>\n                    </div>\n                    <div className=\"camera-control-category\">\n                        <div className=\"game-control_title\"><h4>Zoom</h4></div>\n                        <div className=\"game-control_buttons\">\n                            <CameraZoomIn onClickFunction={this.zoomInCamera} />\n                            <CameraZoomOut onClickFunction={this.zoomOutCamera} />\n                        </div>\n                    </div>\n                    <div className=\"camera-control-category\">\n                        <div className=\"game-control_title\"><h4>Change Speed</h4></div>\n                        <div className=\"btn-time-slider\">\n                            <Slider onChange={this.handleSlideChange} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\n\n\n\ntype SliderVals = {\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nexport default class Slider extends React.Component<SliderVals> {\n\n    render() {\n        return (\n            <div className=\"slider-container\" style={{ color: \"black\", direction: \"rtl\" }}>\n                <div className=\"slider-buttons-container\">\n                    <div className=\"slider-left-header\">\n                        <h6>Fast</h6>\n                    </div>\n                    <input type=\"range\" min={0.01} max={2} step={0.01} className=\"slider\" onChange={this.props.onChange} />\n                    <div className=\"slider-right-header\">\n                        <h6>Slow</h6>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n};","import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n// Type that holds all methods that are passed in. Each one has a question mark in case it's not called\ntype CameraVals = {\n    onClickFunction: (e: React.MouseEvent<HTMLElement>) => void;\n}\n\n// Creates button for zooming in\nfunction CameraZoomIn(props: CameraVals) {\n    return (\n        <div>\n            <button className=\"ZoomIn\" onClick={props.onClickFunction}><h1><FontAwesomeIcon icon=\"search-plus\" style={{ color: 'white' }} /></h1></button>\n        </div>\n    );\n};\n\n// Creates button for zooming out\nfunction CameraZoomOut(props: CameraVals) {\n    return (\n        <div>\n            <button className=\"ZoomOut\" onClick={props.onClickFunction}> <h1><FontAwesomeIcon icon=\"search-minus\" style={{ color: 'white' }} /></h1></button>\n        </div>\n    );\n};\n\n// Creates button for tilting up\nfunction CameraTiltUp(props: CameraVals) {\n    return (\n        <div>\n            <button className=\"TiltUp\" onClick={props.onClickFunction}><h1><FontAwesomeIcon icon=\"arrow-up\" style={{ color: 'white' }} /></h1></button>\n        </div>\n    );\n};\n\n// Creates button for tilting down\nfunction CameraTiltDown(props: CameraVals) {\n    return (\n        <div>\n            <button className=\"TiltDown\" onClick={props.onClickFunction}><h1><FontAwesomeIcon icon=\"arrow-down\" style={{ color: 'white' }} /></h1></button>\n        </div>\n    );\n};\n\n\n// Creates button for rotating right\nfunction CameraRotateRight(props:CameraVals) {\n    return (\n        <div>\n            <button className=\"RotateRight\" onClick={props.onClickFunction}><h1><FontAwesomeIcon icon=\"redo\" style={{ color: 'white' }} /></h1></button>\n        </div>\n    );\n};\n\n// Creates button for rotating left\nfunction CameraRotateLeft(props: CameraVals) {\n    return (\n        <div>\n            <button className=\"RotateLeft\" onClick={props.onClickFunction}><h1><FontAwesomeIcon icon=\"undo\" style={{ color: 'white' }} /></h1></button>\n        </div>\n    );\n\n};\n\nexport {\n    CameraZoomIn,\n    CameraZoomOut,\n    CameraRotateRight,\n    CameraRotateLeft,\n    CameraTiltUp,\n    CameraTiltDown\n}","import { ViewType } from \"./App\";\r\nimport { GameState } from './App';\r\n\r\ntype RunProps = {\r\n    gamestate: GameState\r\n    onClick: () => void\r\n}\r\n\r\nexport function Run(props: RunProps) {\r\n    let msg = props.gamestate.reset ? \"Reset\" : \"Run\";\r\n    let col = props.gamestate.reset ? \"reset\" : \"run\";\r\n    // if (col === \"run\") {\r\n    //     props.gamestate.view = ViewType.Normal;\r\n    // }\r\n    return (\r\n        <button id=\"game-control-btn-playback\" className=\"run-button-back\" onClick={props.onClick} value={col}>\r\n            <span className=\"run-button-front\" title={col}>\r\n                {msg}\r\n            </span>\r\n        </button>\r\n    )\r\n}\r\n","import _ from \"lodash\"\nimport { PuzzleSpec } from \"./PuzzleState\"\n\ntype PuzzleConnection = {\n    source: string\n    dest: string\n}\n\n// A puzzle sequence is a set of puzzles related to a particular topic\ntype PuzzleSequence = {\n    name: string // display name\n    tag: string // internal name\n    puzzles: PuzzleSpec[] // list of parsed PuzzleSpecs for the puzzles in the sequence\n    connections: PuzzleConnection[] // connections between puzzles (i.e., edges in a graph)\n}\n\ntype PuzzlePack = {\n    name: string\n    seqs: PuzzleSequence[] // a pack consists of some number of puzzle sequences\n}\n\ntype PuzzleIndex = {\n    pack_index: number\n    seq_index: number\n    puz_index: number\n}\n\n/* \n * The PuzzleManager will load public/packs/packs.json to get a list of the jsons for each pack\n * It will then load and store each of those pack jsons in the array `packs`\n * PuzzleManager also tracks the current puzzle via indexes for the current\n * pack, current sequence, and current puzzle.\n * See comments on the types above for the contents of a pack.\n */\n\nexport default class PuzzleManager {\n    packs: PuzzlePack[]\n    current_puzzle: PuzzleIndex\n    completed_puzzle: Map<string, PuzzleSpec[]> //the map of completed puzzles\n\n    constructor() {\n        this.packs = []\n        this.current_puzzle = {\n            pack_index: 0,\n            seq_index: 0,\n            puz_index: 0\n        }\n        this.completed_puzzle = new Map<string, PuzzleSpec[]>();//key = name of PuzzlePack, value = a puzzle\n    }\n\n    //checks if current puzzle is the last puzzle completed in a sequence\n    check_complete_pack() {\n        let current_sequence = this.get_current_seq().puzzles;\n        let current_pack = this.get_current_pack().name;\n        for (let puzzle of current_sequence) {\n            let puzzles = this.completed_puzzle.get(current_pack);\n            if (puzzles) {\n                if (!puzzles.includes(puzzle)) {\n                    return false;\n                }\n            }\n            else {\n                console.log(\"?????\");\n                return false;\n            }\n        }\n        return true;\n    }\n\n    //adds current puzzle to completed_puzzle\n    complete_puzzle() {\n        let puzzlePackName = this.get_current_pack().name;\n\n        let puzzles = this.completed_puzzle.get(puzzlePackName);\n\n        if (puzzles === undefined) {\n            //if current puzzle is the first one in its own pack that has been completed\n            this.completed_puzzle.set(puzzlePackName, [this.get_current_puzzle()]);\n        } else {\n            let puzzleToAdd = this.get_current_puzzle();\n            puzzles.push(puzzleToAdd);\n            this.completed_puzzle.set(puzzlePackName, puzzles);\n        }\n\n    }\n\n    //used to test complete_puzzle and check player progress\n    find_completed_puzzle() {\n        let completed_puzzle_array = new Array<string>();\n        //console.log(\"completed puzzles: \")\n        for (let pack of this.completed_puzzle.keys()) {\n            let puzzles = this.completed_puzzle.get(pack);\n            if (puzzles) {\n                for (let puzzle of puzzles) {\n                    completed_puzzle_array.push(puzzle.name);\n                }\n            }\n        }\n        return completed_puzzle_array;\n    }\n\n    set_pack(index: number) {\n        if (index !== this.current_puzzle.pack_index) {\n            this.current_puzzle = {\n                pack_index: index,\n                seq_index: 0,\n                puz_index: 0\n            }\n        }\n    }\n\n    // assumes `tag` identifies a unique puzzle within the current pack\n    set_puzzle(tag: string) {\n        let found = false;\n        this.get_current_pack().seqs.forEach((seq, i) => {\n            seq.puzzles.forEach((spec, j) => {\n                if (spec.tag === tag) {\n                    this.current_puzzle = {\n                        pack_index: this.current_puzzle.pack_index,\n                        seq_index: i,\n                        puz_index: j\n                    }\n                    found = true;\n                }\n            });\n        });\n\n        if (!found) {\n            throw new Error(`No puzzle with tag=${tag} exists within the current pack ${this.get_current_pack().name}`);\n        }\n    }\n\n    // returns a list of the tags for all the puzzles in the current pack\n    get_all_puzzles(): string[] {\n        let puzzles: string[] = [];\n        for (let seq of this.get_current_pack().seqs) {\n            puzzles.push(...seq.puzzles.map(ps => ps.tag));\n        }\n        // console.log(\"puzzles: \" + puzzles);\n        return puzzles;\n    }\n\n    get_current_puzzle(): PuzzleSpec {\n        return this.get_current_seq().puzzles[this.current_puzzle.puz_index];\n    }\n\n    get_current_seq(): PuzzleSequence {\n        return this.get_current_pack().seqs[this.current_puzzle.seq_index];\n    }\n\n    get_current_pack(): PuzzlePack {\n        return this.packs[this.current_puzzle.pack_index];\n    }\n\n    next_puzzle(): PuzzleSpec | undefined {\n        this.current_puzzle.puz_index = this.current_puzzle.puz_index+1;\n        // check if we've reached the end of the current sequence\n        if (this.current_puzzle.puz_index === this.get_current_seq().puzzles.length) {\n            this.current_puzzle.puz_index = 0;\n            this.current_puzzle.seq_index++;\n            // check if we've reached the end of the current pack\n            if (this.current_puzzle.seq_index === this.get_current_pack().seqs.length) {\n                console.log(\"PENIS\")\n                return;\n            }\n        }\n        return this.get_current_seq().puzzles[this.current_puzzle.puz_index];\n    }\n\n    get_granted_blocks(devMode: boolean) {\n        let granted_blocks: string[] = [];\n        if (devMode) {\n            for (let pack of this.packs) {\n                for (let seq of pack.seqs) {\n                    for (let puzzle of seq.puzzles) {\n                        let blocks = puzzle.library.granted;\n                        for (let block of blocks) {\n                            if (!granted_blocks.includes(block))\n                                granted_blocks.push(block);\n                        }\n                    }\n                }\n            }\n        } else {\n            for (let pack of this.completed_puzzle.keys()) {\n                let puzzles = this.completed_puzzle.get(pack);\n\n                if (puzzles) {\n                    for (let puzzle of puzzles) {\n                        let blocks = puzzle.library.granted;\n                        for (let block of blocks) {\n                            if (!granted_blocks.includes(block))\n                                granted_blocks.push(block);\n                        }\n                    }\n                }\n            }\n        }\n        return granted_blocks\n    }\n\n    load_packs(pack_list: { packs: string[] }) {\n        return new Promise<Promise<PuzzlePack>[]>((resolve) => {\n            let pack_promises: Promise<PuzzlePack>[] = []\n            for (let packfile of pack_list.packs) {\n                pack_promises.push(fetch(`packs/${packfile}`)\n                    .then(response => response.json())\n                    .catch(error => {\n                        console.error(`Problem encountered loading packs/${packfile}: ${error}`);\n                    }));\n            }\n            resolve(pack_promises);\n        });\n    }\n\n    load_all_puzzles() {\n        let promises: Promise<PuzzleSpec>[] = [];\n        for (let pack of this.packs) {\n            for (let seq of pack.seqs) {\n                // HACK: seqs is a list of strings when initially parsed from JSON,\n                // we are replacing those with PuzzleStates here\n                ((seq.puzzles as unknown) as string[]).forEach((tag, index) => {\n                    promises.push(fetch(`puzzles/${tag}.json`)\n                        .then(response => response.json())\n                        .then(json => seq.puzzles[index] = json)\n                        .catch(error => console.error(`Could not load spec from puzzles/${tag}.json: ${error}`)));\n                });\n            }\n        }\n        return Promise.all(promises);\n    }\n\n    // the nested promise structure is a little wonky, and doesn't handle errors as gracefully as I'd like\n    // but it does work\n    initialize() {\n        return fetch(\"packs/packs.json\")\n            .then(response => response.json())\n            .then(this.load_packs)\n            .then(pack_promises => Promise.all(pack_promises))\n            .then(packs => this.packs = packs)\n            .then(() => this.load_all_puzzles())\n            .catch(error => console.error(`Problem encountered loading packs/packs.json: ${error}`));\n    }\n}","import { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { faSearchMinus, faSearchPlus, faRedo, faUndo, faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(fab, faSearchMinus, faSearchPlus, faRedo, faUndo, faArrowUp, faArrowDown);","import React from 'react';\nimport BlocklyComp, { blocks_to_text, text_to_blocks } from './BlocklyComp';\nimport Display from './Display';\nimport WorldState from './WorldState';\nimport { load_stdlib, IncrementalSimulator } from './Simulator';\nimport parse, { EMPTY_PROGRAM, Program, SyntaxError } from './Parser';\nimport PuzzleState, { SANDBOX_STATE } from './PuzzleState';\nimport { Run } from './RunButton';\nimport _ from 'lodash';\nimport PuzzleManager from './PuzzleManager';\nimport \"./css/index.css\"\nimport \"./FontAwesomeIcons\";\nimport PuzzleSelect from './PuzzleSelect';\n\n\nexport type GameState = {\n  program: Program\n  world: WorldState\n  puzzle?: PuzzleState\n  simulator: IncrementalSimulator\n  reset: boolean\n  lastSavedWorld: WorldState | undefined\n  devMode: boolean\n  view: ViewType\n  puzzle_manager: PuzzleManager\n}\n\nexport enum ViewType {\n  Loading = \"loading\",\n  Normal = \"normal\",\n  PuzzleSelect = \"puzzleSelect\",\n  SequencePause = \"sequencePause\",\n  PuzzlePause = \"puzzlePause\",\n  LearnMore = \"learnMore\"\n}\n\n\n\nclass App extends React.Component<{}, GameState> {\n\n  constructor(props: {}) {\n    super(props);\n    load_stdlib();\n\n    this.state = {\n      program: EMPTY_PROGRAM,\n      reset: false,\n      world: new WorldState(),\n      simulator: new IncrementalSimulator(new WorldState(), EMPTY_PROGRAM),\n      lastSavedWorld: undefined,\n      view: ViewType.Loading,\n      puzzle_manager: new PuzzleManager(),\n      devMode: false\n    }\n    this.load_last_progress();\n  }\n\n  learn_more(pack: number) {\n    this.state.puzzle_manager.set_pack(pack);\n    this.setState({\n      view: ViewType.Normal\n    });\n    this.load_puzzle(`puzzles/${this.state.puzzle_manager.get_current_puzzle().tag}.json`);\n    \n  }\n\n  save_progress() {\n    let progress = JSON.stringify([...this.state.puzzle_manager.completed_puzzle]);\n    window.localStorage.setItem(\"progress\", progress);\n\n    let next_puzzle = JSON.stringify([this.state.puzzle_manager.next_puzzle()]);\n    window.localStorage.setItem(\"puzzle\", next_puzzle);\n  }\n\n  load_last_progress() {\n    // return window.localStorage.getItem(\"progress\");\n    let progress_string = window.localStorage.getItem(\"progress\");\n    if (progress_string) {\n      this.state.puzzle_manager.completed_puzzle = new Map(JSON.parse(progress_string))\n    }\n\n    // let puzzle_string = window.localStorage.getItem(\"puzzle\");\n    // if (puzzle_string) {\n    //   // console.log(`puzzles/${puzzle.tag}.json`);\n      \n    //   this.load_puzzle(`puzzles/${(new Map(JSON.parse(puzzle_string))).tag}.json`);\n    // } else {\n    //   this.load_sandbox();\n    // }\n  }\n\n  save_sandbox() {\n    window.localStorage.setItem(\"sandbox\", blocks_to_text());\n  }\n\n  load_last_sandbox() {\n    let program = window.localStorage.getItem(\"sandbox\");\n    if (program) {\n      text_to_blocks(program);\n    }\n  }\n\n  load_puzzle(puzzle_file: string) {\n    PuzzleState.make_from_file(puzzle_file, () => this.win_puzzle()).then(p => {\n      let sim = new IncrementalSimulator(p.start_world, EMPTY_PROGRAM);\n      const ast = parse(p.start_code);\n      if (ast instanceof SyntaxError) {\n        console.error(`Syntax Error: ${ast}`);\n      } else {\n        this.setState({\n          program: ast,\n          world: p.start_world,\n          puzzle: p,\n          simulator: sim,\n          view: ViewType.Normal,\n          reset: false,\n          lastSavedWorld: undefined\n        });\n        text_to_blocks(p.start_code);\n        this.state.puzzle_manager.set_puzzle(p.tag);\n      }\n    });\n  }\n\n  load_sandbox() {\n    let world = new WorldState();\n    world.mark_dirty();\n    let sim = new IncrementalSimulator(world, parse('') as Program);\n    this.setState({\n      world: world,\n      puzzle: SANDBOX_STATE,\n      simulator: sim,\n      reset: false,\n      lastSavedWorld: undefined\n    })\n    this.load_last_sandbox();\n  }\n\n  // when the user completes a puzzle\n  win_puzzle() {\n    this.state.puzzle_manager.complete_puzzle();\n    //this.puzzle_manager.print_completed_puzzle();\n\n    if (this.state.puzzle_manager.check_complete_pack()) {\n      this.setState({\n        view: ViewType.SequencePause\n      });\n      // this.load_sandbox();\n    } else {\n      this.setState({\n        view: ViewType.PuzzlePause\n      })\n    }\n    this.save_progress();\n  }\n\n  toggle_dev_mode() {\n    this.load_sandbox();\n    this.setState({\n      devMode: !this.state.devMode\n    });\n  }\n\n  componentDidMount() {\n    this.state.puzzle_manager.initialize()\n      .then(() => {\n        this.setState({\n          view: ViewType.Normal\n        }, () => this.load_puzzle(`puzzles/${this.state.puzzle_manager.get_current_puzzle().tag}.json`));\n      })\n  }\n\n\n  // run the user's current block program\n  run_program() {\n    if (!this.state.reset) { // run program\n      this.setState({\n        lastSavedWorld: _.cloneDeep(this.state.world)\n      })\n      const program = blocks_to_text();\n      const ast = parse(program);\n      if (ast instanceof SyntaxError) {\n        console.error(`Syntax Error: ${ast}`);\n      } else {\n        this.setState({\n          simulator: new IncrementalSimulator(this.state.world, ast)\n        }, () => this.state.simulator.set_running());\n        if (this.state.puzzle === SANDBOX_STATE )\n        this.save_sandbox();\n      }\n    }\n    else { // reset \n      this.setState({\n        world: this.state.lastSavedWorld!,\n        lastSavedWorld: undefined\n      }, () => { this.state.world.mark_dirty() })\n    }\n\n    //switch the button \n    this.setState({\n      reset: !this.state.reset\n    });\n  }\n\n  // when user clicks the \"continue\" button after completing a puzzle\n  continue() {\n    this.setState({\n      view: ViewType.Normal\n    });\n    let puzzle = this.state.puzzle_manager.next_puzzle();\n    if (puzzle) {\n      // console.log(`puzzles/${puzzle.tag}.json`);\n      this.load_puzzle(`puzzles/${puzzle.tag}.json`);\n    } else {\n      this.load_sandbox();\n    }\n    \n  }\n\n  // called when a new pack is selected via the drop-down\n  on_change_pack(event: React.ChangeEvent<HTMLSelectElement>) {\n    this.state.puzzle_manager.set_pack(parseInt(event.target.value));\n    this.load_puzzle(`puzzles/${this.state.puzzle_manager.get_current_puzzle().tag}.json`);\n  }\n\n  render() {\n\n    if (this.state.view === ViewType.Loading) {\n      return (\n        <h1>Loading...</h1>\n      )\n    }\n\n    else if (this.state.view === ViewType.PuzzleSelect) {\n      return (\n        <PuzzleSelect gameState={this.state} \n          onClickHome={(puzzle_tag) => {\n            this.setState({view: ViewType.Normal});\n            this.load_puzzle(puzzle_tag)\n          }}\n          onClickToPuzzle={(puzzle_tag) => {\n            this.load_puzzle(puzzle_tag)\n            this.setState({\n              view: ViewType.Normal\n            });\n          }} />\n      )\n    }\n\n    else if (this.state.view === ViewType.LearnMore) {\n      return (\n        <div className=\"LearnMore\">\n          <header id=\"header\">\n            <div><h1>Choose a pack:</h1></div>\n          </header>\n\n          <button className=\"standard\" onClick={() => this.learn_more(0)}>\n          Standard\n          </button>\n          <button className=\"test\" onClick={() => this.learn_more(1)}>\n          Test\n          </button>\n        </div>\n      )\n    }\n\n    else {\n      return (\n        <div className=\"App\">\n          <header id=\"header\" className=\"navbar\">\n            {/* <div id=\"header-items\"> */}\n            {/* <div className=\"run-button\">\n              <Run reset={this.state.reset} onClick={() => { this.run_program(); this.get_granted_blocks() }} />\n            </div> */}\n            <div className='header-name'><h1>Dragon Architect</h1></div>\n            <div className=\"puzzle-selection-name-and-button\">\n              <div className=\"current-puzzle-name\">\n                <h5>Current Puzzle: {JSON.stringify(this.state.puzzle?.name)}</h5>\n              </div>\n              <div className='puzzle-select-toggle'>\n                  <button className='puzzle-select-toggle-button-back' onClick={() => this.setState({view: ViewType.PuzzleSelect})}>\n                    <span className='puzzle-select-toggle-button-front'>\n                      Go to puzzle select\n                    </span>\n                  </button>\n              </div>\n            </div>\n            {/* </div> */}\n          </header>\n          <div className='dev-controls-header'>\n            <div className='pack-container'>\n              <label htmlFor=\"pack-select\" className='pack-label' style={{ color: 'white' }}>Select a pack:</label>\n              <select name=\"pack-select\" id=\"pack-select\" className='pack-select' onChange={event => this.on_change_pack(event)}>\n                {this.state.puzzle_manager.packs.map((pack, index) => <option key={index} value={index}>{pack.name}</option>)}\n              </select>\n            </div>\n            <div className='puzzle-container'>\n              <label htmlFor=\"puzzle-select\" className='puzzle-label' style={{ color: 'white' }}>Select a puzzle:</label>\n              <select name=\"puzzle-select\" id=\"puzzle-select\" className='puzzle-select' onChange={event => this.load_puzzle(`puzzles/${event.target.value}.json`)}>\n                {this.state.puzzle_manager.get_all_puzzles().map(puzzle => <option key={puzzle} value={puzzle}>{puzzle}</option>)}\n              </select>\n            </div>\n            <div className=\"buttons-header-container\">\n              <div id=\"dev-mode-button\" className='dev-mode'>\n                <button name=\"dev-mode\" className='dev-mode-button-back' onClick={() => this.toggle_dev_mode()}>\n                  <span className='dev-mode-button-front'>\n                    Toggle Dev Mode\n                  </span>\n                  </button>\n              </div>\n\n              <div id=\"learn-more\" className='learn-more-container'>\n                <button name=\"learn-more\" className='learn-more-button-back' onClick={() => this.setState({view: ViewType.LearnMore})}>\n                  <span className='learn-more-button-front'>\n                    Learn More\n                  </span>\n                </button>\n              </div>\n\n              {/* <div id=\"save-progress\" className='save-progress-container'>\n                <button name=\"save-progress\" className='save-progress-button-back' onClick={() => this.save_progress()}>\n                  <span className='save-progress-button-front'>\n                    Save Progress\n                  </span>\n                </button>\n              </div> */}\n\n              {/* <div id=\"load-progress\" className='load-progress-container'>\n                <button name=\"load-progress\" className='load-progress-button-back' onClick={() => this.load_last_progress()}>\n                  <span className='load-progress-button-front'>\n                    Load Progress\n                  </span>\n                </button>\n              </div> */}\n              \n              {/* <div id=\"save-sandbox\" className='save-sandbox-container'>\n                <button name=\"save-sandbox\" className='save-sandbox-button-back' onClick={() => this.save_sandbox()}>\n                  <span className='save-sandbox-button-front'>\n                    Save Sandbox\n                  </span>\n                </button>\n              </div> */}\n\n              {/* <div id=\"load-sandbox\" className='load-sandbox-container'>\n                <button name=\"load-sandbox\" className='load-sandbox-button-back' onClick={() => this.load_last_sandbox()}>\n                  <span className='load-sandbox-button-front'>\n                    Load Sandbox\n                  </span>\n                </button>\n              </div> */}\n\n            </div>\n          </div>\n\n          <div id=\"main-view-code\">\n            <BlocklyComp {...this.state} />\n          </div>\n\n          {(this.state.view === ViewType.SequencePause) && (this.state.reset) &&\n            <div className='congrats-box'>\n              <h4 style={{color: 'white' }}>You just finished all puzzles in this sequence!</h4>\n              <button className='congrats-button-back' onClick={() => { this.load_sandbox(); }}>\n                <span className='congrats-button-front'>\n                  <h2>Go To Sandbox</h2>\n                </span>\n              </button>\n            </div>}\n\n\n          {(this.state.view === ViewType.PuzzlePause) &&\n            <div className='congrats-box'>\n              <h4 style={{color: 'white' }}>Good job!</h4>\n              <button className='congrats-button-back' onClick={() => { this.continue(); }}>\n                <span className='congrats-button-front'>\n                  <h2>Next Puzzle</h2>\n                </span>\n              </button>\n            </div>}\n\n          <div id=\"main-view-game\">\n            <Display {...this.state} />\n            <div id=\"instructions-display\" className=\"goal-section instructions\">\n              <div id=\"instructions-goal\">\n                {this.state.puzzle &&\n                  <p dangerouslySetInnerHTML={{ __html: this.state.puzzle?.instructions }} />\n                }\n              </div>\n            </div>\n          </div>\n\n          <div className=\"run-button-container\">\n              <Run gamestate={this.state} onClick={() => { this.run_program(); }} />\n          </div>\n\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { GameState } from './App';\nimport \"./css/index.css\"\n\ninterface PuzzleSelectProps {\n    gameState: GameState;\n    onClickToPuzzle: (e: string) => void;\n    onClickHome: (e: string) => void;\n}\n\nexport default class PuzzleSelect extends React.Component<PuzzleSelectProps> {\n\n    returnHome(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n        this.props.onClickHome(`puzzles/${event.currentTarget.id}.json`);\n    }\n\n    openPuzzle(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n        this.props.onClickToPuzzle(`puzzles/${event.currentTarget.id}.json`);\n    }\n\n    render() {\n        return (\n            <div className=\"select-puzzle-screen\">\n                <div className='puzzle-select-title'>\n                <h1>Puzzle Select</h1>\n                <h3>Select Which Puzzle You Would Like to Go To!</h3>\n                </div>\n                <div className='home-button-container'>\n                    <button className='home-button-back' onClick={event => this.returnHome(event)}>\n                        <span className='home-button-front'>\n                            Home\n                        </span>\n                    </button>\n                </div>\n                \n                <div className=\"select-puzzle-buttons-container\">\n                    {this.props.gameState.puzzle_manager.get_current_pack().seqs.map(seq => {\n                        return (\n                            <div className=\"puzzle-select-seq-container\">\n                                <h2>{seq.name}</h2>\n                                <div className=\"puzzle-select-buttons\">\n                                    {seq.puzzles.map(puzzle => {\n                                        return (\n                                            <button className=\"puzzle-select-button-back\" id={puzzle.tag}\n                                                value={String(this.props.gameState.puzzle_manager.find_completed_puzzle()?.includes(puzzle.name))}\n                                                onClick={event => this.openPuzzle(event)}>\n                                                    <span className='puzzle-select-button-front' title={String(this.props.gameState.puzzle_manager.find_completed_puzzle()?.includes(puzzle.name))}>\n                                                        {puzzle.name}\n                                                    </span>\n                                            </button>\n                                        )\n                                    })}\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/instructions.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}